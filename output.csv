URL,Heading,Content
http://www.columbia.edu/~fdc/sample.html,Do-It-Yourself Web Authoring - a beginner's HTML tutorial,"Frank da CruzUpdated in 2019 and 2021 for HTML5 and ""fluidity"".This page shows how to create Web pages by hand, the original way.  Although
today most Web pages are created by ""Web authoring systems"" that are
designed to shield you from technical details, the fact is that HTML
(the ""programming"" language of the Web) is not that difficult, as you can
see if you follow this tutorial.  To get an idea of what is possible with
this technique, see these 100% hand-made websites:The New Deal in New
York City 1933-1943The History of
Computing at Columbia University 1890-2005The Washington
DC Nation Mall in World War IIArlington,
Virginia, 1956-61: The Hall's Hill Segregation WallFrankfurt,
Germany, 1959-61CONTENTSCreating a Web PageHTML SyntaxSpecial CharactersConverting Plain Text to HTMLEffectsListsLinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell PhonesYou can create a Web page on your desktop computer but nobody can see it but
you.  If your want other people to be able to see your Web pages, you need
an account on a computer that has a Web server.  Nowadays most people have
their own computers on their desks, but normally they don't have Web servers
and anyway you don't want the whole world coming into your desktop computer
to see your web page because (a) it's not designed for that, and (b) who
knows what else they might see.  And (c) for security reasons, Web servers
should be managed by professionals.  Most institutions have big central
shared computers for this purpose, which usually have
aUnix-like operating
system such as Linux.  You need an account on one of these so you can put
your web pages there.  If you don't have access to such a computer, you can get
a low-cost account on a service likePanix.com.You can still create Web pages on your own computer and look at them with
your computer's Web browser, but for other people to see them, you have to
upload them to the ""big"" computer that has the Web browser.  The rest of
this document is about how to create your first Web page.1. Creating a Web PageThis page was typed by hand.  Anybody can do this, you don't need any
special ""web creation"" tools or HTML editors, and the pages you make can be
viewed from any browser.  To see how this page was made, chooseView Source(or View Page Source, or View Document Source) in your
browser's menu (or — in at least Chrome and Firefox — Ctrl-U on
your keyboard).  A simple web page like this one is just plain text with
HTML commands (markup) mixed in.  HTML commands (properly called ""tags"")
themselves are plain text.When you're just learning and want to experiment, you can do everything on
your PC.  Create a new directory (""folder"") for your website, and then put
the web-page files (HTML plus any pictures) in it.  Use NotePad or other
plain-text editor (not word processor) on your PC to create your ""home page"",
a file namedindex.html, which you can view locally with your Web
browser.  (You can also use a word processors such as Word or WordPad if you
save in ""plain text"", ""text"", ""text document"", or ""text document MS-DOS
format"".)LaterI'll explain how you can install your web site on
the Internet.Once you've made your ""home page"" (index.html) you can add more pages to
your site, and your home page can link to them.2. HTML SyntaxWeb pages are written in Hyper Text Markup Language (HTML).  HTML has three
special characters:<,&,>.
An HTML command is enclosed in<...>, for example<p>, which is a paragraph separator, or<b>(""begin bold"") and</b>(""end bold"").  So the following
HTML text:This sentence contains <b>bold</b> text.produces:This sentence containsboldtext.A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 This page shows how to create Web pages by hand, the original way.  Although
today most Web pages are created by ""Web authoring systems"" that are
designed to shield you from technical details, the fact is that HTML
(the ""programming"" language of the Web) is not that difficult, as you can
see if you follow this tutorial.  To get an idea of what is possible with
this technique, see these 100% hand-made websites:The New Deal in New
York City 1933-1943The History of
Computing at Columbia University 1890-2005The Washington
DC Nation Mall in World War IIArlington,
Virginia, 1956-61: The Hall's Hill Segregation WallFrankfurt,
Germany, 1959-61CONTENTSCreating a Web PageHTML SyntaxSpecial CharactersConverting Plain Text to HTMLEffectsListsLinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell PhonesYou can create a Web page on your desktop computer but nobody can see it but
you.  If your want other people to be able to see your Web pages, you need
an account on a computer that has a Web server.  Nowadays most people have
their own computers on their desks, but normally they don't have Web servers
and anyway you don't want the whole world coming into your desktop computer
to see your web page because (a) it's not designed for that, and (b) who
knows what else they might see.  And (c) for security reasons, Web servers
should be managed by professionals.  Most institutions have big central
shared computers for this purpose, which usually have
aUnix-like operating
system such as Linux.  You need an account on one of these so you can put
your web pages there.  If you don't have access to such a computer, you can get
a low-cost account on a service likePanix.com.You can still create Web pages on your own computer and look at them with
your computer's Web browser, but for other people to see them, you have to
upload them to the ""big"" computer that has the Web browser.  The rest of
this document is about how to create your first Web page.1. Creating a Web PageThis page was typed by hand.  Anybody can do this, you don't need any
special ""web creation"" tools or HTML editors, and the pages you make can be
viewed from any browser.  To see how this page was made, chooseView Source(or View Page Source, or View Document Source) in your
browser's menu (or — in at least Chrome and Firefox — Ctrl-U on
your keyboard).  A simple web page like this one is just plain text with
HTML commands (markup) mixed in.  HTML commands (properly called ""tags"")
themselves are plain text.When you're just learning and want to experiment, you can do everything on
your PC.  Create a new directory (""folder"") for your website, and then put
the web-page files (HTML plus any pictures) in it.  Use NotePad or other
plain-text editor (not word processor) on your PC to create your ""home page"",
a file namedindex.html, which you can view locally with your Web
browser.  (You can also use a word processors such as Word or WordPad if you
save in ""plain text"", ""text"", ""text document"", or ""text document MS-DOS
format"".)LaterI'll explain how you can install your web site on
the Internet.Once you've made your ""home page"" (index.html) you can add more pages to
your site, and your home page can link to them.2. HTML SyntaxWeb pages are written in Hyper Text Markup Language (HTML).  HTML has three
special characters:<,&,>.
An HTML command is enclosed in<...>, for example<p>, which is a paragraph separator, or<b>(""begin bold"") and</b>(""end bold"").  So the following
HTML text:This sentence contains <b>bold</b> text.produces:This sentence containsboldtext.A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 The New Deal in New
York City 1933-1943The History of
Computing at Columbia University 1890-2005The Washington
DC Nation Mall in World War IIArlington,
Virginia, 1956-61: The Hall's Hill Segregation WallFrankfurt,
Germany, 1959-61 The History of
Computing at Columbia University 1890-2005The Washington
DC Nation Mall in World War IIArlington,
Virginia, 1956-61: The Hall's Hill Segregation WallFrankfurt,
Germany, 1959-61 The Washington
DC Nation Mall in World War IIArlington,
Virginia, 1956-61: The Hall's Hill Segregation WallFrankfurt,
Germany, 1959-61 Arlington,
Virginia, 1956-61: The Hall's Hill Segregation WallFrankfurt,
Germany, 1959-61 Frankfurt,
Germany, 1959-61"
http://www.columbia.edu/~fdc/sample.html,CONTENTS,"Creating a Web PageHTML SyntaxSpecial CharactersConverting Plain Text to HTMLEffectsListsLinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones HTML SyntaxSpecial CharactersConverting Plain Text to HTMLEffectsListsLinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones Special CharactersConverting Plain Text to HTMLEffectsListsLinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones Converting Plain Text to HTMLEffectsListsLinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones EffectsListsLinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones ListsLinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones LinksTablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones TablesViewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones Viewing your Web pageInstalling your Web Page on the InternetWhere to go from herePostscript: Cell Phones Installing your Web Page on the InternetWhere to go from herePostscript: Cell Phones Where to go from herePostscript: Cell Phones Postscript: Cell Phones You can create a Web page on your desktop computer but nobody can see it but
you.  If your want other people to be able to see your Web pages, you need
an account on a computer that has a Web server.  Nowadays most people have
their own computers on their desks, but normally they don't have Web servers
and anyway you don't want the whole world coming into your desktop computer
to see your web page because (a) it's not designed for that, and (b) who
knows what else they might see.  And (c) for security reasons, Web servers
should be managed by professionals.  Most institutions have big central
shared computers for this purpose, which usually have
aUnix-like operating
system such as Linux.  You need an account on one of these so you can put
your web pages there.  If you don't have access to such a computer, you can get
a low-cost account on a service likePanix.com.You can still create Web pages on your own computer and look at them with
your computer's Web browser, but for other people to see them, you have to
upload them to the ""big"" computer that has the Web browser.  The rest of
this document is about how to create your first Web page.1. Creating a Web PageThis page was typed by hand.  Anybody can do this, you don't need any
special ""web creation"" tools or HTML editors, and the pages you make can be
viewed from any browser.  To see how this page was made, chooseView Source(or View Page Source, or View Document Source) in your
browser's menu (or — in at least Chrome and Firefox — Ctrl-U on
your keyboard).  A simple web page like this one is just plain text with
HTML commands (markup) mixed in.  HTML commands (properly called ""tags"")
themselves are plain text.When you're just learning and want to experiment, you can do everything on
your PC.  Create a new directory (""folder"") for your website, and then put
the web-page files (HTML plus any pictures) in it.  Use NotePad or other
plain-text editor (not word processor) on your PC to create your ""home page"",
a file namedindex.html, which you can view locally with your Web
browser.  (You can also use a word processors such as Word or WordPad if you
save in ""plain text"", ""text"", ""text document"", or ""text document MS-DOS
format"".)LaterI'll explain how you can install your web site on
the Internet.Once you've made your ""home page"" (index.html) you can add more pages to
your site, and your home page can link to them.2. HTML SyntaxWeb pages are written in Hyper Text Markup Language (HTML).  HTML has three
special characters:<,&,>.
An HTML command is enclosed in<...>, for example<p>, which is a paragraph separator, or<b>(""begin bold"") and</b>(""end bold"").  So the following
HTML text:This sentence contains <b>bold</b> text.produces:This sentence containsboldtext.A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 You can still create Web pages on your own computer and look at them with
your computer's Web browser, but for other people to see them, you have to
upload them to the ""big"" computer that has the Web browser.  The rest of
this document is about how to create your first Web page.1. Creating a Web PageThis page was typed by hand.  Anybody can do this, you don't need any
special ""web creation"" tools or HTML editors, and the pages you make can be
viewed from any browser.  To see how this page was made, chooseView Source(or View Page Source, or View Document Source) in your
browser's menu (or — in at least Chrome and Firefox — Ctrl-U on
your keyboard).  A simple web page like this one is just plain text with
HTML commands (markup) mixed in.  HTML commands (properly called ""tags"")
themselves are plain text.When you're just learning and want to experiment, you can do everything on
your PC.  Create a new directory (""folder"") for your website, and then put
the web-page files (HTML plus any pictures) in it.  Use NotePad or other
plain-text editor (not word processor) on your PC to create your ""home page"",
a file namedindex.html, which you can view locally with your Web
browser.  (You can also use a word processors such as Word or WordPad if you
save in ""plain text"", ""text"", ""text document"", or ""text document MS-DOS
format"".)LaterI'll explain how you can install your web site on
the Internet.Once you've made your ""home page"" (index.html) you can add more pages to
your site, and your home page can link to them.2. HTML SyntaxWeb pages are written in Hyper Text Markup Language (HTML).  HTML has three
special characters:<,&,>.
An HTML command is enclosed in<...>, for example<p>, which is a paragraph separator, or<b>(""begin bold"") and</b>(""end bold"").  So the following
HTML text:This sentence contains <b>bold</b> text.produces:This sentence containsboldtext.A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,1. Creating a Web Page,"When you're just learning and want to experiment, you can do everything on
your PC.  Create a new directory (""folder"") for your website, and then put
the web-page files (HTML plus any pictures) in it.  Use NotePad or other
plain-text editor (not word processor) on your PC to create your ""home page"",
a file namedindex.html, which you can view locally with your Web
browser.  (You can also use a word processors such as Word or WordPad if you
save in ""plain text"", ""text"", ""text document"", or ""text document MS-DOS
format"".)LaterI'll explain how you can install your web site on
the Internet.Once you've made your ""home page"" (index.html) you can add more pages to
your site, and your home page can link to them.2. HTML SyntaxWeb pages are written in Hyper Text Markup Language (HTML).  HTML has three
special characters:<,&,>.
An HTML command is enclosed in<...>, for example<p>, which is a paragraph separator, or<b>(""begin bold"") and</b>(""end bold"").  So the following
HTML text:This sentence contains <b>bold</b> text.produces:This sentence containsboldtext.A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Once you've made your ""home page"" (index.html) you can add more pages to
your site, and your home page can link to them.2. HTML SyntaxWeb pages are written in Hyper Text Markup Language (HTML).  HTML has three
special characters:<,&,>.
An HTML command is enclosed in<...>, for example<p>, which is a paragraph separator, or<b>(""begin bold"") and</b>(""end bold"").  So the following
HTML text:This sentence contains <b>bold</b> text.produces:This sentence containsboldtext.A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,2. HTML Syntax,"This sentence containsboldtext.A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 <!DOCTYPE HTML>
<html lang=""en"">
<head>
<META charset=""UTF-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
<title>Sample Web Page</title>
</head>
<body>(Contents go here)</body>
</html>The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 (Contents go here)</body>
</html> </body>
</html> The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?"").The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 The<body>tag starts the body of the
document, is closed by</body>tag.As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command.Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>.Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Example for Windows:Use the mouse to copy the HTML above into NotePad.  Then save the file
(File->Save As...)
in your Web directory asindex.html.  Suppose your Windows username
is Olga.  Then (depending on which version of Windows you have) this might
be:C:\Users\Olga\Desktop\Web\index.htmlNow to see your new web page, just double-click on the Web folder and
then double-click onindex.html.Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser.The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 The next sections tell how to achieve different kinds of effects.3. Special CharactersHTML special ""character entities"" start with ampersand (&) and
end with semicolon (;), like ""&euro;"" = ""€"".  The
ever-popular ""no-break space"" is&nbsp;.  There are special
entity names for accented Latin letters and other West European special
characters such as:&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,3. Special Characters,"&auml;a-umlautä&Auml;A-umlautÄ&aacute;a-acuteá&agrave;a-graveà&ntilde;n-tildeñ&szlig;German double-sß&thorn;Icelandic thornþ(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 (The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow.Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Examples:ForSpanishyou would need:&Aacute;(Á),&aacute;(á),&Eacute;(É),&eacute;(é),&Iacute;(Í),&iacute;(í),&Oacute;(Ó),&oacute;(ó),&Uacute;(ú),&uacute;(ú),&Uuml;(Ü),&uuml;(ü),&Ntilde;(Ñ),&ntilde;(ñ);&iquest;(¿);&iexcl;(¡).Example: Añorarán =A&ntilde;orar&aacute;n.ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln.CLICK HEREfor a complete list.  When the page encoding isUTF-8, which is
recommended, you can also enter any character at all, Roman,
Cyrillic, Arabic, Hebrew, Greek. Japanese,
etc, either as numeric entities or (if you have a way to type them) directly
from the keyboard.And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 ForGermanyou would need:&Auml;(Ä),&auml;(ä),&Ouml;(Ö),&ouml;(ö),&Uuml;(ü),&uuml;(ü),&szlig;(ß).Example: Grüße aus Köln =Gr&uuml;&szlig;e aus K&ouml;ln. And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively.4. Converting Plain Text to HTMLIf you have a plain text file that you want to convert to HTML, load the
file into a plain-text editor and then follow these steps.Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,4. Converting Plain Text to HTML,"Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html.If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Change all occurrences of ""&"" to ""&amp;"".Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. Change all occurrences of ""<"" to ""&lt;"".Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. Change all occurrences of "">"" to ""&gt;"".Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. Change any accented letters to HTML entity names (previous section)*.Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. Put ""<p>"" between each paragraph.Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. Insert the standard prolog at the top, substituting an appropriate title.Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. Add</body>and</html>at the end.Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. If you are aKermituser, you
can find a script to convert plain text to HTMLHERE.If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 If the text contains lists, tables, or other structures, read on.If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section).*Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 *Not necessary if your text is already encoded as UTF-8.  If it's not
UTF-8, you can identify the encoding in the <META charset=""..."">
directive, but this topic is a bit advanced for this simple tutorial.5. EffectsThe rest of this document shows some of what you can do with simple HTML
commands, but I don't explain how to do it.  To see that, just tell your
browser toView Sourceand compare the HTML in the source window with
the result in the original window.Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,5. Effects,"Note:In this and the following
sections, I use some ""deprecated"" features from earlier HTML versions
because they are easier for beginners to learn (for
example<big>...</big>versus<span style=""font-size:120%"">...</span>).This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words.This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 This is a ""blockquote"", which is like a regular paragraph, but it has bigger
margins.  Begin a blockquote with<blockquote>and end
it with</blockquote>.  Environments such as blockquotes,
lists, etc, that have a beginning and an end always use paired commands like<blah>...</blah>.This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again.And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 This is a blockquote inside another blockquote, which shows how HTML
environments can be ""nested"".Here we are back in the first blockquote again. Here we are back in the first blockquote again. And here we are back outside of the first blockquote.6. ListsHere is an Unordered (bullet) List (<ul>..</ul>):This is a List Item (<li>).This is another item.This is yet another item.Here is an Ordered (numbered) List (<ol>..</ol>):This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,6. Lists,"This is a List Item (<li>).This is another item.This is yet another item. This is another item.This is yet another item. This is yet another item. This is a List Item (<li>).This is another item.This is yet another item.And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 This is a List Item (<li>).This is another item.This is yet another item. This is another item.This is yet another item. This is yet another item. And here is a Description List (<dl>).
using Kermit commands as an example:SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 SET FILE TYPE BINARYThis command tells Kermit to transfer files in binary mode.  In other
words, don't mess with the file, just send it as-is.  The result on the
receiving computer should be identical to the original.SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer.You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 SET FILE TYPE TEXTThis command tells Kermit to transfer files in text mode.  This should be
used with plain-text files, especially when transferring them between
computers with different file formats or operating systems, such as VMS and
Unix, or Unix and Windows.  It converts the file's format and character-set
(if necessary) so the received file is usable on the destination computer. You can have lists within lists:A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad.And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 A grometA widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad. A widgetA framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad. A framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit.A doodad. A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit. A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit. PurplePurplePurple PurplePurple Purple A whatchamacallit. A doodad. A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit. A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit. PurplePurplePurple PurplePurple Purple A whatchamacallit. PurplePurplePurple PurplePurple Purple And you can have ordered lists that use letters instead of numbers:PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 PenniesNickelsDimesQuarters7. LinksLinks can be internal within a Web page (like to
theTable of Contentsat the top), or they
can be to external web pages or pictures on the same website, or they
can be to websites, pages, or pictures anywhere else in the world.Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 PenniesNickelsDimesQuarters NickelsDimesQuarters DimesQuarters Quarters"
http://www.columbia.edu/~fdc/sample.html,7. Links,"Here is a link to theKermit
Project home page.  And here is what the HTML looks like:<a href=""http://www.kermitproject.org/"">
Kermit Project home page
</a>The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML:<a href=""#lists"">Section 6</a>The ""#"" indicates an internal section ID, in this case:<h3 id=""lists"">6. Lists</h3>Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML:<a href=""http://kermitproject.org/ckuins.html#x4.0"">
Section 4.0
</a>Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Here is a link to a picture:CLICK HEREto see it.If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck.If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL.8. TablesHere's a simple table with some headings and a few rows:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,8. Tables,"Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSame table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Same table again but with borders:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CThe appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 The appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance.Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Here's the same table again but with Column C right-adjusted:Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CAnd finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 And finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"".Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Heading AHeading BHeading CCell 1ACell 1BCell 1CCell 2ACell 2BCell 2CCell 3ACell 3BCell 3CSo with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 So with just three lines added to the<style>section at the top of the page, you can make
all your tables look better.9. Viewing Your Web PageAnyway, back to basics.  If you make a simpleindex.htmlin your Web directory like:<!DOCTYPE HTML>
<html lang=""en"">
<head>
<title>My first web page</title>
<META charset=""utf-8"">
<META name=""viewport""
 content=""width=device-width, initial-scale=1.0"">
</head>
<body>
<h2>This is a heading</h2>
And this is some text.
</body>
</html>Then if you double-click onindex.html, it will open in your
Web browser.Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,9. Viewing Your Web Page,"Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R).By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name.10. Installing Your Web Page on the InternetHow to put your web page on the Internet depends on your Internet Service
Provider (ISP).  At Columbia University, each user has a ""shell account"" on
the central server, which runs a Unix-based operating system, and which you
can access with a terminal emulator such asKermit.  Here's an example that
applies to Columbia University's web server, showing how to upload your
files from Windows:There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,10. Installing Your Web Page on the Internet,"There are easier ways to do this than what I describe below, but they
require add-on software.  The following method should work for everybody
who has Windows and an Internet connection.If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory.$cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 $cd(Change to your login directory)$mkdir public_html(Createpublic_htmlsubdirectory)$chmod 755 public_html(Give it world read/search permission)$cd public_html(Enter thepublic_htmlsubdirectory)You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined.Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program:Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Start->Runand type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 and type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc):ftp>lcd DesktopLocal directory now C:\Users\olga\Desktop.
ftp>lcd WebLocal directory now C:\Users\olga\Desktop\Web.
ftp>open cunixConnected to cunix.cc.columbia.edu.
220 Cunix FTP server (Version 5.60) ready.
User (cunix.cc.columbia.edu:(none)):olga331 Password required for olga.
Password:(type your password here)230 User olga logged in.
ftp>cd public_html(""public_html"" with underscore)ftp>binaryftp>put index.html200 PORT command successful.
150 Opening BINARY mode data connection for index.html.
226 Transfer complete.
ftp: 285 bytes sent in 0.00Seconds 285000.00Kbytes/sec.
ftp>site chmod 644 index.html200 CHMOD command successful
ftp>byeThis sends theindex.htmlfile to yourpublic_htmldirectory on the server.  You can send any other file by substituting its
name for ""index.html.  If you want to send all the files in
your Web folder, replace ""put index.htmlwith ""put *""
(asterisk, meaning ""all files"" in this directory).  Always use binary mode
unless you know what you're doing.If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and:$cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 $cd ~/public_html(Enter thepublic_htmlsubdirectory)$chmod 644 *(Make all files publically readable)Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be:http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 http://www.columbia.edu/~olga/If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and:$cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 $cd ~/public_html(""public_html"" with underscore)
$chmod 644 *Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot:<img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 <img src=""filename"" alt=""brief description"">Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do:<img alt=""brief description""
 style=""width:50%;
  max-width:480px;
  float:left;
  margin:10px;""
  src=""filename"">You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 You can look up the attributes in Google, just search forhtml width,html float, etc.Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is:http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 http://www.columbia.edu/~olga/Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities.11. Where to go from hereMost Web pages are created by hideous bloated ""Web Authoring"" tools, which
are usually designed to hook you (and readers of your web pages) into some
corporate profit-making scheme.  If all you want is text with some pictures
and links, some section headings, and maybe some tables, as opposed to
spinning blinking popup holograms with streaming video, sound effects, etc,
it's best to keep it simple and do it yourself.  This is how the Web started
off in the HTML 1.0 days of the early 1990s.  The ingenious thing was that
it was self propogating.  If you saw a web page with a certain effect and
wanted to know how it was done, you could simply ""view source"" to get the
""source code"" and then adapt it to your own page.  You can still do that
with pages that look like this one, but since most Web pages are no longer
made by hand, you'll often see tons of incomprehensible gibberish (the more
special effects, the more gibberish), for example
atCNN.Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,11. Where to go from here,"Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one.Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 Of course HTML is a standard, and here are the official references:TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete).You can check the validity of your web page at
theW3C Markup Validation Service.
Note that this page itself does not pass the Validator because it uses a
number of ""obsolete"" elements.  That's because (a) they are much easier to
explain, and (b) they still work.  For the first 20 years or so HTML was in
constant flux, but with the release of HTML5 in 2014, it seems to be pretty
stable.If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 TheHTML
5.2 specification(2017).Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete). Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete). If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement.12. Postscript: Cell PhonesThe original Web was composed of pages designed to fit on desktop computer
screens, which, over time, became wider and wider.  But then suddenly they
also had to fit on miniscule cell-phone and even ""smart watch"" screens.  The
main pitfall is that an image might be too wide for the screen, so the image
width should be specified as a percentage of the viewport width, e.g.:<img alt=""Brief description"" 
 title=""Slightly longer description""
 src=""picture-of-something.jpg""
 style=""width:100%;"">Text, on
the other hand, usually just flows to accomodate the viewport.  But if your
page includes text that must not be ""wrapped"" (for example, program source
code, poetry, computer dialog transcripts), you have to enclose such
sections within:<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021"
http://www.columbia.edu/~fdc/sample.html,12. Postscript: Cell Phones,"<div style=""overflow-x:auto; white-space:pre"">material that must not wrap</div>as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page.(End)Frank da CruzPage created:1992Last update:17 September 2021 (End)Frank da CruzPage created:1992Last update:17 September 2021 Frank da CruzPage created:1992Last update:17 September 2021"
http://kermitproject.org/unix.html,C-Kermit UNIX Platforms,"UNIXis an operating system
family that originated in Bell Laboratories in the late 1960s.  In its
beginnings, it was small, elegant, terse, and (since the operating system
itself was written in a high-level language), portable to different kinds of
computers, a rare feature in those days. Since then it has evolved to be a large family of OSs, both open and
proprietary, that taken together are one of the two most widespread of all
OSs, second only to Microsoft Windows, although it predates windows by
decades.  The most well-known versions of Unix today areLinux,Android,Mac OS X,macOS,AIX,Solaris,HP-UX,
and the BSDs (OpenBSD,FreeBSD,NetBSD, etc), but as
you can see there have been many others through the years and many of them
still exist. C-Kermit has been built and tested successfully on 16-bit, 32-bit, and 64-bit
architectures under portable UNIX versions including 4.2, 4.3, and 4.4BSD,
AT&T UNIX System V Releases 3 and 4; and POSIX versions.  C-Kermit 9.0 or
earlier versions (in most cases, 6.0 or later) has been successfully built
and tested on at least the following specific UNIX platforms: Acorn RISCiX Alliant FX/8 with Concentrix 4.1 Altos 486, 586, or 986 with XENIX 3.0 Altos ACS68000 with UNIX System III R2 Amdahl mainframes with UTS 2.4 and UTSV 5.2.6b Amdahl mainframes with UNIX System V R5.2.6 Android Apollo workstations with Aegis 9.7 and with DomainOS SR10.0 and 10.4 Apple Macintosh with A/UX Apple Power Macintosh with Mac OS/X 1.0 thru 10.2 Apple Power Macintosh with Debian Linux Apple Power Macintosh with MkLinux Apple Power Macintosh with LinuxPPP Apple Powerbook with MachTen 2.1.1.D Apple Mac OS X 10.0-10.6 on all platforms (2000-2009) Apple OS X 10.7-10.11 on all platforms (2011-2015) Apple macOS 10.12-? on all platforms (2016-?) AT&T System III AT&T 3B2 and 3B20 systems with UNIX System V R2 and R3 AT&T 6300 PLUS with UNIX System V R2 AT&T 6386 WGS UNIX PC with UNIX System V/386 3.2 AT&T PC 7300 UNIXPC (3B1) System V R3.51m Atari Falcon with MiNT Atari ST with MINIX ST 1.5 BeBox with BeOS DR7 and BeOS 4.5 Bull DPX/2 with BOS/X Bull Escala and other RS/6000 compatibles with AIX Centos Linux Charles River Data Systems Universe with UNOS 9.2 Commodore Amiga with UNIX System V R4 Commodore Amiga with MINIX 1.5.10 Concurrent (Masscomp) computers with RTU 4.0 through 6.0 Convergent Technologies MiniFrame with CTIX System V R3 Convex C1 and C2 with Convex/OS 8.x and 9.x Convex 3240, C220, and C240 with ConvexOS V10.x Cray supercomputers with UNICOS 6.1 through 8.0 and with CSOS 1.0 Debian Linux DEC Alpha, DECstation, and or PC with with OSF/1 versions 1 through 3 DEC Alpha with Digital UNIX 3.2 through 4.0D DEC Alpha with Compaq Tru64 UNIX 4.0E through 5.1B DEC Alpha with Linux (Debian, Red Hat, SuSE) DEC Alpha with FreeBSD, NetBSD DEC PDP-11 with 2.4, 2.9, 2.10, and 2.11 BSD DEC VAX with 4.1BSD, 4.2BSD, 4.3BSD, 4.3BSD-Reno, 4.3BSD-Networking/2 DEC VAX with AT&T Bell Labs UNIX 7th Edition DEC VAX with AT&T Bell Labs Research UNIX 10th Edition DEC VAX with AT&T System V R3 DEC VAX with ULTRIX 1.0, 2.0, 3.0, and 4.x DECstation with Berkeley Sprite DECstation with MACH 2.6 DECstation with NetBSD DECstation with ULTRIX 4.2 through 4.5 Data General AViiON 88K with DG/UX 4.3 through 5.4R4.11 DIAB DS90 with DNIX 5.2 and 5.3 Dolphin Server Technology Triton 88/17 with Dolphin UNIX System V/88 R3.2 EAW P8000 with WEGA(GDR, 16-bit, 1987) Encore Multimax with UMAX 4.3 Encore 88K with UMAX V 5.2 Fedora Linux Fortune 32:16 with For:Pro 2.1 FPS 500 with FPX 4.1 FreeBSD Gentoo Linux Harris HCX-2900 Harris Night Hawk 68K and 88K with CX/UX HP-9000 with 4.4BSD HP-9000 with HP-UX 5.00 through 11.20 HP-9000 with Trusted HP-UX 10.xx and 11.xx HP-9000 PA-RISC with NeXTSTEP/Mach 3.3 HP-9000 PA-RISC with OPENSTEP/Mach 4.1 HP-9000 PA-RISC with Debian Linux 3.0 HP-9000 PA-RISC with FTX 3.x IA64 (Itanium) with HP-UX 11.20&emdash;11.23, Red Hat Linux, SuSE Linux IBM 370-series mainframes with AIX/370 1.2 IBM 370-series mainframes with AIX/ESA 2.1 IBM 390-series mainframes with Linux/S390 and SuSE Linux IBM PS/2 with AIX 1.0 - 1.2.1 IBM RS/6000 and Power Series with AIX 3.0 through 6.1 IBM RT PC with AIX 2.x, ACIS 4.x, AOS/4.3BSD-Reno ICL DRS400 and 400E with System V R3 ICL DRS3000 and DRS6000 with DRS/NX UNIX System V R4; Integrated Solutions VS8 with ISI 4.2BSD Intel 302 with Bell Tech System V/386 R3.2 Intergraph Clipper with CLIX 3.x Luxor ABC-9000 with DNIX MIPS Computer Systems with RISC/os UMIPS 4.52 MINIX MirBSD on i386 and Sparc Modcomp Realstar 1000 with Real/IX D.1 Motorola Four Phase Motorola VME Delta Series with System V/68 R3 Motorola VME Delta Series with System V/88 R32 and R40 Motorola 680x0 with Debian Linux Motorola 680x0 with NetBSD NCR Tower 1632 with System V R2 NCR Tower 32 with OS 1.x-2.x NCR System 3000 and MP-RAS with System V R4 NetBSD NeXT workstations with NeXTSTEP/Mach 1.0 through 3.3 NeXT workstations with OPENSTEP/Mach 4.1 and 4.2 Nixdorf Targon/31 M15 with TOS 4.0.13 Norsk Data Uniline 88/17 with System V/88 R3.2 OkiStation 7300 Series with System V R4 Olivetti CP 486 with UNIX System V R4 Olivetti LSX 3005 through 3045 with X/OS UNIX 2.3 through 3.0; Olivetti LSX 5020 with SCO UNIX 3.2.2 OpenBSD openSuse Linux PCs with 386BSD (Jolix) PCs with AT&T UNIX System V R3.2 PCs with BeOS 4.5 PCs with BSDI/386 1.0-4.1 PCs with Dell UNIX System V/386 R4.04 issue 2.2 PCs with DG/UX 5.40-5.4R4.20 PCs with ESIX System V R3 and R4 PCs with FreeBSD 1.0 through 7.2 PCs with Interactive Systems Corporation System III PC/IX PCs with Interactive Systems Corporation 386/ix 1.x and 2.x PCs with Interactive Systems Corporation System V/386 R3.2 V2.2-4.1.1 PCs with Linux (Debian, Red Hat, Slackware, Caldera, SuSE, Mandrake,
Turbo, VA, Centos, Gentoo, Fedora, Ubuntu, etc) PCs with Lynx/386 PCs with Mark Williams COHERENT/386 4.0 and 4.2 PCs with MINIX/386 and MINIX 3 1.5 PCs with Microport SV/AT System V R2 PCs with Microport 3.0U3 and SVR4.0 V2.2-4.1 PCs with MirBSD 10 PCs with Mt Xinu Mach386 PCs with NCR MP-RAS 2.03 and 3.02 PCs with NetBSD 1.0 through 5.0.1 PCs with Neutrino 2+ PCs with NeXTSTEP/486 PCs with OpenBSD 2.3 through 4.5 PCs with OPENSTEP/Mach 4.1 and 4.2 PCs with QNX 4.0 through 6.1 PCs with SCO ODT 1.1 through 3.0 PCs with SCO Open Server R5.0.0 through 6.0.0 PCs with SCO Open UNIX 8.0.0 and 8.0.1 PCs with SCO UNIX/386 3.2v4.0 and 4.2 PCs with SCO Xenix/286 2.3.3 PCs with SCO Xenix/386 2.2.x through 2.3.4 PCs with Sequent DYNIX/ptx 2.16-4.4.2 PCs with SINIX-L 5.41-5.42 PCs with Sun Solaris 1.0 through Solaris 10 PCs with Trusted Xenix PCs with UnixWare 1.0 through 7.3 PCs with Versyss System V R3 Perkin-Elmer 3200 series with AT&T Bell Labs UNIX V7 Perkin-Elmer 3200 series with AT&T System V R3 Perkin-Elmer 3200 series with Xelos R02 PFU Compact A Series SX/A TISP V10/E50 Plan 9 from Bell Labs on Intel, MIPS, SPARC, and 680x0 Prime EXL7000 or 8000 MIPS RISC/os 4.52 Pyramid MIS T Series with OSx 4.4 through 5.1a Pyramid MIS S and ES Series with DataCenter/OSx QNX Raspberry Pi Model B 256MB with Linux 3.6.11+ Red Hat Linux Sequent Balance or Symmetry with DYNIX 3.x and DYNIX/ptx 1.3, 1.4, and 4.0 Siemens Nixdorf RM x00 (MIPS) with SINIX 5.41-5.42 Siemens Nixdorf RM x00 (MIPS) with Reliant 5.43-5.44 Silicon Graphics IRIX 3.3 through 6.5.1 Sharp Zaurus SL-5500 Linux Slackware Linux Solbourne 5E/900 with OS/MP 4.1A Sony NEWS with NEWS-OS 4.x Sperry 5000 with UTS V and System V R3 Stardent 1520 UNIX System V R3 2.2 Stratus Continuum with FTX 2.x through 3.1 Sun computers with SunOS 3.2 through 4.1.4 Sun computers with Solaris 1.0 through Solaris 9 Sun SPARC with Linux (Debian, Red Hat, SuSE) Sun SPARC with NeXTSTEP/Mach 3.3 Sun SPARC with OPENSTEP/Mach 4.1, 4.2 Sun SPARC with Plan 9 from Bell Labs Tandy Model 6000 with XENIX 3.2 Tektronix 6130 with UTek OS Ubuntu Linux UNISYS 640 with CTIX SVR3.2 5.3 UNISYS S/4040 with CTIX SVR3.2 UNISYS U6000/65 MP with UNIX System V R4 The latest version of C-Kermit is not necessarily available for all of these
platforms, many of which are no longer available to us, butsource codeand
(in many cases)binariesare available for previous C-Kermit releases to cover
all the platforms listed above."
http://www.columbia.edu/~fdc/sample.html#chars,Do-It-Yourself Web Authoring - a beginner's HTML tutorial,"Frank da CruzUpdated in 2019 and 2021 for HTML5 and ""fluidity"". This page shows how to create Web pages by hand, the original way.  Although
today most Web pages are created by ""Web authoring systems"" that are
designed to shield you from technical details, the fact is that HTML
(the ""programming"" language of the Web) is not that difficult, as you can
see if you follow this tutorial.  To get an idea of what is possible with
this technique, see these 100% hand-made websites: The New Deal in New
York City 1933-1943 The History of
Computing at Columbia University 1890-2005 The Washington
DC Nation Mall in World War II Arlington,
Virginia, 1956-61: The Hall's Hill Segregation Wall Frankfurt,
Germany, 1959-61"
http://www.columbia.edu/~fdc/sample.html#chars,CONTENTS,"Creating a Web Page HTML Syntax Special Characters Converting Plain Text to HTML Effects Lists Links Tables Viewing your Web page Installing your Web Page on the Internet Where to go from here Postscript: Cell Phones You can create a Web page on your desktop computer but nobody can see it but
you.  If your want other people to be able to see your Web pages, you need
an account on a computer that has a Web server.  Nowadays most people have
their own computers on their desks, but normally they don't have Web servers
and anyway you don't want the whole world coming into your desktop computer
to see your web page because (a) it's not designed for that, and (b) who
knows what else they might see.  And (c) for security reasons, Web servers
should be managed by professionals.  Most institutions have big central
shared computers for this purpose, which usually have
aUnix-like operating
system such as Linux.  You need an account on one of these so you can put
your web pages there.  If you don't have access to such a computer, you can get
a low-cost account on a service likePanix.com. You can still create Web pages on your own computer and look at them with
your computer's Web browser, but for other people to see them, you have to
upload them to the ""big"" computer that has the Web browser.  The rest of
this document is about how to create your first Web page."
http://www.columbia.edu/~fdc/sample.html#chars,1. Creating a Web Page,"When you're just learning and want to experiment, you can do everything on
your PC.  Create a new directory (""folder"") for your website, and then put
the web-page files (HTML plus any pictures) in it.  Use NotePad or other
plain-text editor (not word processor) on your PC to create your ""home page"",
a file namedindex.html, which you can view locally with your Web
browser.  (You can also use a word processors such as Word or WordPad if you
save in ""plain text"", ""text"", ""text document"", or ""text document MS-DOS
format"".)LaterI'll explain how you can install your web site on
the Internet. Once you've made your ""home page"" (index.html) you can add more pages to
your site, and your home page can link to them."
http://www.columbia.edu/~fdc/sample.html#chars,2. HTML Syntax,"A Web page starts with a series of HTML commands, and ends with
a few more.  The contents go in between: (Contents go here) The first line (DOCTYPE) specifies which markup
language the page uses
(HTML= Hypertext Markup
Language); just copy this line.  The next
line,<html lang=""en"">, starts the page
and specifies
the (human) language it is written in (language codes are specifiedhere),
and is matched by the line</html>, which closes the
page.<head>starts the heading, which
contains a title to be displayed on the browser's title bar and a
declaration of the character set (nowadays it should always beUTF-8) and the ""viewport""
line which is a compulsory adaptation for cell phones, ""smart"" watches, etc.</head>closes the heading.  The head can also
contain other items such as style parameters that you can learn about later;
for example by asking Google (""HTML how do I change the font size?""). The<body>tag starts the body of the
document, is closed by</body>tag. As you can see, most HTML commands come in begin-end pairs:<b>...</b>,<head>...</head>, etc.  The closing part of the command
has a slash (/) between the<and the first letter of
the command. Blank lines and line breaks are ignored.  The browser automatically ""flows""
your text into lines and paragraphs that fit in its window.  Paragraphs must
be separated by<p>.  Line breaks can be
forced by<br>. Now you're ready to start adding ""content"" to your web page.  Go back to
NotePad and replace the title and ""(Contents go here)"" with whatever you
want.  Any time you want to see the result, useFile->Savein NotePad and then
click the Reload button on your browser. The next sections tell how to achieve different kinds of effects."
http://www.columbia.edu/~fdc/sample.html#chars,3. Special Characters,"(The table above is shown in the basic, default style of HTML.  Of course
there are many ways to customize the appearance of tables; more
about thisbelow. And remember: if you want to
include<,&,
or>literally in text to be displayed, you have
to write&lt;,&amp;,&gt;, respectively."
http://www.columbia.edu/~fdc/sample.html#chars,4. Converting Plain Text to HTML,"Change all occurrences of ""&"" to ""&amp;"". Change all occurrences of ""<"" to ""&lt;"". Change all occurrences of "">"" to ""&gt;"". Change any accented letters to HTML entity names (previous section)*. Put ""<p>"" between each paragraph. Insert the standard prolog at the top, substituting an appropriate title. Add</body>and</html>at the end. Save the result asxxx.html, wherexxxis the part of the original file's name
before the dot, or whatever-else-you-want-to-call-it.html. If you are aKermituser, you
can find a script to convert plain text to HTMLHERE. If the text contains lists, tables, or other structures, read on. If you have a Microsoft Word document you want to convert to HTML, and your
copy of Word does not allow the file to be ""Saved As"" HTML, then save it as
plain text and follow the same instructions.  In this case you lose the
""richness"" (bold, italics, font changes, etc) when you save the file, and
will have to put the effects back by hand (next section)."
http://www.columbia.edu/~fdc/sample.html#chars,5. Effects,"This sentence is bold.This sentence is
in italics.This sentence is in bold italics.This
sentence is in typewriter font.This sentence hasunderlined
wordsandunderlined bold words.Thissentencehascoloredwords.

This sentence hasbig
words.This one hasvery big words.  This one hasvery small words. Here we are back in the first blockquote again. And here we are back outside of the first blockquote."
http://www.columbia.edu/~fdc/sample.html#chars,6. Lists,"This is a List Item (<li>). This is another item. This is yet another item. This is a List Item (<li>). This is another item. This is yet another item. And here is a Description List (<dl>).
using Kermit commands as an example: You can have lists within lists: A gromet A widget A framus, which consists of the following components:A doohickey.A veeblefetzer -- these come in several colors:PurplePurplePurpleA whatchamacallit. A doohickey. A veeblefetzer -- these come in several colors:PurplePurplePurple Purple Purple Purple A whatchamacallit. A doodad. A doohickey. A veeblefetzer -- these come in several colors:PurplePurplePurple Purple Purple Purple A whatchamacallit. Purple Purple Purple And you can have ordered lists that use letters instead of numbers: Pennies Nickels Dimes Quarters"
http://www.columbia.edu/~fdc/sample.html#chars,7. Links,"Here is a link to theKermit
Project home page.  And here is what the HTML looks like: The part inside the quotes is called the URL (Uniform Resource Locator).
Here is a link toSection 6of the page you are
reading, and the HTML: Here is a link toSection 4.0of
another document, at another website;
theC-Kermit for Unix
Installation Instructions.  And the HTML: Here is a link to a picture:CLICK HEREto see it. If you want to link to a particular section of somebody else's Web
page, visit the page, ""view source"", search for the text at that spot
and see if there is an ""id="" clause; if so, use the ID as shown just above;
if not you're out of luck. If you want to link to a particular page of a PDF document, just put
""#page=123"" (replace by the desired number) at the end of the URL."
http://www.columbia.edu/~fdc/sample.html#chars,8. Tables,"Same table again but with borders: The appearance with double borders is the default (and therefore easiest)
table style.  You can
usetable
attributesto change the appearance. Here's the same table again but with Column C right-adjusted: And finally, here it again with some ""style"" parameters applied to 
get rid of the ugly double borders, which you can see in the<style>section of the<head>at the top of this page, if you ""view source"". So with just three lines added to the<style>section at the top of the page, you can make
all your tables look better."
http://www.columbia.edu/~fdc/sample.html#chars,9. Viewing Your Web Page,"Now you can work on your page's<body>: add more text,
add some images, add some links, add subheadings, some lists, some tables,
whatever you want.  Each time you make a change, reload the page in your
browser (usually done by clicking on the⟳symbol, or typing
Ctrl-R). By the way, a web page can have any name at all, it doesn't have to be
index.html.  Index.html is a special name that is used for the ""home page""
of a website.  To open a web page that has some other name, right-click on
the filename and then choose ""Open with...""; then click on your Web
browser's name."
http://www.columbia.edu/~fdc/sample.html#chars,10. Installing Your Web Page on the Internet,"If you create apublic_htmlsubdirectory of your
login directory, give it ""world"" read and search permission, and then create
anindex.htmlfile in that directory and give it world
read permission, you'll have a home page.  In this example
""$"" is the shell prompt (yours might be different),
and what you type is underlined.  CAUTION: the directory name
ispublic_htmlbut the underscore might be obscured
the underline in the examples below.  Whenenever typing
""public_html"" always include the underscore.
CAUTION#2: Some Web hosting sites might use different a different name for
the user's Web directory. You only have to do this part once.  Remember, it'spublic_htmlwith
an underscore, which tends not to show up when a command is underlined. Let's assume you have created a website in the Web folder on your PC.
Here's an example of how to upload your Web files to yourpublic_htmldirectory on Columbia University's
Cunix server using FTP (File Transfer Protocol).
First start the FTP program: and type ""ftp"" in the box.  An FTP window opens and an ""ftp>""
prompt appears.  Type the underlined commands at the ""ftp>""
prompt (substituting your own user ID, etc): If the ""site chmod"" command failed (this service is not supported by some
FTP servers), you have one more step.  Before others can see your web files,
you have to give them ""world read"" permission.  Again, log in to the server
using a terminal emulator (Telnet, SSH, Kermit, whatever), and: Now you have a home page.  If you were at Columbia and your login ID was
""olga"", the address (URL) of your home page would be: If you want to add pictures to your Web page, you can upload those too (also
with Kermit or FTP), and you also have to ""chmod 644"" all the files to make
them readable by everybody.  Every time you add new files to yourpublic_htmldirectory, you have to ""chmod 644"" them so they
are accessible, either in the FTP session itself (as shown previously), or
by logging in to the host and: Pictures should be in JPG or PNG or GIF format.  To include a picture
(""image"") in your page, include a sequence like this at the desired spot: Replacefilenameby the name of the file
(e.g.skyline.jpg).  Almost every HTML tag can be
customized by ""attributes"" in the begin tag.  For example if you want the
image to scale itself to the viewer's window (on a computer, cell phone,
or other device), and furthermore you want the text of the page to flow
around it, you can do: You can look up the attributes in Google, just search forhtml width,html float, etc. Now you have your own home page on the Web, and your own URL (Uniform
Resource Locator, or Web address).  In this example, the URL is: Of course, if you prefer, you can also do all the Web-page editing directly
on the server, using an a server-based text editor like EMACS or Vi
while logged in to the Unix shell.  In that case you don't need to upload
anything (except maybe photos), but then you also need to be more familiar
with the server's Unix environment and commands and utilities."
http://www.columbia.edu/~fdc/sample.html#chars,11. Where to go from here,"Anyway, if you have mastered the simple techniques shown in this page, you
know the basics.  Which is more than can be said of many ""web designers"" who
only know how to use prepackaged software to create web pages by picking
things from menus and moving things around with a mouse.  To go further,
you can almost always find out how to do what you want by searching
Google (""html how do I ...?""), or looking at the HTML code of different
websites (browser ""view source"" command) but, again, only for pages
that look like this one. Of course HTML is a standard, and here are the official references: TheHTML
5.2 specification(2017). Cascading
Style Sheets(yet another ""standard"" layered on top of HTML, which, like
HTML goes through many versions, each one making the previous one obsolete). If you have made mistakes it will let you know, and if you have used ""old""
or ""deprecated"" HTML features it will let you know that too, and usually also
suggest a modern replacement."
http://www.columbia.edu/~fdc/sample.html#chars,12. Postscript: Cell Phones,"as has been done in several places above, in which case a horizontal
scroll bar will appear automatically if the non-wrapping text is wider than
the viewport.  If you are viewing this page on a wide screen, you can
see this effect if you squeeze your browser horizontally to its minimum
width and then scroll through this page. (End) Frank da CruzPage created:1992Last update:17 September 2021[validate]"
http://www.columbia.edu/~fdc/family/hallshill.html,"Arlington, Virginia, 1956-61:
 Hall's Hill","This is not a chapter of myfamily historybut asectionof theArlington chapterextracted for reference as a special topic.Also see the accompanyinggallery of highly
detailed 1943 plat mapsof the area.Most recent update:1 September 2023 14:11:54 Book: Wilma Jones,My
 Halls Hill Family: More Than a Neighborhood, self-published (2018). Article: Sophie
  B. Vogel,The

Integration of Reed Elementary School,Arlington Historical
Magazine, Vol.11 No.1, October 1997, pp. 32-41, accessed at the
Arlington Historical Society website 15 January 2021.  This is a PDF file
that starts with a 1963-64 map that, on the mid-to-lower extreme right,
shows bits of Hall's Hill where thedead-ending
of the streets is clearly visible.  It notes that in 1925 the John
Langston School at 4864 Lee Highway was established to provide separate but
equal education for the children living on either side of Lee Highway.  It
also says that additions were added in 1953, 59, and 64.  It also notes that
the process of integration of Arlington schools began on February 2, 1959,
when four Afro-American students were enrolled at Stratford Junior High by
Court order.  Four years later, in 1963-64 [the year after I graduated from
nearby all-white Yorktown High School], all secondary schools in the county
were integrated.  No action was taken to desegregate at the elementary level
until 1966 — twelve years after Brown-vs-Board-of-Ed; I came back to
Yorktown that year, after the Army, to pick up a transcript and found an
integrated school. PhD Dissertation: Nancy Perry,The
Influence of Geography on the Lives of African American Residents of
Arlington County, Virginia, During Segregation(PDF), George Mason
University (2013). PhD Dissertation: Lindsey
Bestebreurtje,Built
by the People Themselves – African American Community Developments in
Arlington, Virginia, from the Civil War through Civil Rights(PDF), George
Mason University (2017): pp.63-75 (history); 208-209 (about the Wall);
213-214 (street lights); 223-224 (KKK); 289-29 (overcrowding); 319-349,
373-377 (schools and integration); 351-353 (infrastructure improvements);
377-393 (gentrification). Book:Plat Book of Arlington County,
Virginia, Franklin Survey Company, 2006 Chestnut Street, Philadelphia PA
(1943). Article:Hall's Hill Area Due for Renewal,Northern Virginia Sun, 23 February 1965: ""...Negro community of 1650
persons, 322 houses, three churches, and a school...  The community is cut
off from Glebe Road by dead-end streets and from any entry on the south side
by four blocks of solid fences and walls running along North 17th Street.""
(Thanks to Cassandra Ellison of the VCU Center on Society and Health for
sending me the article as a PDF.) Article: Janet Wamsley,The
    K.K.K. in Arlington in the 1920s, Arlington Historical Society,Arlington Historical
Magazine, Vol.10 No.1, October 1993, pp.55-59. Masters Thesis: James Lamb,The
Ku Klux Klan in early twentieth Century Virginia, James Madison
  University, Summer 2018. Article: ""Fiery Cross Set Up in
Arlington"",The Washington Post and Times Herald, 23 June 1958, p.B2: ""A burning
cross was found yesterday in a cemetery adjoining a Negro church in the 5000
block of Lee Highway, Arlington County Police reported ... made with 7- and
5-foot building timbers ... Reported by the Rev. John F. Monroe of the
Calloway Methodist Church.""  Thanks to Jessica Kaplan of AHS for this, who
also said ""Saundra Green, a long time resident and historian of the area,
had one burned on her front lawn during this period as well."" Report:A Guide to
the African American Heritage of Arlington County Virginia,
Department of Community Planning, Housing and Development Historic
Preservation Program, Second Edition (2016).  Covers Hall's Hill on
pages 12-22 and the Peoples Drug Store lunch counter sit-in on p.57. Article: Mark Jones,Sit-ins Come to Arlington,Boundary Stones(WETA history site),
22 June 2014.  The first photo shows Gwendolyn Greene at the counter of
the Peoples Drug at Lee Highway and Old Dominion Drive, which is about
500 feet from Hall's Hill.  The Cherrydale Drug Fair was about a mile
to the east on Lee Highway. Article: Lindsey Bestebreurtje,A View from Hall's Hill: African
American Community Development in Arlington, Virginia from the Civil
War to the Turn of the CenturyArlington Historical Magazine, Vol.15 No.3 (2015), pp.19-34:
""(the) wall construction was executed on an individual home-owner level,
however, it was planned out enough that by the early 1940sthe entirety of
Hall's Hill was quartered off... the wall meant that the community could
not expand..."" Article: Nellie C. Stewart,History of
 Langston School(origin unknown, written some time after 1960;
 Wilma Jones found it among her mother's papers)
 [audio] A
 Guide to the Bayard D. Evans Collection, Fairfax County Public Library. Obituary:Bayard
 Evans, Restaurateur,Washington Post, September 8, 1980:
""Its furnishings included a much-admired array of historical memorabilia,
 including weapons, portraits and tools that predated the Revolution, as
 well as a collection of items that related to Robert E. Lee."" There are examples of segregation walls that do not totally enclose the
Black enclave; for example, the wall erected in Detroit when a new white
subdivision was constructed on empty land next to an existing Black
community, theThe
Detroit Eight Mile Wall(Wikipedia, accessed 26 January 2021).
Another example is
  theLiberty
    City wall in Miami. Book: Arlington Historical Society,Arlington,
Images of America series, Arcadia Publishing (2000).  Has a few photographs
of and words about Hall's Hill."
http://www.columbia.edu/~fdc/index.html,The Kermit Project,"I was laid off from Columbia U in 2011.
My last day was June 30th, 2011, and then I spent the
next 3 months cleaning up: Disposing of mybooks, manuals, and other historical items, a surprisingly
big job.  The list alone was a big job...
The historical records of the Kermit Project are now at theComputer History Museum, along
with some artifacts. Releasing open-source versions ofC-Kermit,E-Kermit, andKermit 95. Cataloging theKermit
software archive."
http://www.columbia.edu/~fdc/index.html,Columbia University Computing History,
http://www.columbia.edu/~fdc/index.html,Other Computing Topics,
http://www.columbia.edu/~fdc/index.html,New York City,
http://www.columbia.edu/~fdc/index.html,"Countries, Languages, Character Sets",
http://www.columbia.edu/~fdc/index.html,Germany,
http://www.columbia.edu/~fdc/index.html,Politics,
http://www.columbia.edu/~fdc/index.html,Virginia,
http://www.columbia.edu/~fdc/index.html,Family history,
http://www.columbia.edu/~fdc/index.html,Books,"Kermit,
 A File Transfer Protocol, Digital Press (1987), 379pp; with
 Foreword by Donald Knuth.  In print for 14 years.  A Russian edition by the
 USSR Academy of Sciences was in preparation when the Soviet Union collapsed
 and was therefore never published
 (see sample
 chapter). ""Using C-Kermit"" (with C. Gianone), Digital Press (1992, first edition),
514pp. Using
C-Kermit(with C. Gianone), 2nd Ed, Digital Press (1997),
622pp. C-Kermit: Einführung und Referenz, Verlag
Heinz Heise, Hannover (1997).  With Christine
M. Gianone, German translation by Gisbert W. Selke. Kermit 95(with C. Gianone), Manning Publications (1996), 88pp.
  Reissued periodically until 2003 in updated 
electronic editions."
http://www.columbia.edu/~fdc/index.html,"Other publications(and
 semi-publications)","What's The Difference?, with Charles Harris, Reading is
Fundamental (1970). Countless articles in the Columbia University Computer Center
Newsletter (which changed its name about 100 times over the years)
and other Computer Center publications, 1975-2003. DECSYSTEM-20
    Assembly Language Guide(with Chris Ryland), July 1980 (unfinished). Numerous articles inKermit News, the journal of the Kermit Project, 1986-93. Kermit, A
      Simple File Transfer Protocol for Microcomputers and Mainframes(with Bill Catchings), BYTE Magazine, June and July 1984. A series of articles about digital PBXs in McGraw-HillData
  Communicationsmagazine (with C. Gianone), 1987-88. “Circumnavigating the Web with MS-DOS Kermit”,On The Internet, Internet Society, Vol.1 No.2 (May/June 1995),
pp.48-52. ""Columbia 1968"", Columbia Librarian, V.XXVII, 1-2, Fall-Winter 1999,
  and on the Web (in much-expanded form) athttp://columbia.edu/cu/computinghistory/1968.html. Forewords and Prefaces in various data communication and networking books,
  e.g. Quarterman'sThe
  Matrix, and listed in the acknowledgements of many 
  others, e.g. McNamara'sTechnical
      Aspects of Data CommunicationsandThe
  Unicode Standard Version 3.0, The Unicode Consortium, Addison-Wesley
(2000). Supplemental Terminal Graphics for Unicode, UTC Document L2/00-159 / ISO
  WG2 Document N2265, 31 March 2000: 18 characters added
  in Unicode 3.2 and ISO/IEC ISO 10646-1:2000/Amd.1. Internet RFC 2839 (with J. Altman), May 2000. Internet RFC 2840 (with J. Altman), May 2000. Aphoto
credit in Fortune Magazine(Jaquard loom), China edition, August 2001. ""Columbia University Computing History"",IEEE Annals of the History of
  Computing, V24#2, April-June 2002 (Abstract) and on the Web athttp://columbia.edu/cu/computinghistory/ Credits
  inStand
  Columbia, Columbia University Press (2003), a history of Columbia
  University by Robert McCaughey, for contributions on computing and the
  1968 student uprising. A photo credit in the bookJohn
 Lennon: All I Want Is the Truthby Elizabeth Partridge (2005)
(forthis photo). Picturedon front page ofComputerWorld, July 4, 2005,
(mis)quoted inaccompanying
article""Love
that Legacy"" by Gary Anthes). Feature article inFrankfurter Neue Presse, 22 July 2006:
  ""Warum Frank aus N.Y. nicht von Frankfurt lassen kann"" by Inga Schulze Photo credit in the bookAmerican Military Communities in West Germanyby John
W. Lemza, McFarland and Company (2006), p.42. A photo credit in the bookBerlin
Mitte und die Welt – wie sie einmal war 1914-1989,
P.J. Ortmann (self-published 2009). Photo credit, front page,Norwood
    News, December 10-23, 2015. “The
History of the World in One Mural”,Living New Deal, University of
California at Berkeley, August 28, 2015. “Discovering New Deal
New York”, Fall 2015 Newsletter,Living New Deal, University of
California at Berkeley. “Fifty Years Ago”,The Veteran,Vietnam Veterans Against the War,
 Vol.46, No.1, Spring 2016. New Deal
      New York— fold-out map of New Deal sites in New 
York City,The Living New Deal,
University of California at Berkeley (2017), with Richard Walker, Evan
Kalish, Shaina Potts, Linda Herman, Molly Roy, and Susan Ives (Evan and I
supplied most of the data).  Also available as a poster. “Acknowledge
    Oval Park's Milestone”,Norwood News,
 Vol.30, No.13, June 22 - July 5, 2017 [HTML] 
[PDF] 
[Original].
    This article resulted in the
    Park's80th
    Annniversary celebrationon September 9, 2017, and the first public
    recognition by the Parks Department of the WPA's role in creating the park. Photo credits: Brechin, Gray,
  “Playing
  Through: Recreation and the New Deal”,Summer
  2017 Newsletter,Living New Deal, University of
California at Berkeley. New
Deal Art Experts Say Painting Over Mural Was Vandalism, Associated Press
article in theNew York Times, 16 June 2018, relating to the New Deal
mural at DeWitt Clinton High School in the Bronx that had been partially
painted over, result of a half-hour AP interview with me
(among other interviews), plus photo credits.  Also atNBC
  News,ABC News,
theWashington Post,
the LondonDaily
  Mail,
theChicago Tribune,LA Times, and several thousand other sites. A
historic decades-old mural was painted over at a New York high school
during a repair project, CNN, based on a June 18, 2018, interview. De
 Witt Clinton HS painters destroy major art piece,Bronx Times, 24 June 2018, by Alex Mitchell, based on interviews with
Gray Brechin and me (unfortunately, it says ""PWA"" everywhere it should say
""WPA""). The main thread of the early part of
 myColumbia University
Computing Historyforms the basis for the bulk of an article,
""Physicists and
the first computing revolution"" by Iulia Georgescu, published inNature Reviews Physics, 21 July 2023."
http://www.columbia.edu/~fdc/index.html,Recipes,http://columbia.edu/~fdc/recipes/
http://www.columbia.edu/~fdc/index.html,Miscellaneous,
http://validator.w3.org/,Markup Validation Service,"Check the markup (HTML, XHTML, …) of Web documents Validate byURI Validate byFile Upload Validate byDirect Input Validate a document online: Address: Check Upload a document for validation: File: Check Note: file upload may not work with Internet
                Explorer on some versions of Windows XP Service Pack 2, see ourinformation pageon the W3C QA Website. Enter the Markup to validate: Check This validator checks themarkup validityof Web documents in HTML, XHTML, SMIL, MathML, etc.
        If you wish to validate specific content such asRSS/Atom feedsorCSS stylesheets,MobileOK content,
        or tofind broken links, 
 there areother validators and toolsavailable.
 		As an alternative you can also try ournon-DTD-based validator. Interested in “developing” your developer skills? In W3Cx’s hands-on Professional Certificate Program, learn how to code the right way by creating Web sites and apps that use the latest Web standards.Find out more!Donateand help us build better tools for a better web. Home| About...| News| Docs| Help &FAQ| Feedback| Contribute| Copyright © 2024World Wide Web Consortium.W3C®liability,trademarkandpermissive licenserules apply."
http://validator.w3.org/,Meta Description,"W3C's easy-to-use
      markup validation service, based on SGML and XML parsers."
http://validator.w3.org/,Meta Keywords,"HTML, HyperText Markup Language, Validation,
      W3C Markup Validation Service"
http://kermitproject.org/ckuins.html,C-Kermit 9.0 Installation Instructions and Options for Unix,"Frank da CruzThe Kermit Project As of C-Kermit version:9.0.302, 20 August 2011This file last updated:Wed Sep 28 16:03:37 2011
(New York City time) IF YOU ARE READING A PLAIN-TEXT version of this document, it is a plain-text
copy of a Web page.  You can visit the original (and possibly more
up-to-date) Web page here:"
http://kermitproject.org/ckuins.html,CONTENTS,INTERNET QUICK START INSTALLING FROM PACKAGES INSTALLING PREBUILT BINARIES BUILDING FROM SOURCE CODE INSTALLING THE KERMIT FILES INSTALLING UNIX C-KERMIT FROM DOS-FORMAT DISKETTES CHECKING THE RESULTS REDUCING THE SIZE OF THE EXECUTABLE PROGRAM IMAGE UNIX VERSIONS DIALING OUT AND COORDINATING WITH UUCP RUNNING UNIX C-KERMIT SETUID OR SETGID CONFIGURING UNIX WORKSTATIONS BIZARRE BEHAVIOR AT RUNTIME CRASHES AND CORE DUMPS SYSLOGGING BUILDING SECURE VERSIONS OF C-KERMIT 9.0 INSTALLING C-KERMIT AS AN SSH SERVER SUBSYSTEM
http://kermitproject.org/ckuins.html,OVERVIEW,"This file contains Unix-specific information.  A lot of it.  Unlike most
other packages, C-Kermit tries very hard to be portable to every Unix variety
(and every release of each one) known to exist, including many that are quite
old, as well as to other platforms like VMS, AOS/VS, VOS, OS-9, the BeBox,
the Amiga, etc. Since C-Kermit gets so deeply into the file system, i/o system, and other
areas that differ radically from one Unix platform to the next, this means
that a lot can go wrong when you try to install C-Kermit on (for example) a
new release of a particular variety of Unix, in which certain things might
have changed that C-Kermit depended upon. This file concentrates on installation.  For a description of general
configuration options for C-Kermit, please read theConfigurations Optionsdocument.  For troubleshooting
after installation, see theGeneral Hints and TipsandUnix-Specific Hints and Tipsdocuments.  The
latter, in particular, contains lots of information on lots of specific Unix
platforms.  If you want to work on the source code, see theC-Kermit Program Logic Manual You may install C-Kermit: From an ""install package"", if one is available. As aprebuilt binary,
if available, plus accompanying text files. By building fromsource code."
http://kermitproject.org/ckuins.html,1. INTERNET QUICK START,"If your Unix computer is on the Internet and it has a C compiler,
here's how to download, build, and install C-Kermit directly from the
""tarballs"" or Zip archives: Make a fresh directory and cd to it. Download the C-Kermit source code:ftp://ftp.kermitproject.org/kermit/archives/cku302.tar.Z(compress format) orftp://ftp.kermitproject.org/kermit/archives/cku302.tar.gz(gunzip format).  If those links don't work, FTP transfers are being
blocked;
try these HTTP links instead:http://www.kermitproject.org/archives/cku302.tar.Z(compress format) orhttp://www.kermitproject.org/archives/cku302.tar.gz(gunzip format). Uncompress the compressed tar file with ""uncompress"" or
""gunzip"", according to which type of compressed file you downloaded.
(If you don't understand this, you could download a (much larger) uncompressed
tar archive directly:ftp://ftp.kermitproject.org/kermit/archives/cku302.tarorhttp://www.kermitproject.org/archives/cku302.tar Now type ""tarxvfcku302.tar"" to unpack the
individual files from the tar archive. Type ""rmcku302.tar"" to get rid of the tar archive,
which is no longer needed. Read the comments at the top of the makefile to find out which target to
use and then type the appropriate ""make"" command,
such as ""makelinux"", ""makesolaris8"", etc. This produces a binary in your current directory called ""wermit"".  Start
it by typing ""./wermit"" andtry it outto make sure
it works.  Then readSection 5for how to install it, or
simply copy the wermit binary to the desired public directory, rename it to
kermit, and give it the needed permissions (and, if it is going to be used to
dial out, give it the same group and owner and permissions as the cu, tip,
or minicom program). For secure installations, seeSections 5and16."
http://kermitproject.org/ckuins.html,2. INSTALLING FROM PACKAGES,"Various Unix varieties -- Linux, Solaris, AIX, etc -- now incorporate the
idea of ""install packages"", and many users expect to find all new applications
in this format.  A selection of install packages might be available for any
given release of C-Kermit, but there is a tradeoff between convenience and
safety.  Unix presents several notable problems to the builder of install
packages: Since C-Kermit is portable to many non-Unix platforms (VMS,
VOS, AOS/VS, etc), some of the files in the C-Kermit distribution do not fit
into the Unix application model.  In particular, C-Kermit includes some plain
text files (described inSection 5) and Unix has no standard
place to put such files.  Typical Unix package managers do not allow for them.
Where should they go, and how will the user know where to find them? Installation of any program that will be used to make modem calls requires
some important decisions from the installer regarding security and
privilege. Item(b)is discussed at length inSections 10and11of this document, but the package-related aspects are also
given here.  The basic problem is that Unix dialout devices and the UUCP ""lock
files"" that regulate contention for them (described inSection
10) are usually protected against ""world"".  Therefore, the install
procedure must either run as root in order to give the Kermit binary the
required permissions, group, and/or owner, or else the dialout devices and
associated directories must be open for group or world reading and writing.
Otherwise, the Kermit program just installed WILL NOT WORK for dialing out. Thus, a well-crafted installation procedure should present the options and
allow the installer to choose the method, if any, for regulating access to
the dialout devices: Check the permissions of the lockfile directory and the dialout devices.
If they do not allow group or world R/W access, then: ""Your UUCP lockfile directory and/or dialout devices require privilege
to access.  You must either change their permissions or install Kermit
with privileges."" ""If you wish to install Kermit with privileges, it will be given the
same owner, group, and permissions as the cu program so it can use the
dialout devices.""  (This is increasingly problematic as some newer Unix
systems like Mac OS X don't have a cu program, or even a serial port!) If they choose(c)but the user is not root, give a message that the
install procedure can be run only by root and then quit. It should go without saying, of course, that any binaries that are to be
included in an install package should be built fresh on the exact platform
(e.g. Red Hat 8.0 on Intel) for which the package is targeted; prebuilt
binaries (next section) from other sites are likely to have
library mismatches.CLICK HEREfor more about
building C-Kermit install packages. The Kermit Project does not have the resources or the expertise to make
install packages for every platform.  Most install packages, therefore, are
contributed by others, and they do not necessarily follow the guidelines given
above.  Pay attention to what they do. If you are an end user who has obtained a C-Kermit install package for a
particular platform, you should be aware that some additional steps might
needed if you want to use Kermit to dial out.  ReadSection
10for details."
http://kermitproject.org/ckuins.html,3. INSTALLING PREBUILT BINARIES,"Hundreds of prebuilt C-Kermit binaries are available on the CDROM in the
BINARY tree [NOTE: The C-Kermit CDROM is still for version 8.0], and at the
historical Kermit ftp site in thekermit/binarea (with names starting with ""ck""), also accessible on theColumbia University
Kermit website.  To install a prebuilt binary: Rename the binary to ""wermit"". Make sure it works; some tests are suggested inSection
7. Follow steps(b)through(e)inSection
4. Install related files as described inSection 5. But first...Please heed the following cautions: If you pick the wrong binary, it won't work (or worse). Even when you pick the appropriate binary, it still might not work due
to shared-library mismatches, etc. (seeSection 4.0). Don't expect a binary built on or for versionnof your OS to
work on versionn-x(wherex>0).  However, it is supposed to be safe to
run a binary built on (or for) an older OS release on a newer one (but isincreasingly less soas time-honored
principles of stability and backwards compatibility go fading into
obscurity). Therefore, it isalwaysbetter to build your own binary from source
code (next section) if you can.  But since it is
increasingly common for Unix systems (not to mention VMS and other OS's) to
be delivered without C compilers, it is sometimes not possible.  In such cases,
try the most appropriate prebuilt binary or binaries, and if none of them
work,contact usand we'll see what
we can do to help."
http://kermitproject.org/ckuins.html,4. BUILDING FROM SOURCE CODE,"Also see:Section 8andSection 9. C-Kermit is designed to be built and used on as many platforms as possible:
Unix and non-Unix, old and new (and ancient), ANSI C and K&R.  The Unix
version does not use or depend on any external tools for building except the
""make"" utility, the C compiler, the linker, and the shell.  It does not use
any external automated configuration tools such as configure, autoconf,
automake, libtool, etc.  Everything in C-Kermit has been built by hand based
on direct experience or reports or contributions from users of each
platform. TheC-Kermit
makefilecontains the rules for building the program for each of
the hundreds of different kinds of Unix systems that C-Kermit attempts to
support.  It covers all Unix variations since about 1980 -- pretty much
everything after Unix V6.  Separate makefiles are used forPlan 9and2.x BSD. Prerequisites: The C compiler, linker, and make program must be installed. The C libraries and header files must be installed (*). The C-Kermit source code and makefile in your current directory. The C-Kermit text files (Section 5) in your current
directory. This is becoming problematic in this new age of ""selective installs""
e.g. of Linux packages.  C-Kermit builds will often fail because replying
""no"" to some obscure Linux installation option will result in missing
libraries or header files.  Ditto on platforms like AIX and Solaris that
don't come with C compilers, and then later have gcc installed, but are
still missing crucial libraries, like libm (math). Plus: For TCP/IP networking support, the sockets library and related header
files must be installed. The math library for floating-point arithmetic support (can be deselected
by adding-DNOFLOATto CFLAGS and removing-lmfrom LIBS). Many and varied security libraries for building a secure version 
(Kerberos, SSL/TLS, SRP, Zlib,...)  These are required only if you select
a secure target. For the curses-based fullscreen file-transfer display, the curses or
ncurses header file(s) and library, and probably also the termcap and/or
termlib library.  Note that the names and locations of these files and
libraries are likely to change capriciously with every new release of your
Unix product.  If you discover that the C-Kermit build procedure fails
because your curses and/or termxxx headers or libraries are not named or
located as expected, pleaselet us know.
In the meantime, work around by installing symlinks. IMPORTANT: Modern Linux distributions might give you the choice during
installation of whether to install the ""ncurses development package""
(perhaps called ""ncurses-devel"").  If you did not install it, you won't
be able to build C-Kermit with curses support included.  In this case,
either go back and install ncurses, or else choose (or create) a
non-curses makefile target for your platform.  To install the ncurses
developers tools in Red Hat Linux, do ""apt-get install ncurses-developer""
or if you have the CD:mount redhat cdrom
goto RedHat/RPMS
rpm -ivh ncurses-devel*.rpm
or to have the exact name ls ncurse* and load as
rpm -ivh filename
then leave the cdrom and unmount it. In AIX you might have to go back and install any or all of:bos.adt.base
bos.adt.include
bos.adt.lib 
bos.adt.libm
bos.adt.utilsfrom the first installation CD. from the first installation CD. Depending on where you got it, the makefile might need to be renamed fromckuker.maktomakefile.Directions: Type ""make xxx"" where xxx is the name of the makefile target most
appropriate to your platform, e.g. ""make linux"", ""make aix43"", etc.  Read
thecomments at the
top of the makefilefor a complete list of available targets (it's a long
list). Test the resulting 'wermit' file (seeSection 7for
suggestions).  If it's OK, proceed; otherwisenotify us.NOTE: steps(c)through (e) can be accomplished using themakefile'install' target as described inSection 5.4. Rename the 'wermit' file to 'kermit', copy it to the desired binary
directory (such as/usr/local/binor/opt/something),
and if it is to be used for dialing out, give it the same owner, group, and
permissions as the 'cu' program (IMPORTANT: readSections
10and11for details). Install the man page,ckuker.nr, with your other man pages. Install the accompanying text files (seeSection 5). If you want C-Kermit to also offer a Telnet command-line personality,
make a symbolic link as follows:cddirectory-where-kermit-binary-isln -s kermit telnetIf you want C-Kermit to be the default Telnet client, make sure the directory
in which you created the symlink is in the PATH ahead of the where the regular
Telnet client is. If you want C-Kermit to also offer an FTP command-line personality, make
a symlink called ""ftp"" as in (f). If you want C-Kermit to also offer an FTTP command-line personality, make
a symlink called ""http"" as in (f). If you want to offer an Internet Kermit Service, follow the directions
in theIKSD Administrator's Guide. If you want C-Kermit to be the default Telnet client, make sure the directory
in which you created the symlink is in the PATH ahead of the where the regular
Telnet client is."
http://kermitproject.org/ckuins.html,4.0. Special Considerations for C-Kermit 8.0-9.0,"Also see:C-Kermit Configuration Options SECTION CONTENTS (Also see theConfigurations Optionsdocument,Section 8). Lots of new features have been added in versions 7.0 and 8.0 that require
access to new symbols, APIs, libraries, etc, and this will no doubt cause
problems in compiling, linking, or execution on platforms where 6.0 and
earlier built without incident.  This section contains what we know as of the
date of this file. The first category concerns the new Kermit Service Daemon (IKSD; see theIKSD Administrator's Guidefor details): These days most Unix systems take advantage of shadow password files 
or Pluggable Authentication Modules (PAM).  If your system uses shadow
passwords you must add-DCK_SHADOWto the CFLAGS list.  If your
system requires PAM you must add-DCK_PAMto the CFLAGS and-lpam -ldlto LIBS. If you encounter difficulties with any of the above, and you are not
interested in running C-Kermit as an IKSD, then simply add NOIKSD to CFLAGS
and rebuild.  Example: Some non-IKSD things to watch out for: (whereblahis int, long, or whatever).
If the complaint is ""Attempt to return a value from a function of type void""
then add-DMAINISVOID: getcwd(): Add-DDCLGETCWDto CFLAGS and rebuild. popen(): Add-DDCLPOPENto CFLAGS and rebuild. fdopen(): Add-DDCLFDOPENto CFLAGS and rebuild. are due to failure to include the appropriatetime.hheader files.
Unix platforms generally have one or more of the following:<time.h>,<sys/time.h>, and<sys/timeb.h>.  Any combination of these might be required.
Defaults are set up for each makefile target.  The defaults can be corrected
on the CC command line by adding the appropriate definition from the following
list to CFLAGS: Note that<sys/timeb.h>is relatively scarce in the System V
and POSIX environments; the only platform of recent vintage where it was/is
used is OSF/1 and its derivatives (Digital Unix and Tru64 Unix). Until the warnings go away, except maybe ""ck_outc: return with a value in
a function returning void"", and in that case also add-DTPUTSISVOID. Other difficulties are generally of the ""where iscurses.hand what
is it called this week?"" variety (most easily solved by making symlinks in the
include and lib directories), or overzealous complaints regarding type
mismatches in function calls because of the totally needless and silly signed
versus unsigned char conflict (*), etc.  In any case, please send any
compilation or linking warnings or errors to the author, preferably along with
fixes. C-Kermit does not use the signed property of chars at all anywhere,
ever.  So if all chars and char *'s can be made unsigned at compile
time, as they can in gcc with ""-funsigned-char"", they should be. IMPORTANT: If you find any of these hints necessary for a particular make
target (or you hit upon others not listed here), PLEASE SEND A REPORT TO:"
http://kermitproject.org/ckuins.html,4.1. The Unix Makefile,"If your distribution does not contain a file with the name ""makefile"" or
""Makefile"", then rename the file calledckuker.maktomakefile: Then type ""makexxx"", wherexxxis the platform you want to build
C-Kermit for.  These are listed in thecomments at the
top of the makefile. 
For example, to build C-Kermit for Linux, type: Here are some typical examples: The makefile is quite long, and at least two versions of Unix, SCO Xenix/286
and 2.x BSD, cannot cope with its length.  An attempt to ""make sco286"" gives
the message ""Make: Cannot alloc mem for env..  Stop"".  Solution: edit away
some or all of the nonrelevant material from the makefile.  (A separate
version of the makefile is provided for BSD 2.x:ckubs2.makbut
C-Kermit 8.0 can't be built for BSD 2.x -- it has simply grown too large.) Some make programs reportedly cannot handle continued lines (lines ending
in backslash (\)).  If you have a problem with the makefile, try editing the
makefile to join the continued lines (remove the backslashes and the following
linefeed). Other makefile troubles may occur because tabs in the makefile have somehow
been converted to spaces.  Spaces and tabs are distinct in Unix makefiles. Similarly, carriage returns might have been added to the end of each line,
which also proves confusing to most Unix versions of make. Check to see if there are comments about your particular version in its
makefile target itself.  In a text editor such as EMACS or VI, search for the
make entry name followed by a colon, e.g. ""linux:"" (if you really are building
C-Kermit for Linux, do this now). Check to see if there are comments about your particular version in theckubwr.txtfile (CLICK HEREfor the Web version). If you have trouble with buildingckwart.c, or running the resulting wart
preprocessor program onckcpro.w: Just ""touch"" theckcpro.cfile that comes in the distribution and then give the ""make"" command again, or: Compileckwart.c""by hand"":cc -o wart ckwart.c, or: Try various other tricks.  E.g. one Linux user reported that that adding
the ""static"" switch to the rule for building wart fixed everything:wart: ckwart.$(EXT)
        $(CC) -static -o wart ckwart.$(EXT) $(LIBS) If your compiler supports a compile-time option to treat ALL chars (and
char *'s, etc) as unsigned, by all means use it -- and send me email to let
me know what it is (I already know about gcc-funsigned-char). To add compilation options (which are explained later in this document) to
your makefile target without editing the makefile, include ""KFLAGS=..."" on the
make command line, for example: Multiple options must be separated by spaces.  Quotes are necessary if the
KFLAGS= clause includes spaces.  The KFLAGS are added to the end of the CFLAGS
that are defined in the selected makefile target.  For example, the ""bsd"" entry
includes-DBSD4-DTCPSOCKET, so the second example above
compiles Kermit with the following options: (Notice how ""-UTCPSOCKET"" is used to negate the effect of the
""-DTCPSOCKET"" option that is included in the makefile target.) WARNING: Be careful with KFLAGS.  If you build C-Kermit, change some files,
and then run make again using the same make entry but specifying different
KFLAGS than last time, make won't detect it and you could easily wind up with
inconsistent object modules, e.g. some of them built with a certain option,
others not.  When in doubt, ""make clean"" first to make sure all your object
files are consistent.  Similarly, if you change CFLAGS, LIBS, or any other
items in the makefile, or you rebuild using a different makefile target, ""make
clean"" first. If you create a new makefile target, use static linking if possible.  Even
though this makes your C-Kermit binary bigger, the resulting binary will be
more portable.  Dynamically linked binaries tend to run only on the exact
configuration and version where they were built; on others, invocation tends
to fail with a message like:"
http://kermitproject.org/ckuins.html,4.2. The C-Kermit Initialization File,(This section is obsolete.)ReadSection 5about the initialization file.
http://kermitproject.org/ckuins.html,4.3. The 2.x BSD Makefile,
http://kermitproject.org/ckuins.html,4.4. The Plan 9 Makefile,"Use the separate makefileckpker.mk.
 
NOTE: The Plan 9 version of C-Kermit 8.0 has not yet been built.  There should
be no impediment to building it.  However, even when built successfully,
certain key features are missing, notably TCP/IP networking."
http://kermitproject.org/ckuins.html,4.5. Makefile Failures,"First, be sure the source files are stored on your current disk and directory
with the right names (in lowercase).  Second, make sure that the makefile
itself does not contain any lines with leading spaces: indented lines must all
start with horizontal TAB, and no spaces. Then make sure that your Unix PATH is defined to find the appropriate compiler
for your makefile target.  For example, on SunOS systems, ""make sunos41""
builds C-Kermit for the BSD environment, and assumes that/usr/ucb/ccwill be used for compilation and linking.  If your PATH has/usr/5binahead of/usr/ucb, you can have problems at compile or link time (a
commonly reported symptom is the inability to find ""ftime"" during linking).
Fix such problems by redefining your Unix PATH, or by specifying the
appropriate ""cc"" in CC= and CC2= statements in your makefile target. During edits 166-167, considerable effort went into making C-Kermit compilable
by ANSI C compilers.  This includes prototyping all of C-Kermit's functions,
and including the ANSI-defined system header files for system and library
functions, as defined in K&R, second edition:<string.h>,<stdlib.h>,<unistd.h>(except in NeXTSTEP this
is<libc.h>), and<sys/stdtypes.h>.  If you get
warnings about any of these header files not being found, or about argument
mismatches involvingpid_t,uid_t, orgid_t, look
in ckcdeb.h and make amendments.  C-Kermit assumes it is being compiled by an
ANSI-compliant C compiler if__STDC__is defined, normally defined by
the compiler itself.  You can force ANSI compilation without defining__STDC__(which some compilers won't let you define) by including-DCK_ANSICon the cc command line. On the other hand, if your compiler defines__STDC__but still
complains about the syntax of Kermit's function prototypes, you can disable
the ANSI-style function prototyping by including-DNOANSIon the
command line. For SCO OpenServer, UNIX, ODT, and XENIX compilations, be sure to pick the
most appropriatemakefiletarget, and be sure you have installed an SCO
development system that is keyed to your exact SCO operating system release,
down to the minor version (like 2.3.1). Also note that SCO distributes some of its libraries in encrypted form, and
they must be decrypted before C-Kermit can be linked with them.  If not, you
might see a message like: To decrypt, you must supply a key (password) that came with your license.
Call SCO for further info. If your compiler uses something other than int for the pid (process id) data
type, put-DPID_T=pid_tor whatever in your CFLAGS. If you get complaints about unknown data typesuid_tandgid_t, put-DUID_T=xxx-DGID_T=yyyin
your CFLAGS, wherexxxandyyyare the appropriate types. If your compilation fails because of conflicting or duplicate declarations forsys_errlist, add-DUSE_STRERRORor-DNDSYSERRLISTto CFLAGS. If your compilation dies becausegetpwnam()is being redeclared (or
because of ""conflicting types for getwpnam""), add-DNDGPWNAMto your
CFLAGS.  If that doesn't work, then add -DDCGPWNAM to your CFLAGS (see
ckufio.c around line 440). If the compiler complains about the declaration ofgetpwnam()during
an ANSI C compilation, remove the declaration from ckufio.c or change the
argument in the prototype from(char *)to(const char *). If you get complaints thatgetpwuid()is being called with an
improper type, put-DPWID_T=xxin your CFLAGS. If you get compile-time warnings thatt_brkcort_eofc(tchars structure members, used in BSD-based versions) are undefined, or
structure-member- related warnings that might be traced to this fact, add-DNOBRKCto CFLAGS. If you get a linker message to the effect that_setreuidor_setregidis not defined, add-DNOSETREUto CFLAGS, or add-DCKTYP_H=blahto CFLAGS to make C-Kermit read the right<types.h>-kind-of-file to pick up these definitions. If you get a message that_popenis undefined, add-DNOPOPENto CFLAGS. If you get a complaint at compile time about an illegal pointer-integer
combination in ckufio.c involvingpopen(), or at link time that_popenis an undefined symbol, add the declaration ""FILE*popen();"" to the functionzxcmd()in ckufio.c (this
declaration is supposed to be in<stdio.h>).  If making this
change does not help, then apparently your Unix does not have thepopen()function, so you should add-DNOPOPENto your make
entry, in which case certain functions involving ""file"" i/o to the standard
input and output of subprocesses will not be available. If your linker complains that_getcwdis undefined, you can add agetcwd()function to ckufio.c, or add it to yourlibc.alibrary usingar: If you get complaints about NPROC having an invalid value, add a valid
definition for it (depends on your system), as in the cray entry. If you get some symbol that's multiply defined, it probably means that a
variable name used by Kermit is also used in one of your system libraries that
Kermit is linked with.  For example, under PC/IX some library has a variable
or function called ""data"", and the variable ""data"" is also used extensively by
Kermit.  Rather than edit the Kermit source files, just put a-Din
the make entry CFLAGS to change the Kermit symbol at compile time.  In this
example, it might be-Ddata=xdata. Some symbol is defined in your system's header files, but it produces
conflicts with, or undesired results from, Kermit.  Try undefining the symbol
in the makefile target's CFLAGS, for example-UFIONREAD. Some well-known symbol is missing from your system header files.  Try defining
in the makefile target's CFLAGS, for example-DFREAD=1. You get many warnings about pointer mismatches.  This probably means that
Kermit is assuming an int type forsignal()when it should be void,
or vice-versa.  Try adding-DSIG_I(for integersignal()) or-DSIG_V(for void) to CFLAGS.  Or just includeKFLAGS=-DSIG_V(or whatever) in your ""make"" command, for example: You get many messages about variables that are declared and/or set but never
used.  It is difficult to avoid these because of all the conditional
compilation in the program.  Ignore these messages. Some of C-Kermit's modules are so large, or contain so many character string
constants, or are so offensive in some other way, that some C compilers give
up and refuse to compile them.  This is usually because the -O (optimize)
option is included in the make entry.  If this happens to you, you can
(a) remove the -O option from the make entry, which will turn off the
optimizer for ALL modules; or(b)compile the offending module(s) by hand,
including all the switches from make entry except for -O, and then give the
appropriate ""make"" command again; or(c)increase the value of the -Olimit
option, if your compiler supports this option; or(d)change themakefiletarget to first compile each offending module explicitly without optimization,
then compile the others normally (with optimization), for example: As an extreme example, some compilers (e.g. gcc on the DG AViiON) have been
known to dump core when trying to compile ckwart.c with optimization.  So just
do this one ""by hand"": or: and then give the ""make"" command again. Speaking of wart, it is unavoidable that some picky compilers might generate
""statement unreachable"" messages when compiling ckcpro.c.  Unreachable
statements can be generated by the wart program, which generates ckcpro.c
automatically fromckcpro.w,
which translates lex-like state/input constructions into a big switch/case
construction. Some function in Kermit wreaks havoc when it is called.  Change all
invocations of the function into a macro that evaluates to the appropriate
return code that would have been returned by the function had it been called
and failed, for example:-Dzkself()=0.  Obviously not a good idea if
the function is really needed. If you have just installed SunOS 4.1.2 or 4.1.3, you might find that C-Kermit
(and any other C program) fails to link because of unresolved references from
within libc.  This is because of a mistake in Sun's/usr/lib/shlib.etcfiles for building the new libc.  Change the libc
Makefile so that the ""ld"" lines have ""-ldl"" at the end.  Change the
README file to say ""mv xccs.multibyte.  xccs.multibyte.o"" and follow that
instruction."
http://kermitproject.org/ckuins.html,5. INSTALLING THE KERMIT FILES,"SECTION CONTENTS The C-Kermit executable does not need any external files to run.Unlike, say, thecuprogram, which on most platforms is useless
unless you (as root) edit the/usr/spool/uucp/Systemsand/usr/spool/uucp/Devicesfiles to supply whatever obscure and
undocumented syntax is required to match some supposedly user-friendly
mnemonic to the real pathname of whatever device you want to use, Kermit runs
on its own without needing any external configuration files, and lets you
refer to device (and network hosts and services) by their own natural
undisguised names. Nevertheless, a number of external files can be installed along with the
C-Kermit executable if you wish.  These include configuration and
customization files that are read by Kermit as well as documentation files to
be read by people.  All of this material is(a)optional, and(b)available on the Kermit website: and usually in a more pleasant form, perhaps also with updated content.  So if
your computer is on the Internet, there is no need to install anything but the
Kermit executable if users know how to find the Kermit website (and if they
don't, Kermit's ""help"" command tells them)."
http://kermitproject.org/ckuins.html,5.1. The C-Kermit Initialization File,"It ""loaded"" the dialing and network directories. It defined all the macros and variables for the services directory. It defined macros for quickly changing Kermit's file-transfer performance
tuning. The standard initialization file is quite long (more than 600 lines) and
requires noticeable processing time (the slower the computer, the more
noticeable), yet few people actually use the services directory, whose
definition takes up most of its bulk.  Meanwhile, in C-Kermit 8.0, many of the
remaining functions of the standard initialization file are now built in; for
example, the FAST, CAUTIOUS, and ROBUST commands. More to the point, many of the settings that could be made only in the
initialization and customization files can now be picked up from environment
variables.  The first group identifies initialization and directory files: The next group is related to dialing modems: The final group includes well-known environment variables that are also used
by Kermit: Does this mean the initialization file can be abolished?  I think so.
Here's why: Kermit already does everything most people want it to do without one. Important site-specific customizations can be done with global
environment variables. There is no longer any need foreverybodyto have to use the
standard initialization file. This means that your initialization file, if you want one, can contain
your own personal settings, definitions, and preferences, rather than 600
lines of ""standard"" setups. If you still want the services directory, you can either TAKE the
standard initialization file (which must be named anything other than$HOME/.kermrcto avoid being executed automatically every time you
start Kermit), or you can make it a kerbang script and execute it ""directly""
(themakefile install targetdoes this for you by puttingckermit.iniin the same directory as the Kermit binary, adding the
appropriate Kerbang line to the top, and giving it execute permission). In fact, you can put any number of kerbang scripts in your PATH to start up
C-Kermit in different ways, to have it adopt certain settings, make particular
connections, execute complicated scripts, whatever you want. And in C-Kermit9.0the initialization has indeed been ""retired"" by
renaming it to okermit.ini, and replaced by a stub ckermit.ini that doesn't
do anything but print a message.  Ditto for ckermod.ini."
http://kermitproject.org/ckuins.html,5.2. Text Files,
http://kermitproject.org/ckuins.html,5.3. Installing the Kermit Files,"In most cases, you need to be root to install C-Kermit, if only to gain write
access to directories in which the binary and manual page are to be copied.
The C-Kermit binary should be installed in a directory that is in the users'
PATH, but that is not likely to be overwritten when you install a new version
of the operating system.  A good candidate would be the/usr/local/bin/directory, but the specific choice is site dependent.
Example (assuming the appropriate Kermit binary is stored in your current
directory as ""wermit"", e.g. because you just built it from source and that's
the name the makefile gave it): or (only after you finish reading this section!) simply: IMPORTANT:IF C-KERMIT IS TO BE USED FOR DIALING OUT, you must also do
something to give it access to the dialout devices and lockfile directories.
The 'install' target does not attempt to set Kermit's owner, group, and
permissions to allow dialing out.  This requires privileges, open eyes, and
human decision-making.  Please readSections 10and11below, make the necessary decisions, and then implement
them by hand as described in those sections. You should also install the man page, which is calledckuker.nr, in
the man page directory for local commands, such as/usr/man/man1/,
renamed appropriately, e.g. tokermit.1.  This is also taken
care of by ""make install"". Optionally, the text files listed in theprevious sectioncan be placed in a publicly readable directory.  Suggested directory names
are: (or any of these without the ""/kermit"").  Upon startup, C-Kermit
checks the following environment variables whose purpose is to specify the
directory where the C-Kermit text files are, in the following order: If either of these is defined, C-Kermit checks for the existence of theckubwr.txtfile (Unix C-Kermit Hints and Tips).  If not found, it
checks the directories listed above (both with and without the
""/kermit"") plus several others to see if they contain theckubwr.txtfile.  If found, various C-Kermit messages can refer the
user to this directory. Finally, if you want to put the source code files somewhere for people to
look at, you can do that too."
http://kermitproject.org/ckuins.html,5.4. The Makefile Install Target,"You downloaded thecomplete C-Kermit
archiveand built C-Kermit from source; or: You downloaded anindividual C-Kermit
binaryand theC-Kermit text-file
archive,andyour computer has a ""make"" command. Here are the parameters you need to know: For definitive information, see the makefile.  The following is excerpted
from the 8.0.211 makefile:"
http://kermitproject.org/ckuins.html,6. INSTALLING UNIX C-KERMIT FROM DOS-FORMAT DISKETTES,"In version 5A(190) and later, all the text files on the C-Kermit DOS-format
diskettes are in Unix format: LF at the end of each line rather than CRLF.
This means that no conversions are necessary when copying to your Unix file
system, and that all the files on the diskette, text and binary, can be copied
together.  The following comments apply to the DOS-format diskettes furnished
with version 5A(189) and earlier or to other DOS-format diskettes you might
have obtained from other sources. If you have received C-Kermit on MS-DOS format diskettes (such as those
distributed by Columbia University in the 80s and 90s), you should make sure
that your DOS-to-Unix conversion utility (such as ""dosread"") both: (1)
changes line terminators in all files from carriage-return linefeed (CRLF)
to just linefeed (LF) (such as ""dosread -a"") and remove any Ctrl-Z's, and
(2) that all filenames are converted from uppercase to lowercase.  If these
conversions were not done, you can use the following shell script on your
Unix system to do them: Cut out this shell script, save it as ""convert.sh"" (or any other name you
prefer), then ""chmod +x convert.sh"".  Then, create a new, empty directory
to put the converted files in, and then ""convert.sh /xxx /yyy"" where /xxx
is the name of the directory where the PC-format files are, and /yyy is the
name of the new, empty directory.  The converted files will appear in the
new directory."
http://kermitproject.org/ckuins.html,7. CHECKING THE RESULTS,"First some quick checks for problems that can be easily corrected by
recompiling with different options: Here is a more thorough checklist can use to tell whether your version of
C-Kermit was built correctly for your Unix system, with hints on how to fix
or work around problems: Start C-Kermit (usually by typing ""./wermit"" in the directory
where you ran the makefile).  Do you see theC-Kermit>prompt?  If
not, C-Kermit incorrectly deduced that it was running in the background.  The
test is inconbgt()inckutio.c.
If you can fix it for your system, please send in the fix (Hint: read about
""PID_T"" below).  Otherwise, you can force C-Kermit to foreground mode by
starting it with the -z command line option, as in ""kermit -z"", or giving the
interactive command SET BACKGROUND OFF. When you type characters at the C-Kermit prompt, do they echo immediately?
If not, something is wrong withconcb()and probably the other
terminal mode settings routines inckutio.c.
Be sure you have used the most appropriate make entry. At theC-Kermit>prompt, type ""send./?"".
C-Kermit should list all the files in the current directory.  If not, it was
built for the wrong type of Unix file system.  Details below.  In the
meantime, try SET WILDCARD-EXPANSION SHELL as a workaround. CD to a directory that contains a variety of files, symlinks, and
subdirectories and give a DIRECTORY command at theC-Kermit>prompt.  Do the permissions, size, and date appear correct?  If not seeSection 4.0. Assuming your platform supports long file names, create a file with a
long name in your current directory, e.g.:$ touch thisisafilewithaveryveryveryveryveryveryveryverylooooooooongname(you might need to make it longer than this, perhaps as long as 257
or even 1025 characters).Check with ls to see if your version of Unix truncated the name.  Now
start C-Kermit and type ""send thisis<ESC>"".  Does Kermit complete the
name, showing the same name as ls did?  If not, wrong filesystem.  Read
on. Make sure that Kermit has the maximum path length right.  Just type
SHOW FILE and see what it says about this.  If it is too short, there
could be some problems at runtime.  To correct, look inckcdeb.hto see how the symbol CKMAXPATH is set and make any needed adjustments. Send a file to your new Kermit program from a different Kermit program
that is known to work.  Is the date/timestamp of the new file identical
to the original?  If not, adjustments are needed inzstrdt()inckufio.c. Go to another computer (Computer B) from which you can send files to
C-Kermit.  Connect Computer B to the computer (A) where you are testing
C-Kermit.  Then: Send a file from B to A.  Make sure it transferred OK and was created
with the right name. Send a file from B to A, specifying an ""as-name"" that is very, very
long (longer than the maximum name length on computer A).  Check to
make sure that the file was received OK and that its name was truncated
to Computer A's maximum length.  If not, check the MAXNAMLEN definition
inckufio.c. Tell C-Kermit on Computer A to ""set receive pathnames relative"" and
then send it a file from Computer B specifying an as-name that contains
several directory segments:send foo dir1/dir2/dir3/fooCheck to make sure that dir1/dir2/dir3/foo was created in Computer A's
current directory (i.e. that three levels of directories were created). Repeat step k, but make each path segment in the pathname longer than
Computer A's maximum name length.  Make sure each directory name, and
the final filename, were truncated properly. Type Ctrl-C (or whatever your Unix interrupt character is) at the prompt.
Do you get ""^C..."" and a new prompt?  If instead, you get a core dump
(this shouldn't happen any more) ""rm core"" and then rebuild with-DNOCCTRAPadded to your CFLAGS.  If it did work, then type another
Ctrl-C.  If this does the same thing as the first one, then Ctrl-C
handling is OK.  Otherwise, the SIGINT signal is either not getting
re-armed (shouldn't happen) or is being masked off after the first time
it is caught, in which case, if your Unix is POSIX-based, try rebuilding
C-Kermit with-DCK_POSIX_SIG. Type Ctrl-Z (or whatever your Unix suspend character is) to put C-Kermit
in the background.  Did it work?  If nothing happened, then(a)your version
of Unix does not support job control, or(b)your version of C-Kermit was
probably built with-DNOJC.  If your session became totally frozen,
then you are probably running C-Kermit on a Unix version that supports job
control, but under a shell that doesn't.  If that's not the case, look in thecongm()andpsuspend()routines inckutio.cand see if you can figure out what's wrong.  If you can't, rebuild with-DNOJC. Give a SET LINE command for a dialout device, e.g. ""set line
/dev/tty00"".  If you got some kind of permission or access denied
message, go readSection 10and then come back here. After giving a successful SET LINE command, type ""show comm"" to
see the communication parameters.  Do they make sense? Type ""set speed ?"" and observe the list of available speeds.  Is it
what you expected?  If not, seeSection 2) of theConfigurations Optionsdocument. Give a SET SPEED command to change the device's speed.  Did it work?
(Type ""show comm"" again to check.) Try dialing out: SET MODEM TYPE, SET LINE, SET
SPEED, DIAL.  If it doesn't work, keep
reading.  After dialing, can you REDIAL? If your version was built with TCP/IP network support, try the TELNET
command. Transfer some files in remote mode on incoming asynchronous serial
(direct or modem) connections, and on incoming network (telnet, rlogin,
terminal server) connections.  If you get lots of errors, try different
SET FLOW settings on the remote Kermit program. Establish a serial connection from C-Kermit to another computer (direct
or dialed) and transfer some files.  If you have network support, do the
same with a network connection. If your version was built with fullscreen file transfer display support,
check that it works during local-mode file transfer.  Also, check
C-Kermit's operation afterwards: is the echoing funny?  etc etc.  If
there are problems, seeSection 4. If your version was built with script programming language support,
TAKE the ckedemo.ksc file to give it a workout. Does C-Kermit interlock correctly with UUCP-family programs (cu, tip,
uucp, etc)?  If not, read the sectionDIALING OUT AND
COORDINATING WITH UUCPbelow. Modem signals...  Give a SET LINE command to a serial device and then
type the SHOW MODEM command.  If it says ""Modem signals unavailable in
this version of Kermit"", then you might want to look at thettgmdm()routine inckutio.cand add the needed code -- if indeed your version of
Unix provides a way to get modem signals (some don't; e.g. modem signals
are a foreign concept to POSIX, requiring politically incorrect
workarounds). If it says ""Modem signals unavailable"", then it is likely that the API
for getting modem signals is provided, but it doesn't actually do
anything (e.g.ioctl(ttyfd,TIOCMGET,&x)returns EINVAL). In any case, it still should be able to manipulate the DTR signal.  To
test, SET LINE, SET MODEM NONE, and HANGUP.  The DTR
light should go out momentarily.  If it doesn't, see if you can add the needed
code for your system to thetthang()routine inckutio.c. If your version of Kermit has the SET FLOW RTS/CTS command, check to see
if it works: give Kermit this command, set your modem for RTS/CTS, transfer
some files (using big packet and window sizes) and watch the RTS and CTS
lights on the modem.  If they go on and off (and Kermit does not get packet
errors), then it works.  If your version of Kermit does not have this command,
but your version of Unix does support hardware flow control, take a look at
thetthflow()command inckutio.cand see if you can add the needed code (see the section onHARDWARE FLOW CONTROLbelow).(And pleasesend backany
added code, so that others can benefit from it and it can be carried forward
into future releases.) If C-Kermit starts normally and issues its prompt, echoing is normal,
etc, but then after returning from a CONNECT session, the prompt no
longer appears, try rebuilding with-DCKCONINTB4CB. (8.0.206 or later)  Type some commands at the C-Kermit prompt.  Can
you use the Up-arrow and Down-arrow keys on your keyboard to access Kermit's
command history?  If not, and you're a programmer, take a look at the
USE_ARROWKEYS sections ofckucmd.c. (you might need to make it longer than this, perhaps as long as 257
or even 1025 characters). Check with ls to see if your version of Unix truncated the name.  Now
start C-Kermit and type ""send thisis<ESC>"".  Does Kermit complete the
name, showing the same name as ls did?  If not, wrong filesystem.  Read
on. Check to make sure that dir1/dir2/dir3/foo was created in Computer A's
current directory (i.e. that three levels of directories were created). (And pleasesend backany
added code, so that others can benefit from it and it can be carried forward
into future releases.)"
http://kermitproject.org/ckuins.html,8. REDUCING THE SIZE OF THE EXECUTABLE PROGRAM IMAGE,"Also see:C-Kermit Configuration Options Many of C-Kermit's options and features can be deselected at compile time.
The greatest savings at the least sacrifice in functionality is to disable the
logging of debug information by defining NODEBUG during compilation.  See theConfigurations Optionsdocument for further
information. Use shared libraries rather than static linking.  This is the default
on many Unix systems anyway.  However, executables built for dynamic
linking with shared libraries are generally not portable away from the
machine they were built on, so this is recommended if the binary is for
your use only. Most Unix systems have a ""strip"" command to remove symbol table
information from an executable program image.  ""man strip"" for further
information.  The same effect can be achieved by including ""-s"" among
the link flags when building C-Kermit. SCO, Interactive, and some other Unix versions have an ""mcs"" command.
""mcs-dwermit"" can be used to delete the contents
of the "".comment"" section from the executable program image. Many modern optimizers can be instructed to optimize for space rather
than execution efficiency.  Check the CFLAGS in the makefile target,
adjust as desired."
http://kermitproject.org/ckuins.html,9. UNIX VERSIONS,"SECTION CONTENTS There are several major varieties of Unix: Bell Laboratories Seventh Edition,
AT&T System V, Berkeley Standard Distribution (BSD), and POSIX.  Each has
many, many subvarieties and descendents, and there are also hybrids that
exhibit symptoms of two or more varieties, plus special quirks of their own. Seventh edition versions of C-Kermit include the compile-time option-DV7in the CFLAGS string in the makefile target.  Various V7-based
implementations are also supported:-DCOHERENT,-DMINIX, etc. AT&T-based versions of Unix Kermit include the compile-time option-DATTSV(standing for AT∓T Unix System V).  This applies to System
III and to System V up to and including Release 2.  For System V Release 3,
the flag-DSVR3should be used instead (which also implies -DATTSV).
This is because the data type ofsignal()and several other functions
was changed between SVR2 and SVR3.  For System V Release 4, include-DSVR4because of changes in UUCP lockfile conventions; this also
implies-DSVR3and-DATTSV. For BSD, the flag-BSDxxmust be included, wherexxis the BSD version number, for example BSD4 (for version 4.2 or later, using
only 4.2 features),-DBSD41(for BSD 4.1 only),-DBSD43(for
4.3),-DBSD29(BSD 2.9 for DEC PDP-11s).-DBSD44is for
4.4BSD, which is the basis of FreeBSD, NetBSD, OpenBSD, BSDI, and Mac OS X, and
which contains many POSIX features, and has little relation to 4.3BSD and
earlier. For POSIX, include the flag-DPOSIX.  POSIX defines a whole new set
of terminal i/o functions that are not found in traditional AT&T or
Berkeley implementations, and also defines the symbol_POSIX_SOURCE,
which is used in many system and library header files, mainly to disable
non-POSIX (i.e. useful) features. Note (circa 1997): In order to enable serial speeds higher than 38400 bps, it
is generally necessary to add-DPOSIX(among other things), since the
older terminal APIs can not accommodate the new speeds -- out o' bits.  But
this often also means wholesale conversion to POSIX APIs.  In general, just
try adding-DPOSIXand then see what goes wrong.  Be wary of features
disappearing: when_POSIX_SOURCEis defined, all sorts of things that
were perfectly OK before suddenly become politically incorrect -- like reading
modem signals, doing hardware flow control, etc.  POSIX was evidently not
designed with serial communication in mind! Case in point: In UnixWare 7.0, #define'ing POSIX causes strictness clauses in
the header files to take effect.  These prevent<sys/time.h>from defining the timeval and timezone structs, which are needed for all sorts
of things (likeselect()).  Thus, if we want the high serial speeds,
we have to circumvent the POSIX clauses. Similarly in SCO OpenServer R5.0.4 where, again, we must use the POSIX APIs to
get at serial speeds higher than 38400, but then doing so removes hardware
flow control -- just when we need it most!  In cases like this, dirty tricks
are the only recourse (search for SCO_OSR504 inckutio.cfor examples). For reasons like this, Unix implementations tend to be neither pure AT&T
nor pure BSD nor pure POSIX, but a mixture of two or more of these, with
""compatibility features"" allowing different varieties of programs to be built
on the same computer.  In general, Kermit tries not to mix and match but to
keep a consistent repertoire throughout.  However, there are certain Unix
implementations that only work when you mix and match.  For example, the
Silicon Graphics IRIX operating system (prior to version 3.3) is an AT&T
Unix but with a BSD file system.  The only way you can build Kermit
successfully for this configuration is to include-DSVR3plus the
special option-DLONGFN, meaning ""pretend I was built with-DBSDxxwhen it's time to compile file-related code"".  See the
""iris"" makefile target."
http://kermitproject.org/ckuins.html,9.1. Standards,"SUBSECTION CONTENTS In edits 166-167 (1988-89), C-Kermit was heavily modified to try to keep
abreast of new standards while still remaining compatible with old versions of
C and Unix.  There are two new standards of interest: ANSI C (as described in
Kernighan and Ritchie, ""The C Programming Language"", Second Edition, Prentice
Hall, 1988) and POSIX.1 (IEEE Standard 1003.1 and ISO/IEC 9945-1, 1990,
""Portable Operating System Interface"").  These two standards have nothing to
do with each other: you can build C-Kermit with a non-ANSI compiler for a
POSIX system, or for a non-POSIX system with with an ANSI compiler. Computer systems that claim some degree of POSIX compliance have made some
attempt to put their header files in the right places and give them the right
names, and to provide system library functions with the right names and
calling conventions.  Within the header files, POSIX-compliant functions are
supposed to be within#ifdef _POSIX_SOURCE..#endifconditionals, and
non-POSIX items are not within these conditionals. If Kermit is built with neither-D_POSIX_SOURCEnor-DPOSIX,
the functions and header files of the selected version of Unix (or VMS, etc)
are used according to the CFLAGS Kermit was built with. If Kermit is built with-D_POSIX_SOURCEbut not-DPOSIX,
then one of the-DBSDor-DATTSVflags (or one that implies
them) must also be defined, but it still uses only the POSIX features in the
system header files.  This allows C-Kermit to be built on BSD or AT&T
systems that have some degree of POSIX compliance, but still use BSD or
AT&T specific features. The dilemma is this: it is often necessary to define_POSIX_SOURCEto
get at new or modern features, such as high serial speeds and the APIs to deal
with them.  But defining_POSIX_SOURCEalso hides other APIs that
Kermit needs, for example the ones dealing with modem signals (others are
listed just below).  Thus all sorts of hideous contortions are often required
to get a full set of features. The POSIX standard does not define anything about uucp lockfiles.  ""make
posix"" uses NO (repeat, NO) lockfile conventions.  If your POSIX-compliant
Unix version uses a lockfile convention such as HDBUUCP (see below), use
the ""posix"" entry, but include the appropriate lockfile option in your KFLAGS
on the ""make"" command line, for example: POSIX.1 also lacks certain other features that Kermit needs.  For example: There is no defined way for an application to do wildcard matching of
filenames.  Kermit uses the inode in the directory structure, but POSIX.1 does
not include this concept.  (Later POSIX revisions include functions named (I
think)glob()andfnmatch(), but these functions are not yet
in Kermit, and might not be appropriate in any case.) There is no POSIX mechanism for sensing or controlling modem signals,
nor to enable RTS/CTS or other hardware flow control. There is noselect()for multiplexing i/o, and therefore no
TCP/IP. There is no way to check if characters are waiting in a communications
device (or console) input buffer, short of trying to read them -- noselect(),ioctl(fd,FIONREAD,blah),rdchk(),
etc.  This is bad for CONNECT
mode and bad for sliding windows. No way to do a millisecond sleep (nonap(),usleep(),select(), etc). There is nopopen(). So at this point, there cannot be one single fully functional POSIX form of
C-Kermit unless it also has ""extensions"", as do Linux, QNX, etc. More on POSIX (quoting from a newsgroup posting by Dave Butenhof): But for Solaris, or Digital Unix, the picture is different. POSIX is one
important but small part of the universe. Yet POSIX unconditionally and
unambiguously REQUIRES that, when_POSIX_C_SOURCE=199506L, ALL of the
functions and definitions required by the standard, and NO others (except in
specific restricted namespaces, specifically ""_"" followed by an uppercase
letter or ""__"" followed by a lowercase letter) shall be visible. That kinda
puts a cramp on BSD and SVID support, because those require names that are not
in the ""protected"" POSIX namespaces. It's ILLEGAL to make those symbols
visible, unless you've done something else that's beyond the scope of POSIX to
allow the system to infer that you didn't really mean it. In most cases, you should just compile, with no standards-related macros
defined. The system will make available every interface and definition that
isn't incompatible with the ""main stream"". There may indeed be cases where
two standards cross, and you really can't use both together. But, in
general, they play nicely together as long as you don't do anything rash --
like telling the system that it's not allowed to let them. In the area of threads, both Solaris and Digital Unix support incompatible
thread APIs. We have POSIX and DCE, they have POSIX and UI. The nasty areas
are in the_rroutines and in some aspects of signal behavior. You
cannot compile a single source file that uses both semantics. That's life. It
sounds as if Solaris defaults to the UI variants, but allows you to define
this_POSIX_THREAD_SEMANTICSto get around it. We default to POSIX,
and allow you to define_PTHREAD_USE_D4(automatically defined by the
cc ""-threads"" switch) to select the DCE thread variants.  That
default, because you're operating outside of any individual standard, is
really just a marketing decision. The major difference between ANSI C and earlier C compilers is function
prototyping.  ANSI C allows function arguments to be checked for type
agreement, and (when possible) type coercion in the event of a mismatch.  For
this to work, functions and their arguments must be declared before they are
called.  The form for function declarations is different in ANSI C and
non-ANSI C (ANSI C also accepts the earlier form, but then does not do type
checking). As of edit 167, C-Kermit tries to take full advantage of ANSI C features,
especially function prototyping.  This removes many bugs introduced by
differing data types used or returned by the same functions on different
computers.  ANSI C features are automatically enabled when the symbol__STDC__is defined.  Most ANSI C compilers, such as GNU CC and the
new DEC C compiler define this symbol internally. On the downside, ANSI C compilation increases the administrative/bureaucratic
burden, spewing out countless unneeded warnings about mismatched types,
especially when we are dealing with signed and unsigned characters, requiring
casts everywhere to shut up the mindless complaints -- there is no use for
signed chars in Kermit (or probably anywhere else).  Some compilers,
mercifully, include a ""treat all chars as unsigned"" option, and when available
it should be used -- not only to stop the warnings, but also to avoid unhelpful
sign extension on high-bit characters. To force use of ANSI C prototypes, include-DCK_ANSICon the cc
command line.  To disable the use of ANSI prototypes, include-DNOANSI. As the years go by, standards with-which-all-must-comply continue to pile up:
AES, XPG2, XPG3, XPG4, FIPS 151-2, successive generations of POSIX, OSF/1,
X/Open, Spec 1170, UNIX95, Open Group UNIX98, ISO/IEC 9945 parts 1-4, ISO 9899,
88Open, OS 99, Single Unix Specification
(SUS,IEEE
1003.1-2001, not to mention ""mature standards"" like V7, 4.2/4.3BSD, System
V R3 and R4 (SVID2 and SVID3), 4.4BSD (the basis for BSDI, OpenBSD, NetBSD,
FreeBSD, Mac OS X etc),/usr/group, plus assorted seismic
pronouncements of the neverending series of ephemeral corporate consortia, not
to mention the libc-vs-glibc turmoil in the Linux arena and who knows what
else. None of these standards simplifies life for portable applications like
C-Kermit -- each one is simply one more environment to support (or circumvent,
as in many cases these standards do more harm than good by denying access to
facilities we need, e.g. as noted in above in9.1.1)."
http://kermitproject.org/ckuins.html,9.2. Library Issues,"On most modern platforms, applications are -- and often must be -- dynamically
linked.  This has numerous advantages (smaller executables, ability to patch
a library and thereby patch all applications that use it, etc), but also
causes some headaches: most commonly, the library ID built into the executable
at link time does not match the ID of the corresponding library on the target
system, and so the loader refuses to let the application run. This problem only gets worse over time.  In the Linux and *BSD world, we also
have totally different libraries (each with their own names and numbering
systems) that cover the same territory; for example, curses vs ncurses, libc
versus glibc.  Combinations proliferate and any given Unix computer might have
any combination.  For this reason it is becoming increasingly difficult to
produce a ""Linux binary"" for a given architecture (e.g. PC or Alpha).  There
has to be a separate binary for (at least) every combination of curses vs
ncurses and libc vs glibc. In such cases, the best advice is for every user to build C-Kermit from source
code on the system where it will run.  Too bad most commercial Unix vendors
have stopped including C compilers with the operating system!"
http://kermitproject.org/ckuins.html,9.3. Unix File System Peculiarities,"Normally, including a BSD, System-V, POSIX, or DIRENT flag in the make entry
selects the right file system code.  But some versions of Unix are
inconsistent in this regard, and building in the normal way either gives
compiler or linker errors, or results in problems at runtime, typically
failure to properly expand wildcard file specifications when you do something
like ""send*.*"", or failure to recognize long filenames, as
in ""sendfilewithaveryveryveryveryverylongname"". C-Kermit is supposed to know about all the various styles of Unix file
systems, but it has to be told which one to use when you build it, usually in
the makefile target CFLAGS as shown below, but you might also have to add
something like-I/usr/include/bsdto CFLAGS, or something like-lbsdto LIBS. C-Kermit gives you the following CFLAGS switches to adapt to your file system's
peculiarities: (Note, RTU should only be used for Masscomp RTU systems, because it also
selects certain other RTU-specific features.) If none of these is defined, then <sys/dir.h> is used.  IMPORTANT: If
your system has the file/usr/include/dirent.hthen be sure to add-DDIRENTto your makefile target's CFLAGS.  ""dirent"" should be used in
preference to any of the others, because it supports all the features of your
file system, and the others probably don't. Having selected the appropriate directory header file, you might also need to
tell Kermit how to declare the routines and variables it needs to read the
directory.  This happens most commonly on AT&T System-V based UNIXes,
particularly System V R3 and earlier, that provide long file and directory
names (longer than 14 characters).  Examples include certain releases of
HP-UX, DIAB DNIX, older versions of Silicon Graphics IRIX, and perhaps also
MIPS.  In this case, try adding-DLONGFNto your makefile target. Another problem child is<sys/file.h>.  Most Unix C-Kermit
versions need to #include this file from withinckufio.candckutio.c,
but some not only do not need to include it, but MUST not include it because
(a) it doesn't exist, or(b)it has already been included by some other header
file and it doesn't protect itself against multiple inclusion, or(c)some
other reason that prevents successful compilation.  If you have compilation
problems that seem to stem from including this file, then add the following
switch to CFLAGS in your makefile target: There are a few odd cases where<sys/file.h>must be included
in one of thecku[ft]io.cfiles, but not the other.  In that case,
add the aforementioned switch, but go into the file that needs<sys/file.h>and add something like this: before the section that includes<sys/file.h>. Kermit's SEND command expands wildcard characters ""?"" and ""*"" itself.  Before
version 5A, commands like ""send *"" would send all regular (non-directory)
files, including ""hidden files"" (whose names start with ""."").  In version 5A,
the default behavior is to match like the Bourne shell or the ls command, and
not include files whose names start with dot.  Such files can still be sent if
the dot is included explicitly in the SEND command: ""send .oofa, send .*"".  To
change back to the old way and let leading wildcard characters match dot
files, include the following in your CFLAGS: (In C-Kermit 6.0, there is also a command to control this at runtime.) Complaints about data-type mismatches: If you get compile-time complaints about data type mismatches for
process-ID related functions likegetpid(), add-DPID_T=pid_t. If you get compile-time complaints about data type mismatches for user ID
related functions likegetuid(), add-DUID_T=uid_t. If you get compile-time complaints about data type mismatches for user-ID
related functions likegetgid(), add-DGID_T=gid_t. If you get compile-time complaints about data type mismatches for
getpwuid(), add-DPWID_T=uid_t(or whatever it should be). File creation dates: C-Kermit attempts to set the creation date/time of an
incoming file according to the date/time given in the file's attribute packet,
if any.  If you find that the dates are set incorrectly, you might need to
build Kermit with the-DSYSUTIMEHflag, to tell it to include<sys/utime.h>.  If that doesn't help, look at the code inzstrdt()inckufio.c."
http://kermitproject.org/ckuins.html,9.4. Hardware Flow Control,"Hardware flow control is a problematic concept in many popular Unix
implementations.  Often it is lacking altogether, and when available, the
application program interface (API) to it is inconsistent from system to
system.  Here are some examples: POSIX does not support hardware flow control. RTS/CTS flow control support MIGHT be available for System V R3 and
later if/usr/include/termiox.hexists (its successful operation
also depends on the device driver, and the device itself, not to mention thecable, etc, actually supporting it).  If your
SVR3-or-later Unix system does have this file, add:-DTERMIOXto your CFLAGS.  If the file is in/usr/include/sysinstead, add:-DSTERMIOXNote that the presence of this file does not guarantee that RTS/CTS will
actually work -- that depends on the device-driver implementation
(reportedly, many Unix versions treat hardware-flow-control related
ioctl's as no-ops). Search (""grep -i"") through/usr/include/*.hand/usr/include/sys/*.hfor RTS or CTS and see what turns up.  For
example, in SunOS 4.x we find ""CRTSCTS"".  Figuring out how to use it is
another question entirely!  In IBM AIX RS/6000 3.x, we have to ""add"" a new
""line discipline"" (and you won't find uppercase RTS or CTS symbols in the
header files). NeXTSTEP and IRIX, and possibly others, support hardware flow control, but
do not furnish an API to control it, and thus on these systems Kermit has no
command to select it -- instead, a special device name must be used.
(NeXTSTEP:/dev/cufainstead of/dev/cua; IRIX:/dev/ttyf00) to your CFLAGS.  If the file is in/usr/include/sysinstead, add: Note that the presence of this file does not guarantee that RTS/CTS will
actually work -- that depends on the device-driver implementation
(reportedly, many Unix versions treat hardware-flow-control related
ioctl's as no-ops). See the routinetthflow()inckutio.cfor details.  If you find that your system offers hardware flow control
selection under program control, you can add this capability to C-Kermit as
follows: See if it agrees with one of the methods already used intthflow().  if not, add new code, appropriately #ifdef'd. Add-DCK_RTSCTSto the compiler CFLAGS in your makefile target or
define this symbol within the appropriate#ifdefs inckcdeb.h. To illustrate the difficulties with RTS/CTS, here is a tale from Jamie Watson<jw@adasoft.ch>, who added the RTS/CTS code for the RS/6000,
about his attempts to do the same for DEC ULTRIX:"
http://kermitproject.org/ckuins.html,9.5. Terminal Speeds,"The allowable speeds for the SET SPEED command are defined inckcdeb.h.
If
your system supports speeds that are not listed in ""set speed ?"", you can
add definitions for them tockcdeb.h. Then if the speed you are adding is one that was never used before in Kermit,
such as 921600, you'll also need to add the appropriate keywords tospdtab[]inckuus3.c,
and the corresponding case tottsspd()inckutio.c."
http://kermitproject.org/ckuins.html,9.6. Millisecond Sleeps,"There is no standard for millisecond sleeps, but at least five different
functions have appeared in various Unix versions that can be used for this
purpose:nap()(mostly in System V),usleep()(found at
least in SunOS and NeXT OS),select()(found in 4.2BSD and later, and
part of any TCP/IP sockets library),nanosleep(), andsginap().  If you have any of these available, pick one (in this
order of preference, if you have more than one): NOTE: Thenap()function is assumed to be a function that puts the
process to sleep for the given number of milliseconds.  If your system'snap()function does something else or uses some other units of time
(like the NCR Tower 32, which uses clock-ticks), do not include-DNAP. Reportedly, all versions of System V R4 for Intel-based computers, and
possibly also SVR3.2, includenap()as a kernel call, but it's not in
the library.  To include code to use it via syscall(3112,x), without having to
include Xenix compatibility features, include the following compile-time
option:"
http://kermitproject.org/ckuins.html,9.7. Nondestructive Input Buffer Peeking,"Some AT&T Unix versions have no way to check if input is waiting on a tty
device, but this is a very important feature for Kermit.  Without it, sliding
windows might not work very well (or at all), and you also have to type your
escape character to get Kermit's attention in order to interrupt a local-mode
file transfer.  If your system offers an FIONREAD ioctl, the build procedure
should pick that up automatically and use it, which is ideal. If your system lacks FIONREAD but has aselect()function, this can
be used instead.  If the build procedure fails to include it (SHOW FEATURES
will list SELECT), then you can add it to your CFLAGS: Conversely, if the build procedure tries to useselect()when it
really is not there, add: Note:select()is not part of System V nor of POSIX, but it has been
added to various System-V- and POSIX-based systems as an extension. Some System-V variations (SCO Xenix/UNIX/ODT and DIAB DNIX) include ardchk()function that can be used for buffer peeking.  It returns 0
if no characters are waiting and 1 if characters are waiting (but unlike
FIONREAD, it does not tell the actual number).  If your system hasrdchk(), add: Otherwise, if your version of Unix has thepoll()function (and the/usr/include/poll.hfile) -- which appears to be a standard part of
System V going back to at least SVR3, include:"
http://kermitproject.org/ckuins.html,9.8. Other System-Dependent Features,"Systems with<termios.h>might have the symbol IEXTEN defined.
This is used to turn ""extended features"" in the tty device driver on and off,
such as Ctrl-O to toggle output flushing, Ctrl-V to quote input characters,
etc. In most Unix implementations, it should be turned off during Kermit operation,
so ifckutio.cfinds this symbol, it uses it.  This is necessary, at least, on BSDI.  On some
systems, however, IEXTEN is either misdefined or misimplemented.  The symptom
is that CR, when typed to the command processor, is echoed as LF, rather than
CRLF.  This happens (at least) on Convex/OS 9.1.  The solution is to add the
following symbol to the makefile target's CFLACS: However, in at least one Unix implementation, QNX 4.21, IEXTEN must be set
before hardware flow control can be used. In edits 177 and earlier, workstation users noticed a ""slow screen writing""
phenomenon during interactive command parsing.  This was traced to asetbuf()call inckutio.cthat made console (stdout) writes unbuffered.  Thissetbuf()call has
been there forever, and could not be removed without some risk.  Kermit's
operation was tested on the NeXT in edit 178 with thesetbuf()call
removed, and the slow-writing symptom was cured, and everything else (command
parsing, proper wakeup on ?, ESC, Ctrl-U, and other editing characters,
terminal emulation, remote-mode and local-mode file transfer, etc) seemed to
work as well as or better than before.  In subsequent edits, this change was
made to many other versions too, with no apparent ill effects.  To remove thesetbuf()call for your version of Kermit, add: Later reports indicate that adding-DNOSETBUFhas other beneficial
effects, like cutting down on swapping when Kermit is run on workstations with
small memories.  But BEWARE: on certain small Unix systems, notably the
AT&T 6300 and 3B1 (the very same ones that benefit from NOSETBUF),
NOSETBUF seems to conflict with CK_CURSES.  The program builds and runs OK,
but after once using the curses display, echoing is messed up.  In this case,
we use a System-V specific variation in the curses code, usingnewterm()to prevent System V from altering the buffering.  See
makefile entries for AT&T 6300 and 3B1. The Unix version of C-Kermit includes code to switch to file descriptor zero
(stdin) for remote-mode file transfer.  This code is necessary to prevent
Kermit from giving the impression that it is ""idle"" during file transfers,
which, at some sites, can result in the job being logged out in the middle of
an active file transfer by idle-job monitors. However, this feature can interfere with certain setups; for example, there is
a package which substitutes a pty/tty pair for/dev/ttyand sets file
descriptor 0 to be read-only, preventing Kermit from sending packets.  Or...
When a Unix shell is invoked under the PICK environment, file descriptor 0
is inoperative. To remove this feature and allow Kermit to work in such environments, add the
compile-time option: On some versions of Unix, earlier releases of C-Kermit were reported to render
a tty device unusable after a hangup operation.  Examples include IBM AIX on
the RT PC and RS/6000.  A typical symptom of this phenomenon is that the DIAL
command doesn't work, but CONNECTing to the device and dialing manually do
work.  A further test is to SET DIAL HANGUP OFF, which should make dialing
work once by skipping the pre-dial hangup.  However, after the connection is
broken, it can't be used any more: subsequent attempts to DIAL the same device
don't work.  The cure is usually to close and reopen the device as part of the
hangup operation.  To do this, include the following compile-time option: Similarly, there is a section of code inttopen(), which does another
close(open()) to force the O_NDELAY mode change.  On some systems, the
close(open()) is required to make the mode change take effect, and apparently
on most others it does no harm.  But reportedly on at least one System V R4
implementation, and on SCO Xenix 3.2, theclose(open())operation
hangs if the device lacks carrier, EVEN THOUGH the CLOCAL characteristic has
just been set to avoid this very problem.  If this happens to you, add this to
your CFLAGS: or, equivalently, in your KFLAGS on the make command line.  It stands forNOClose(Open())ToForceModeChange. C-Kermit renames files when you give a RENAME command and also according to
the current SET FILE COLLISION option when receiving files.  The normal Unix
way to rename a file is via two system calls:link()andunlink().  But this leaves open a window of vulnerability.  Some Unix
systems also offer an atomic rename(oldname,newname) function.  If your
version of Unix has this function, add the following to your CFLAGS: C-Kermit predefines the RENAME for several Unix versions inckcdeb.h(SVR4, SUNOS41, BSD44, AIXRS, etc).  You can tell ifrename()is
being used if the SHOW FEATURES command includes RENAME in the compiler
options list.  If the predefined RENAME symbol causes trouble, then add
NORENAME to your CFLAGS.  Trouble includes: Linker complains that_renameis an unresolved symbol. Linking works, but Kermit's RENAME command doesn't work (which happens
because older versions ofrename()might have their arguments
reversed). Ifrename()is not used, then Kermit useslink()/unlink(), which is equivalent except it is not
atomic: there is a tiny interval in which some other process might ""do
something"" to one of the files or links. Some Unix systems (Olivetti X/OS, Amdahl UTS/V, ICL SVR3, etc) define the
S_ISREG and S_ISDIR macros incorrectly.  This is compensated for automatically
inckufio.c.
Other systems might have this same problem.  If you get a compile-time error
message regarding S_ISREG and/or S_ISDIR, add the following to your CFLAGS: Finally, here's a symbol you should NEVER define: It's used for commenting out blocks of code.  If for some reason you find
that your compiler has COMMENT defined, then add -UCOMMENT to CFLAGS or KFLAGS!
Similarly, some header files have been known to define COMMENT, in which case
you must add ""#undef COMMENT"" to each C-Kermit source module, after all the
#includes."
http://kermitproject.org/ckuins.html,9.9. Terminal Interruption,"When C-Kermit enters interactive command mode, it sets a Control-C (terminal
keyboard interrupt = SIGINT) trap to allow it to return to the command prompt
whenever the user types Control-C (or whatever is assigned to be the interrupt
character).  This is implemented usingsetjmp()andlongjmp().  On some systems, depending on the machine architecture
and C compiler and who knows what else, you might get ""Memory fault
(coredump)"" or ""longjmp botch"" instead of the desired effect (this should not
happen in 5A(190) and later).  In that case, add-DNOCCTRAPto your
CFLAGS and rebuild the program. Job control -- the ability to ""suspend"" C-Kermit on a Unix system by typing
the ""susp"" character (normally Ctrl-Z) and then resume execution later (with
the ""fg"" command) -- is a tricky business.  C-Kermit must trap suspend signals
so it can put the terminal back into normal mode when you suspend it (Kermit
puts the terminal into various strange modes during interactive command
parsing, CONNECT, and file transfer).  Supporting code is compiled into
C-Kermit automatically if<signal.h>includes a definition for
the SIGTSTP signal.  HOWEVER... some systems define this signal without
supporting job control correctly.  You can build Kermit to ignore SIGTSTP
signals by including the-DNOJCoption in CFLAGS.  (You can also do
this at runtime by giving the command SET SUSPEND OFF.) System V R3 and earlier systems normally do not support job control.  If you
have an SVR3 system that does, include the following option in your CFLAGS: On systems that correctly implement POSIX signal handling, signals can be
handled more reliably than in Bell, Berkeley, or AT&T Unixes.  On systems
(such as QNX) that are ""strictly POSIX"", POSIX signal handling *must* be used,
otherwise no signal will work more than once.  If you have POSIX-based system
and you find that your version of Kermit responds to Ctrl-C (SIGINT) or Ctrl-Z
(SIGTSTP) only once, then you should add the following option to your CFLAGS: But be careful; some POSIX implementations, notably 4.4BSD, include POSIX
signal handling symbols and functions as ""stubs"" only, which do nothing.  Look
in<signal.h>forsigsetjmpandsiglongjmpand read the comments."
http://kermitproject.org/ckuins.html,10. DIALING OUT AND COORDINATING WITH UUCP,"The short version (general): The short version for Linux only: The long version: Make sure your dialout line is correctly configured for dialing out (as
opposed to login).  The method for doing this is different for each kind of
Unix.  Consult your system documentation for configuring lines for dialing out
(for example, Sun SPARCstation IPC users should read the section ""Setting up
Modem Software"" in the Desktop SPARC Sun System and Network Manager's Guide, or
the Terminals and Modems section of the HP manual, ""Configuring HP-UX for
Peripherals"" (e.g./usr/sbin/sam=> Peripheral Devices =>
Terminals and Modems => Add Modem). Unlike most other multiuser, multitasking operating systems, Unix allows
multiple users to access the same serial device at the same time, even though
there is no earthly reason why two users should do this.  When they do, user A
will read some of the incoming characters, and user B will read the others.
In all likelihood, neither user will see them all.  Furthermore, User B can
hang up User A's call, and so one. Rather than change Unix to enforce exclusive access to serial devices such
as ttys, when it might still have been possible, Unix developers opted for a
""lock file"" mechanism.  Any process that wants to open a tty device should
first check to see if a file of a certain name exists, and if so, not to
open the device.  If the file does not exist, the process creates the file
and then opens the device.  When the process closes the device, it destroys
the lockfile.  This procedure was originated for use with Unix's UUCP, CU,
and TIP programs, and so these lockfiles are commonly called ""UUCP
lockfiles"" (UUCP = Unix-to-Unix Copy Program). As you can imagine, this method is riddled with pitfalls: If a process does not observe the prevailing lockfile convention,
then it can interfere with other ""polite"" processes.  And in fact,
very few Unix applications or commands handle lockfiles at all; an
original design goal of Unix was that ""everything is a file"", and
countless utilities operate on files directly (by opening them) or
indirectly through redirection of standard i/o, without creating or
looking for lockfiles. If a process crashes while it has the device open, the lockfile is
left behind, preventing further processes from using the device. Various versions of Unix use different names for the lockfiles, put
them in different directories, with different owners and groups and
permissions, and specify their contents differently. On a given platform, the lockfile conventions may change from one Unix
release to the next (for example, SunOS 4.0 to 4.1) or, in the case of
Linux, across different distributions. The same tty device might have more than one name, and most lockfile
conventions don't allow for this.  Similarly for symbolic links. In an attempt to address the problem of ""stale"" lockfiles, most UUCP
implementations put the PID (Process ID) of the creating process in the
lockfile.  Thus, another process that wants to open the corresponding device
can check not only for the lockfile itself, but also can check the PID for
validity.  But this doesn't work well either: PIDs are stored in diverse formats that change with every new release
(short, integer, long, or string in any of various formats).  If the
reading program does not follow the same convention as the writing
program, it can diagnose a valid PID to be invalid, and therefore not
honor the lock. PIDs recycle.  If the lockfile was created by PID 1234, which later
crashed without removing the lockfile, and then a new process 1234 exists
a the time the lockfile is checked, the lockfile will be improperly taken
as valid, and access to the device denied unnecessarily. Several techniques address the problem of multiple names for the same device: Multiple lockfiles.  For example, if the user opens a device through
a symlink, a lockfile is created for both the symlink name and the true name
(obtained fromreadlink()).  However, when multiple drivers are
installed for the same device (e.g./dev/cua,/dev/cufa,
etc), this approach won't work unless all applications *know* all the
different names for the same device and make lockfiles for all of them, which
is obviously not practical. Lockfiles whose names are not based on the device name.  These
lockfiles generally have names like LK.inode/major/minor, where
inode, major, and minor are numbers, which will always be the same for
any physical device, no matter what its name.  This form of lockfile is
used in System V R4 and its derivatives, such as Solaris, UnixWare,
etc.  If lockfiles must be used (as opposed to, say, kernel-based
locks), this would seem to be the most effective form. Most versions of Unix were not designed to accommodate third-party
communications software; thus vendors of these Unix products feel no
compunction about changing lockfile conventions from release to release, since
they also change their versions of the cu, uucp, tip, etc, programs at the
same time to match.  And since the source code to these programs might not be
published, it is difficult for makers of third-party products like C-Kermit
to find out what the new conventions are.  It also forces release of new
versions of C-Kermit whenever the OS vendor makes a change like this. Some Unix vendors have taken a small step to simplify communications
application development for their products: the inclusion of lockfile routines
in the standard system C runtime libraries to shield the application from the
details of lockfile management (IBM AIX is an example).  When such routines
are used, communications applications do not need modification when lockfile
conventions change (although they will need recompiling if the routines are
statically linked into the application).  In the AIX example, the simple
function callsttylock(),ttyunlock(), andttylocked()replace hundreds of lines of ugly code in C-Kermit that
attempts to keep pace with every release of every Unix product over the last
20 years.  Inclusion ofttylock()code occurs when: is included in the CFLAGS. If such routines are available, they should be used.  The rest of this section
applies when they are not. To fit in with UUCP and other Unix-based serial-port communication software,
C-Kermit must have the same idea as your system's uucp, cu, and tip programs
about what the UUCP lock directory is called, what the lockfile itself is
called, and what its contents should be.  In most cases, C-Kermit
preprocessor flags create the appropriate configuration at compile time if
the appropriate makefile target was used (seeckutio.c).
The following CFLAGS options can be used to override the built-in
configuration: (NOTE: The triple quoting assumes this is a ""top-level"" make entry, and not a
make entry that calls another one.) When theLK.inode.major.minorform is used, a single lockfile
is enough.  Otherwise, a single lockfile rarely suffices.  For example, in
Linux, it is common to have a/dev/modemsymbolic link to an actual
dialout device, like/dev/cua0or/dev/ttyS0, whose purpose
is to hide the details of the actual driver from the user.  So if one user
opens/dev/modem, a lockfile calledLCK..modemis created,
which does not prevent another user from simultaneously opening the same
device by its real name. On SCO Unix platforms, we have a slightly different problem: the same device
is, by convention, known by ""lowercase"" and ""uppercase"" names, depending on
whether it has modem control.  So by convention, communications programs are
supposed to create the lockfiles based on the lowercase name.  But some
programs don't follow this convention.  In HP-UX, we have several different
names for each serial device.  And so on. For this reason, on platforms where the LK.inode.major.minor form is not used,
C-Kermit also creates a secondary lockfile (which is simply a link to the
first) if: The given device name is a symbolic link.  The secondary link is based
on the device's real name. On SCO: The device name is not a symbolic link, but it contains uppercase
letters.  The primary link is based on the lowercase name; the secondary
link is based on the name that was given. On HP-UX: The device name starts with ""cu"".  The primary link is based on
the name that was given; the secondary link is based on the corresponding
""ttyd"" device, e.g. ""LCK..cua0p0"" and ""LCK..ttyd0p0"". NOTE: symlinks are not handled in HP-UX. Honey DanBer (HDB) UUCP, the basis of many UUCP implementations,
has two characteristics: Lockfiles are kept in/usr/spool/locks/(usually). A lockfile contains the process id (pid) in ASCII, rather than as an int. Non-HDB selections assume the lockfile contains the pid in int form (or,
more precisely, in PID_T form, where PID_T is either int or pid_t, depending
on your system's C library and header files).  (b), by the way, is subject
to interpretation: the numeric ASCII string may or may not be terminated by
a newline, it may or may not have leading spaces (or zeros), and the number
of leading spaces or zeros can differ, and the differences can be significant. Even if you build the program with the right lockfile option, you can still
have problems when you try to open the device.  Here are the error messages
you can get from SET LINE, and what they mean: ""Timed out, no carrier.""  This one is not related to lockfiles.  It
means that you have SET CARRIER ON xx, where xx is the number of seconds
to wait for carrier, and carrier did not appear within xx seconds.
Solution: SET CARRIER AUTO or OFF. ""Sorry, access to lock denied.""  Kermit has been configured to use
lockfiles, but(a)the lockfile directory is write-protected against
you, or(b)it does not exist.  The ""access to lock denied"" message will 
tell you the reason.  If the directory does not exist, check to make
sure Kermit is using the right name.  Just because versionnof your
Unix used a certain lockfile directory is no guarantee that versionn.1does not use a different one.  Workaround: ask the system
administrator to install a symbolic link from the old name to the new name.
Other solutions: (see below) ""Sorry, access to tty device denied.""  The tty device that you specified
in your SET LINE command is read/write protected against you.
Solution: (see below) ""Sorry, device is in use.""  The tty device you have specified is
currently being used by another user.  A prefatory message gives you
an ""ls -l"" listing of the lockfile, which should show the username of
the person who created it, plus a message ""pid = nnn"" to show you the
process id of the user's program.  Solutions: try another device,
wait until the other user is finished, ask the other user to hurry up,
or ask the system manager for help. ""Sorry, can't open connection:reason"".  The device cannot be
opened for some other reason, which is listed. ""sh: /usr/lib/uucp/acucntrl: not found"".  This means your Kermit
program was built with the-DACUCNTRLswitch, but your computer
system does not have the BSD 4.3 acucntrl program.  Solution: install the
acucntrl program if you have it, or rebuild Kermit without the-DACUCNTRLswitch. There are two solutions for problems(b)and (c), both of which involve
intervention by your Unix system administrator (superuser): Have the superuser change the permission of the lockfile directory and
to the tty devices so that everyone on the system has read/write
permission.su% chmod 777 /usr/spool/locks (or whatever the path is)
su% chmod 666 /dev/ttyXXOne risk here is that people can write lots of junk into the lockfile
directory, delete other people's files in the lockfile directory, and
intercept other people's data as it goes in and out of the tty device.
The major danger here would be intercepting a privileged password.  Of
course, any user could write a short, ordinary, unprivileged program to
do exactly the same thing if the tty device was world read/writeable.
The other risk as that telephone calls are not controlled -- anybody on
your system can make them, without having to belong to any particular
group, and this could run up your phone bill. Use groups to regulate access.  Normally the lockfile directory and
and the dialout devices will have the same group (such as uucp).  If
so, then put everybody who's allowed to dial out into that group, and
make sure that the lockfile directory and the tty devices have group
read AND write permission.  Example:su% chmod 770 /usr/spool/locks (or whatever the path is)
su% chmod 660 /dev/ttyXXUser whatever tool is available on your platform to add users to
the appropriate group (e.g. edit the/etc/groupfile). Have the superuser change Kermit to run setuid and/or setgid to the owner
and/or group of the lockfile directory and the tty devices if necessary),
typically uucp (seenext section), but NOT root.  Example:su% chown uucp kermit- or -chgrp uucp kermit
su% chmod u+s kermit (setuid)- or -chmod g+s kermit (setgid)and then make sure the lockfile directory, and the tty devices, have
owner (setuid) and/or group (setgid) write permission.  For example:su% chmod o+rwx /usr/spool/uucp
su% chown uucp /dev/ttyXX ; chmod 600 /dev/ttyXXIn some cases, the owner and group must be distinct; the key point is
that read/write access is required to both the UUCP lockfile directory
and the tty itself. One risk here is that people can write lots of junk into the lockfile
directory, delete other people's files in the lockfile directory, and
intercept other people's data as it goes in and out of the tty device.
The major danger here would be intercepting a privileged password.  Of
course, any user could write a short, ordinary, unprivileged program to
do exactly the same thing if the tty device was world read/writeable.
The other risk as that telephone calls are not controlled -- anybody on
your system can make them, without having to belong to any particular
group, and this could run up your phone bill. User whatever tool is available on your platform to add users to
the appropriate group (e.g. edit the/etc/groupfile). and then make sure the lockfile directory, and the tty devices, have
owner (setuid) and/or group (setgid) write permission.  For example: In some cases, the owner and group must be distinct; the key point is
that read/write access is required to both the UUCP lockfile directory
and the tty itself. If you make C-Kermit setuid or setgid to root, it refuses to run: Example: requires suid uucp to get read/write access on/dev/cua3and sgid to
get read/write access on/var/lock(since you can't set Kermit's uid
or gid to root). For the lockfile mechanism to achieve its desired purpose -- prevention of
access to the same tty device by more than one process at a time -- ALL
programs on a given computer that open, read or write, and close tty devices
must use the SAME lockfile conventions.  Unfortunately, this is often not the
case.  Here is a typical example of how this can go wrong: In SunOS 4.0 and
earler, the lockfile directory was/usr/spool/uucp; in 4.1 it was
changed to/var/spool/locksin the quest for political correctness.
Consequently, any third-party programs (such as C-Kermit) that were not
modified to account for this change, recompiled, and reinstalled, did not use
the same lockfiles as uucp, tip, etc, and so the entire purpose of the
lockfile is defeated. What if your Unix system does not have UUCP installed?  For example, you have
a Unix workstation, and you do not use uucp, cu, or tip, or UUCP was not even
supplied with your version of Unix (QNX is an example).  In this case, you
have two choices: If there may be more than one person running Kermit at the same time,
competing for the same tty device, then create a special lockfile directory
just for Kermit, for example,/usr/spool/kermit, and make sure you
have read/write access to it.  Then add the following to your makefile target
CFLAGS, as shown earlier:-DLOCK_DIR=\\\""/usr/spool/kermit\\\"" If you are the only user on your workstation, and no other processes will
ever be competing with Kermit for the dialout tty device, then add
-DNOUUCP to your makefile target's CFLAGS and rebuild Kermit."
http://kermitproject.org/ckuins.html,11. RUNNING UNIX C-KERMIT SETUID OR SETGID,"Even if you don't intend to run C-Kermit setuid, somebody else might come
along and chown and chmod it after it has been built.  You should be sure that
it is built correctly to run setuid on your system.  For POSIX and AT&T
Unix based versions, you don't have to do anything special. For 4.2 and 4.3 BSD-based Unix versions, you normally need not add anything
special to the makefile.  The program assumes that thesetreuid()andsetregid()functions are available, without which we cannot switch
back and forth between real and effective uids.  If ""make"" complains that_setreuidor_setregidis/are not defined, add-DNOSETREUto CFLAGS.  In this case it is very likely (but not
certain) that you cannot protect ttys and lockfiles against people and have
them run Kermit setuid. If make does not complain about this, you should find out whether your BSD
version (4.3 or other systems like SunOS 4.x that claim to include BSD 4.3
compatibility) includes the saved-setuid feature (see long notes under edit
146 in ckc178.upd).  If it does, then add-DSAVEDUIDto CFLAGS. C-Kermit for 4.4BSD-based systems automatically usesete[ug]id().
Seeckutio.c. If you have a version of Unix that is not BSD-based, but which supplies thesetreuid()andsetregid()functions, and these are the only
way to switch between real and effective uid, add-DSETREUIDto your
makefile target. If you have a version of Unix that does not allow a process to switch back and
forth between its effective and real user and group ids multiple times, you
probably should not attempt to run Kermit setuid, because once having given up
its effective uid or gid (which it must do in order to transfer files, fork a
shell, etc) it can never get it back, and so it can not use the original
effective uid or gid to create or delete uucp lockfiles.  In this case, you'll
either have to set the permissions on your lockfile directory to make them
publicly read/writable, or dispense with locking altogether. MORAL: Are you thoroughly sickened and/or frightened by all that you have just
read?  You should be.  What is the real answer?  Simple.  Serial devices --
such as ttys and magnetic tapes -- in Unix should be opened with exclusive
access only, enforced by the Unix kernel.  Shared access has no conceivable
purpose, legitimate or otherwise, except by privileged system programs such as
getty.  The original design dates from the late 1960s, when Unix was developed
for laboratory use under a philosophy of trust by people within shouting
distance of each other -- but even then, no useful purpose was served by this
particular form of openness; it was probably more of a political statement.
Since the emergence of Unix from the laboratory into the commercial market, we
have seen every vestige of openness -- but this one -- stripped away.  I'd
like to see some influential Unix maker take the bold step of making the
simple kernel change required to enforce exclusive access to serial devices.
(Well, perhaps not so simple when bidirectionality must also be a goal -- but
then other OS's like VMS solved this problem decades ago.)"
http://kermitproject.org/ckuins.html,12. CONFIGURING UNIX WORKSTATIONS,"On desktop workstations that are used by only the user at the console
keyboard, C-Kermit is always used in local mode.  But as delivered, C-Kermit
runs in remote mode by default.  To put it in local mode at startup, you can
put a SET LINE command in your.mykermrc. You can also build C-Kermit to start up in local mode by default.  To do this,
include the following in the CFLAGS in your makefile target: where ttyxx is the name of the device you will be using for communications.
Presently there is no way of setting the default modem type at compile time,
so use this option only for direct lines. C-Kermit does not work well on certain workstations if it is not run from
within a terminal window.  For example, you cannot start C-Kermit on a NeXT by
launching it directly from NeXTstep.  Similarly for Sun workstations in the
Open Windows environment.  Run Kermit in a terminal window."
http://kermitproject.org/ckuins.html,13. BIZARRE BEHAVIOR AT RUNTIME,"See the ""beware file"", The program starts, but there is no prompt, and certain operations don't work
(you see error messages like ""Kermit command error in background execution"").
This is because Kermit thinks it is running in the background.  Seeconbgt()inckutio.c.
Try rebuilding Kermit with: added to your CFLAGS.  If that doesn't help, find out the actual data type
for pids (look intypes.hor similar file) and use it in place of
""pid_t"", for example: Unexplainable and inappropriate error messages (""Sockets not supported on this
device"", etc) have been traced in at least one case to a lack of agreement
between the system header files and the actual kernel.  This happened because
the GNU C compiler (gcc) was being used.  gcc wants to have ANSI-C-compliant
header files, and so part of the installation procedure for gcc is (or was) to
run a shell script called ""fixincludes"", which translates the system's header
files into a separate set of headers that gcc likes.  So far so good.  Later,
a new version of the operating system is installed and nobody remembers to run
fixincludes again.  From that point, any program compiled with gcc that makes
use of header files (particularlyioctl.h) is very likely to
misbehave.  Solution: run fixincludes again, or use your system's regular C
compiler, libraries, and header files instead of gcc."
http://kermitproject.org/ckuins.html,14. CRASHES AND CORE DUMPS,"If C-Kermit consistently dumps core at the beginning of a file transfer, look
in SHOW FEATURES forCKREALPATH.  If found, rebuild with-DNOREALPATHand see if that fixes the problem (some UNIXes haverealpath()but it doesn't work). Total failure of the Kermit program can occur because of bad memory
references, bad system calls, or problems with dynamic memory allocation.
First, try to reproduce the problem with debugging turned on: run Kermit with
the-dcommand-line option (for example, ""wermit -d"") and then
examine the resulting debug.log file.  The last entry should be in the
vicinity of the crash.  In VMS, a crash automatically produces a ""stack dump""
which shows the routine where the crash occurs.  In some versions of Unix, you
can get a stack dump with ""adb"" -- just type ""adb wermit core"" and then give
the command ""$c"", then Ctrl-D to quit (note: replace ""wermit"" by ""kermit"" or
by the full pathname of the executable that crashed if it is not in the
current directory).  Or use gdb to get a backtrace, etc. In edit 186, one implementation, UNISYS 5000/95 built with ""make sys5r3"", has
been reported to run out of memory very quickly (e.g. while executing a short
initialization file that contains a SET DIAL DIRECTORY command).  Debug logs
show that malloc calls are failing, reason unknown.  For this and any other
implementation that gives error messages about ""malloc failure"" or ""memory
allocation failure"", rebuild the program *without* the-DDYNAMICCFLAGS definition, for example: As of edit 169, C-Kermit includes amalloc()debugging package which
you may link with the Kermit program to catch runtime malloc errors.  See the
makefile entries for sunos41md and nextmd for examples of how to select malloc
debugging.  Once you have linked Kermit with the malloc debugger, it will halt
with an informative message if a malloc-related error occurs and, if possible,
dump core.  For this reason, malloc-debugging versions of Kermit should be
built without the ""-s"" link option (which removes symbols, preventing analysis
of the core dump).  You have several ways to track down the malloc error:
Analyze the core dump with adb.  Or reproduce the problem with ""log debug"" and
then look at the code around the last debug.log entry.  If you have gcc, build
the program with ""-g"" added to CFLAGS and then debug it with gdb, e.g. Watchpoints are especially useful for finding memory leaks, but they make
the program run about a thousand times slower than usual, so don't set them
until the last possible moment.  When a watchpoint is hit, you can use the
""where"" command to find out which C-Kermit source statement triggered it. If you have the Pure Software Inc ""Purify"" product, see the sunos41cp makefile
entry for an example of how to use it to debug C-Kermit."
http://kermitproject.org/ckuins.html,15. SYSLOGGING,"""Syslogging"" means recording selected information in the system log via the
Unixsyslog()facility, which is available in most Unix versions.
Syslogging is not done unless C-Kermit is started with: on the command-line, wherenis a number greater than 0 to indicate
the level of syslogging.  SeeSection 4.2of theIKSD Administrator's
Guidefor details. Obviously you can't depend on users to include--syslog:3(or
whatever) on the command line every time they start C-Kermit, so if you want
certain kinds of records to be recorded in the system log, you can build
C-Kermit with forced syslogging at the desired level; for example, to record
logins and dialouts: Levels 2 and 3 are the most likely candidates for this treatment.  Level 2
forces logging of all successful dialout calls (e.g. for checking against or
phone bills), and level 3 records all connections (SET LINE or SET HOST /
TELNET / RLOGIN, etc) so you can see who is connecting out from your system,
and to where, e.g. for security auditing. Level 2 and 3 records are equivalent to those in the connection log; see theC-Kermit 7.0
Supplement)
for a detailed description of the connection log."
http://kermitproject.org/ckuins.html,16. BUILDING SECURE VERSIONS OF C-KERMIT 8.0,"C-Kermit 7.0 and later may be built with Kerberos(TM) and/or SRP(TM) (Secure
Remote Password) and/or SSL/TLS security for strong authentication and
encryption of Internet connections.  These security methods require external
libraries that, in their binary forms, are restricted from export by USA law.
See theKermit
Security Reference) for details.  C-Kermit binaries themselves are
likewise restricted; the C-Kermit binaries that are available for public
download on the Internet are not allowed to contain the security options. Sample makefile entries are provided for Linux and many other operating 
systems.  A list of secure makefile entries is included in the Makefile.
Complete instructions on building C-Kermit 8.0 with MIT Kerberos; 
Secure Remote Password; and/or OpenSSL can be found in theKermit Security Reference. SSL/TLS and Kerberosbuilds
are increasingly problematic with the “deprecation” of DES.
There is code to detect the presence or absence of DES in the OpenSSL
builds, but it doesn't always work because sometimes the SSL libraries are
present but routines are missing from them. First of all remember that if your SSL and/or Kerberos header files
and libraries are not in the default place, you'll need to override the
assumed paths.  To find out what the default places are type ""make show"",
e.g.:[~/kermit]make showprefix=/usr/local
srproot=/usr/local
sslroot=/usr/local
manroot=/usr/local
K4LIB=-L/usr/kerberos/lib
K4INC=-I/usr/kerberos/include
K5LIB=-L/usr/kerberos/lib
K5INC=-I/usr/kerberos/include
SRPLIB=-L/usr/local/lib
SRPINC=-I/usr/local/include
SSLLIB=-L/usr/local/ssl/lib
SSLINC=-I/usr/local/ssl/include
[~/kermit] You can override any or all of these
by putting assignments on the 'make' command line; examples:make linux+krb5 \
 ""K5INC=-I/usr/include/"" \
 ""K5LIB=-L/usr/lib64/""

make solaris9g+ssl \
  ""SSLLIB=-L/opt/openssl-0.9.8q/lib"" \
  ""SSLINC=-I/opt/openssl-0.9.8q/include""Or by setting and exporting environment variables prior to giving the 'make'
command, as in this example in which (after Beta.01 was uploaded) C-Kermit
was successfully linked with OpenSSL 1.0.0d, which was installed alongside
OpenSSL 0.9.8r on the same computer.  Note the use of the '-i'
option instead of '-I' to force gcc to include the right header
files (thanks to Nelson Beebe for this):export PATH=/usr/bin:$PATH
export SSLINC=-isystem/usr/include
export ""SSLLIB=-L/usr/lib -Wl,-rpath,/usr/lib""
make linux+ssl-iis explained in 'man gcc'; there is achangein what-Idoes that could have ramifications for
many makefile targets, not just Kermit.  And-Wland-rpathare explained in 'man ld'; the idea is build a binary
from which useful reports can be obtained with ldd. Building with OpenSSL versions prior to 0.9.7 doesn't work, even though
C-Kermit is designed to work with both the old and new versions.  This could
probably be fixed if anybody cares. If a Kerberos or SSL build fails at link time because des_ecb3_encrypt,
des_random_seed, and/or des_set_odd_parity come up missing, redo the build
with-UCK_DES:make netbsd+krb5+ssl \
 ""K5INC=-I/usr/local/include"" \
 ""K5LIB=-L/usr/local/kerblib"" KFLAGS=-UCK_DESI suppose all the SSL and Kerberos targets could be recoded to figure this
out automatically (i.e. that DES is installed but with some entry points
missing), but it wouldn't be pretty. Different Kerberos and OpenSSL distributions can be installed with different
options; certain libraries might be missing or named differently (for
example, libgssapi vs libgssapi_krb5).  Some, but not all, of the C-Kermit
makefile targets have been fixed to take some of these variations into
account by testing for them, most notably the linux ones, linux+ssl,
linux+krb5, and linux+krb5+ssl.  Probably every target that builds with
OpenSSL or Kerberos needs the same treatment but I won't have time. Why doesn't C-Kermit just use Autoconf?  Mainly because the makefile is
full of targets for platforms that don't have Autoconf or any other tool
like it.  (Another reason is that I've always preferred that Kermit have the
least dependencies possible on external toolsets.)  Perhaps certain targets
could be converted to use them, especially Linux because there are so many
variations among distributions and versions.

Anybody who wants to make, say, an Autoconf-based Linux target, be my guest,
but bear in mind that one Linux target is supposed to work for all versions
and distributions of Linux on all platforms.  Well, one target for Linux by
itself, another for Linux with OpenSSL, another for Linux with Kerberos 5,
and another for Linux with Kerberos 5andOpenSSL.  Each of these is
supposed to work on any Linux version with any version of Kerberos 5
or OpenSSL. Or by setting and exporting environment variables prior to giving the 'make'
command, as in this example in which (after Beta.01 was uploaded) C-Kermit
was successfully linked with OpenSSL 1.0.0d, which was installed alongside
OpenSSL 0.9.8r on the same computer.  Note the use of the '-i'
option instead of '-I' to force gcc to include the right header
files (thanks to Nelson Beebe for this): I suppose all the SSL and Kerberos targets could be recoded to figure this
out automatically (i.e. that DES is installed but with some entry points
missing), but it wouldn't be pretty."
http://kermitproject.org/ckuins.html,17. INSTALLING C-KERMIT AS AN SSH SERVER SUBSYSTEM,"This requires C-Kermit 8.0.206 or later and an SSH v2 server.  If you list
C-Kermit as a Subsystem in the SSH v2 server configuration file (as, for
example, SFTP is listed), users can make SSH connections direct to a Kermit
server as explained here: The name and location of the SSH server configuration file depends on your
platform, which SSH product(s) you have, etc.  C-Kermit itself must be
referred to in this file as ""kermit-sshsub"".
On the host, install the C-Kermit 8.0.211 binary in the normal way.  Then, in
the same directory as the C-Kermit binary, make a symbolic link: (Note: the ""make install"" makefile target does this for you.)
Then in the sshd configuration file, add a line: (where/some/pathis the fully specified directory where the symlink
is.)  This is similar to the line that sets up the SFTP
subsystem. Example: The mechanics might vary for other SSH servers; ""man sshd"" for details. The
method shown here is used because the OpenSSH server does not permit the
subsystem invocation to include command-line options. C-Kermit would have no
way of knowing that it should enter Server mode if it were not called by a
special name. [Top]
[Contents]
[C-Kermit Home]
[C-Kermit 9.0 Overview]
[Kermit Home]"
http://www.columbia.edu/~fdc/family/frankfurt.html,"Frankfurt am Main, Germany, 1959-61","Also see (onsite)... Screenshots fromBerlin Express(1948 - Frankfurt rubble + IG Farben building) Miscellaneous Frankfurt Photos(from various sources) Color photos of Frankfurt 1959-61(by my father) Frankfurt Photos 1960-62 from Robert Paul Frankfurt Photos 1958 by Col. Clarence
 E. Read(new March 2022) Platenstraße area 2005 by Beni
Calchera Berlin gallery 1959(pre-Wall) Berlin gallery 1961(with Wall,
from Robert Paul) Focus, the 1960-61 Frankfurt
  American High School Yearbook* Erinnerungen,
1958-59 Part B, (the Frankfurt section
startsHERE)* Erinnerungen,
1959-60 Part B, (the Frankfurt section
startsHERE)* Frankfurt High
 School Directory, 1959-60(Searchable sortable table) Frankfurt High
 School Directory, 1960-61(Searchable sortable table) German beer coasters from the 1960s My old Frankfurt website(which I'm
gradually moving to here) Family history:Army 1963-66(me in Germany again) Frankfurt American High
    School (fhs63-66.org) Alumni Association, 1963-1966 [disappeared] Frankfurt
American High School(frankfurthigh.com), 1967-1973 alumni site. Frankfurt
  American High School, public Facebook group Frankfurt
    American High School, Wikipedia US Army in Germany 1945-1991,
a massive online archive by Walter Elkins. USARMYGERMANY.COMcities listing for Frankfurt, Walter Elkins. The Abrams
Building and the American Experience in Frankfurt, a 30-minute video
production by the US Army V Corps with Hessischer Rundfunk on the occasion
of the withdrawal of US forces from the area in 1995.  It focuses on the
Farben building (which the Army called the Abrams building) from its first
conception in the 1920s, through its construction, its role in the War, the
bombing of Frankfurt, the allied entry into Frankfurt, Germans living in the
rubble, soup lines, the Sperrgebiet (when the whole area was enclosed in
barbed wire 1945-1948), the construction of American housing and
facilities, the Berlin Airlift, AFN Frankfurt, formation of the
Bundesrepublik in 1949, and the Cold War.  The first 20 minutes are mainly
archival footage from 1930s-50s, with a little borrowing from the 1948
film,Berlin Express.  The video ends
with interviews with Germans and Americans upon its closing in 1995,
includingLeslie Spear, who was born in Frankfurt in 1948, graduated from
Frankfurt High School in 1967, and liked it so much there that she stayed on
and worked in the Farben building until it closed in 1995; she died in
Frankfurt five years later. Im Herzen
    Frankfurts - Die neue Altstadt, HR Fernhsehen / Hessischer Rundfunk
(accessed 20 July 2021).  A 44-minute German-language video on the
2012-2018 reconstruction of a portion of the Frankfurt Altstadt, which
had been destroyed in the war.  Also seethis
Wikipedia page. Book: Lemza, John W,American
Military Communities in West Germany, McFarland & Company (2016). Book: Elkins, Walter, et
 al.Amerikaner
 in Heidelberg 1945-2013, Verlag Regionalkultur Heidelberg  (2014), ISBN
 978-3-89735-806-5 (auf Deutsch).  Kind of like a coffee-table book
 with lots of photos.  If only there were a book like this for Frankfurt! Online:
Dewey Arthur Browder,The
 Impact of the American Presence on Germans and German-American Grass
Roots Relations in Germany, 1950-1960, Louisiana State University and
Agricultural and Mechanical College PhD dissertation (1987), 274 pages.
Detailed social history of the early Occupation.  In 1987 Browder was a
Lieutenant Colonel in the US Army with a German wife. Film:Berlin
Express, Jacques Tourneur, 1948: extensive footage
of the Hauptbahnhof, the IG Farben building, and the ruins of Frankfurt.
I have a gallery of screenshotshere. Video:Frankfurt am Main
with Alemanizando: from half-timbered houses to the top of a skyscraper,
Youtube, about 7 minutes. Video:Don't visit
  Frankfurt's old quarter: let me show you an alternative(Höchst),
  youtube, about 6 minutes.  The Höchst castle housed theAFN Frankfurtradio studios when I lived in
  Frankfurt, and a group of us Frankfurt High School students broadcasted a
  live radio show from there every Tuesday."
http://www.columbia.edu/~fdc/family/frankfurt.html,Frankfurt 1959-61 narrative,"German
History in Documents and Images(GHDI), German Historical Institute,
Washington DC. Speech
by Soviet Premier Nikita S. Khrushchev, November 10, 1958 (GHDI). Peter J. Ortmann,Berlin
Mitte und die Welt - wie sie einmal war, ISBN 978-1-4452-6699-2 (2009),
668 pages. The Berlin
Crisis of 1961, Wikipedia (accessed 21 December 2019). Donald A. Carter,Forging
the Shield: The U.S. Army in Europe 1951-1962, U.S. Army Center for
Military History (2015), 513 pages, with photos: pp.363-368 and 403-427 on
the Berlin Crisis. Schulze, Inga,Warum Frank aus N.Y. nicht von Frankfurt lassen
kann,Frankfurter Neue Presse,
22 June 2006. The crossing was great fun, Dennis and I ran wild all over the whole ship.
Ping-pong was an interesting activity because the ship's rocking caused the
table to move out from under the ball.  Swimming in the small indoor pool
was even more interesting… Just when you dived in, the water would
slosh over to the other side of the pool and you'd land on the bare bottom
and then, while you tried to recover your senses a huge tidal wave came down
on top of you.  Dennis and I shared a cabin; he got seasick and I didn't.  I
was always playing tricks on him to make him feel even more seasick like in
the Fred and Ginger movieShall We Dance. German Resistence to Nazism, Wikipedia (accessed 17 February 2023):
""[D]uring the height of Nazi Germany, unlike the more coordinated efforts in
other countries ... [t]he German resistance consisted of small, isolated
groups that were unable to mobilize widespread political opposition."" Rebecca Donner,All
the Frequent Troubles of Our Days - The True Story of the American Woman at
the Heart of the German Resistence to Hitler, Little, Brown, and
Company (2021), 559pp.  The Woman wasMildred Harnack,
the author is her great-great-niece, and the resistence Die Rote Kapelle (theRed
Orchestra); it didn't end happily. Color photo from theHistoriches
  Museum Frankfurt,Frankfurt and Nazismsection
(accessed 17 February 2023). Walking to the Lebensmittel I was struck by how clean everything was.  In
those days, at least, Germans were fanatics about cleaning everything.  Every
morning early everybody would be outside sweeping the sidewalks and streets
with those old kinds of brooms like in fairy tales.  They also washed
sidewalks and steps and cobblestones.  Nobody left trash behind, not only
because they were neat but there wasn't much to discard. When I lived in Germany there were hardly any suburbs, and never had been.
You could be in a town or a city, or you could be in an agricultural area
or a forest.  The boundaries were sharp, you could literally step out of
the city into the country. When standing up in a crowded trolley, or even walking around in downtown
Frankfurt, I towered over all the Germans.  I guess this is why I never
thought of myself as short until recently (I was 5'6"" then, less now!).  In
countries like Germany and Japan, it was only the postwar generation that
started to grow taller, supposedly due to the influence of the American
occupation on their diets. Verkehrsplan der Stadt Frankfurt von 1956,
Verlag Richard Schwarz KG (1956), fromwww.tramfan-ffm.de.  Frankfurt map showing Straßenbahn (trolley) lines
as of 1956, which were very close if not identical to those of 1959-61,
before the subway and light-rail system was built starting in 1963 and
opening in 1968, replacing many of the trolley lines, with further expansion
later.  On this map the trolley routes are shown as solid blue lines with
blue numbers such as 17; at an Endstation (terminus) the number is circled.
The map does not show the Platenstraße housing area or the American high
school, indicating the ""plat"" content of the map (buildings, etc) dates from
1954 or earlier. Horst Bosetzky, Alfred Gottwald und einem Mann an der Kurbel,Noch
jemand ohne Fahrschein? Straßenbahnerinnerungen, Berlin,
Jaron Verlag (1997), about German trolleys in the postwar (but in Berlin,
not Frankfurt). Tiger
Bayof 1959
[Wikipedia]
was perhaps the beginning of the British New Wave,
precedingA
Taste of Honeyby two years; it's quite good,see
it!"
http://www.columbia.edu/~fdc/family/frankfurt.html,American Housing in Frankfurt,"The attic of each building was a huge empty room, 250 feet long, that could
be used for parties or playing; usually they had at least ping-pong tables.
And in the basement there was not only a common laundry room but also
private storage rooms for each apartment.  Every building had its own
parking area, free of course.  Almost all the American families had American
cars, but there were also a few small cars (mainly VWs) and one guy, a
sergeant and father of the pianist inour
band, had a 16-cylinder1937
Cord* in perfect condition; it would be worth millions now.  I saw it
every day, wish I had taken a picture of it.  Obviously it was a horrendous
gas-guzzler, but since we Amis paid only 10 cents a gallon for gas, so what?
Germans paid ten or twenty times that, and had 10 or 20 times less money.
Another Platenstraße resident had
aNash Healy(""America's first postwar sports car""), a combination Nash Rambler and
Austin-Healey. A notable feature of American military housing — both family housing
like Platenstraße and HiCog in Frankfurt and also barracks for unmarried
soldiers — was that (at least after about
1952) it was completely and totallyintegrated.  In contrast with
most civilian neighborhoods in the USA,
whereresidential segregationtends to predominate even where schools were
integrated because friends are most likely to live near each other. Platenstraße housing did not exist yet, as can be seen in the 1946 Große
Sperrgebiet map above and the 1954 aerial photo at right.  But by the end of
1956 both the street and the housing were fully
realized[5].  The apartments were constructed to
American specifications (bathrooms, closets, kitchens) by German contractors
and — like all American housing in Germany built before 1957,
including HiCoG — it was paid for out of German War Reparation
funds[11].  Platenstraße housing comprised 41
buildings with a total of 777 apartments, making it the largest US Forces
housing area in Frankfurt[4], and the same design
was used all over West Germany.  The units ranged in size from 80 to 115
square meters (861 to 1238 square feet).  Traditional construction, not
prefab, because had it been prefab it would have been called
Plattenstraße :-) (in German, Platte is a prefab panel and
Plattenbau is prefab construction).  The housing area is named after the
street that runs through it, which, in turn, is named after poet and
playwrightAugust von Platen-Hallermünde. When Platenstraße housing (along with Hügel, Von Steuben, and others in
Frankfurt) opened about 1955, the Römerstadt, Sperrgebiet, and other
requisitioned apartments were turned over to the City of Frankfurt and
displaced former tenants were free to move back into their old apartments,
and some did[16,17]. This was the second of three visits he made to Robert; on this one he is
accompanied by Czech/German actressVera Tschechowa(at left in the photo), only a few weeks before I arrived in Frankfurt. HiCoG is now now known by its traditional name, Carl-Schurz-Siedlung;
Americans still live and work there, this time those attached to the US
Consulate, and the buildings are being renovated
too[3].  Reputedly the new American acronym
for the former HiCoG buildings is AMCONGEN. Chadbourn, Dorothy, ""HICOG Houses Its
Employees"",HICOG Information BulletinNo.187, February 1951,
pp.19-23, unearthed by FHS veteran Dennis Healey in 2018
(see
Information Bulletin index 1945-1953). Modernisierung der Platensiedlung, Wohnungsbaugesellschaft ABG Frankfurt
Holding website, accessed 14 July 2021.  So far 650 new apartments have been
created. Germany,
eDiplomat website, accessed 14 July 2021: ""The Carl Schurz Siedlung is a
combined housing and office complex, conveniently located in Frankfurt and
within walking distance of both the Consulate Office Building and the RSC
[Regional Support Center]. Transportation to and from Consulate facilities
is not provided. The Siedlung has over 300 apartments in 25 three-story,
walk-up buildings. Each building has two stairwells with six apartments
sharing each stairwell ... Frankfurt is renovating and upgrading its
apartment buildings to improve facilities and institute energy-saving
measures.  This project is ongoing and while in progress, the flexibility of
housing assignments will be limited, as entire buildings need to be reserved
for renovation."" Platenstraße (Frankfurt am Main), Wikipedia.de, accessed 18 July 2021. Gregory A. Cagle,Scenes
from an Automotive Wonderland: Remarkable Cars Spotted in Postwar
Europe, McFarland & Company (2018): ""...it's parked in front of
our apartment building in the Platenstrasse American housing area in
Frankfurt on December 9, 1956.""  Later I found evidence that Platenstraße
opened in 1955: ""Die Housing Area Platenstraße war die Größte Wohnsiedlung
der Amerikanner in Frankfurt.  1955, zehn Jahre nach Kriegsende, zogen
die ersten US-Bürger dort ein..."" (Inga Schulze,Warum
Frank aus N.Y. nicht von Frankfurt lassen kann,Frankfurter Neue
Presse, 22 June 2006). Video:Frankfurter
 Projekt baut alten Häusern Zusatz-Stockwerke, n-tv Nachrichten,
 26 Juni 2019 (accessed 18 July 2021).  Early stages of redensification
 of ""Platenstraße North"".  It looks there is a lot of prefabrication
 involved so now maybe it's Plattenstraße after all! Video:Platensiedlung
aktuell, November 2020, ABG Frankfurt Holding,
Youtube (accessed 18 July 2021), shows
Platenstraße Nord"" (where I lived) with new upper stories, construction in
  progess. Video:Platensiedlung
aktuell April 2021, ABG Frankfurt Holding,
Youtube (accessed 18 July 2021), same thing five
months later. HALLO
    Platensiedlung!, Ruth Schlögl, Natalie Heger, Thyra Jones;
Forschungslabor Nachkriegsmoderne,
Architekturstudiengänge der Frankfurt University of Applied Sciences,
23 July 2021.
[Facebook]
[Instagram]
[Map]CLICK HEREto hear the Audio Walk (37 minutes,
in German) Donald A. Carter,Forging
the Shield: The U.S. Army in Europe 1951-1962, U.S. Army Center for
Military History (2015), section ""Settling in for the Long Haul"", pp.127-137:
the story of behind dependent housing.  Briefly, it was for both the morale
of the soldiers and to convince the Soviets that the US occupation was not
a prelude to invasion. Robert P. Grathwol and Donita
M. Moorhus,Building
for Peace: U.S. Army Engineers in Europe 1945-1991, Center of Military
History and Corps of Engineers, United States Army Washington, D.C. (2005),
pp.96-100. Brian McAllister Linn,Elvis's
Army, Harvard University Press (2016), pp.45-46. Dewey Arthur Browder,The
 Impact of the American Presence on Germans and German-American Grass
Roots Relations in Germany, 1950-1960, Louisiana State University and
Agricultural and Mechanical College PhD dissertation (1987), pp.74-79. Klaus Gülden,Die
 Beschlagnahme der Römerstadt-Siedlung durch US-Truppen Ende März 1945,heddernheim.de(accessed 28 August 2021). Von Clemens Dörrenberg,Plötzlich mussten sie das Haus verlassen,Frankfurter Rundschau,
14 March 2016 (accessed 28 August 2021). Heidi Laird,The

Frankfurt Kitchen: Forty-One Stories of Growing Up in Post World War II West
Germany, Fulton Books (2021), pp.92-93.  The author, a German born
in Heidelberg in 1941, lived in a Römerstadt apartment for several years
starting in 1949, when it was full of American families; she notes that the
Americans gradually started moving out that same year.  ""Frankfurt Kitchen""
(Frankfurter Küche) refers to
theunique Bauhaus
design of the Römerberg's kitchens.  Laird eventually emigrated to the
US and became a clinical psychologist in San Benardino, California.
Read an interview with herhere. James Quigley, ""Land acquired for
1,834 New NACom Billets"",European Stars and Stripes, 19 May
1954, p.2: ""Northern Area Command recently completed the acquisition of land
in the Frankfurt area that will be used for housing construction projects
scheduled to begin soon.  The land is located in the Gibbs, Drake, Edwards,
and IG Farben Complex areas, as well as adjacent to the HICOG housing
development and the Hoechst cemetery.  Plans call for the construction of
103 buildings which will include 1,854 housing units.  The acquisition of
suitable land for housing construction will now allow the US Army to release
sooner German housing currently under requisition."" Andrea Janssen,Das
    große amerikanische Sperrgebiet in Frankfurt April 1945 bis Juni 1948,
Stiftung Polytechnische Gesellschaft (sptg.de, accessed 4 September 2021). Stadtplan S8 1/498 Frankfurt/Main
in Hyperboloid-Projektion mit Kilometernetz, Falk-Verlag (1946). Adam
R. Seipp,""This
Land Remains German"": Requisitioning, Society, and the US Army,
1945–1956, Central European History 52, Issue 3 (September 2019),
pp.476-495 (restricted access): A detailed account of requisitioning of
  German dwellings and other property by the American occupation. 1945 in Frankfurt: Wie Frankfurter das Kriegsende erlebten,
Frankfurter Rundschau, 10 April 2015. Ernst May,
Wikipedia (accessed 24 November 2021). Some of the FHS kids in 9th grade were hoodlums like in Blackboard Jungle,
with leather jackets and collars turned up and ducktails and
switch­blades but there was never actually any fighting.  My friend Joe
Caranci always spent Geography period carving things into his desk with his
switchblade and one day when the teacher said something about it, he cut off
the teacher's necktie and threw his briefcase out the window (that was my
only Blackboard Jungle class).  And yes, there was a Geography class; in
those times everybody learned what all the countries in the world were, and
something about them. Speaking of rotating,
I quickly realized that another big difference between a military base and
everywhere else I had ever lived is how easy it is to make friends.  Because
kids are so diverse, there wasn't the kind of cliquishness I recall from my
junior high school in suburban Virgina.  And because nobody stayed in the
same place more than two or three years, military brats grew up learning how
to make friends rapidly and how to be openminded and honest and not play
games.  I never felt more comfortable with people in my life than I did
there, and never had so many friends, not before, not since. Another facet of life as a kid on a military base is how the
parents are so conscious of rank: who's more important than who, who can
socialize with who, who can go to which club (Officers, NCO, EM)...
whereas the kids instinctively rebelled against all that and we all
developed a healthy antiauthoritarian streak.  For example if a General
found out his daughter was dating a Sergeant's son he would almost certainly
order her to break it off and that would only make the relationship stronger. Medical care was free and universal, school was free and excellent, and
housing was free or heavily subsidized.  Ordinary working people of all
ranks could live modest, comfortable, and relatively secure and stress-free
lives without being millionaires and billionaires or working 100 hours a
week. Our parents (or more often than not, just our fathers) did their
40-hour-a-week jobs (and we did our jobs by going to school), and the
government took care of us.  No wonder we liked it so much over there, it
was Socialism! [1] In January 2024Pam Ivescame across a two-page
1960Army Timesarticle[2]
clipped by her parents that describes the Frankfurt base facilities in great
detail.  If you think it sounds like Paradise on Earth, you're not
far wrong! Strictly
  speakingsocialism
  includes public ownership of the means of production; the Frankfurt
  Army base experience was more like ""market socialism"" where private
  companies exist, but the essentials of life such as housing, health care,
  education, and secure retirment are provided by the government at no or
  low charge.  This was the dominant form of government in postwar Europe
  and Scandinavia and, to some extent, other countries like Canada and
  New Zealand, but lately is eroding due to the wave of right-wing backlash
  sweeping the whole planet.  US military bases sometimes crossed the line
  into true socialism, like when the Army set up factories in Germany
  (and elsewhere) to produceice creamfor base residents. Guild, Hazel,""Frankfurt: Chicago on the Main,Army Times, 14 June 1960,
  pp.36-37. The Engs family returned to the USA at the end of the 1959-60 school year,
ending up in Fort Eustis VA, near Newport News; I visited them there in
1962.  Bob had a long and distinguished academic career and died in
2013 at age 69[12]. Frankfurt
  American High School, Wikipedia (accessed 31 March 2019). Wertsch, Mary
  Edwards,Military Brats,
Harmony Books and/or Brightwell Publishing (1991, 1996, 2006). Curtis, Marc,Growing
Up Military, CreateSpace (2009). Willis, William,Base
Jumping, William Willis Books (2013). Tuscott, Mary R.,Brats,
Dutton (1989). ""'Little
America' Fence in Frankfurt Seen Doomed"", George Bria, Schenectady
Gazette, 9 February 1948 (viausarmygermany.com).
Apparently the fence was up for only a bit more than a year (1947-48). Army
& Air Force Exchange Service, Europe, Walter Elkins'U.S. Army in Germanywebsite,
accessed 7 July 2020: The European Exchange System: ""The mission of EES is
service to the troops in Europe.  Basically, this means providing services
and goods at minimum costs and in the most pleasant, courteous, and
efficient manner possible.""—Col. Charles L. Redman, QMC, EES
Chief.  EES was responsible for PX's, commissaries, liquor stores,
snack bars, delis, laundries, dry cleaners, barber and beauty shops, photo
processing; watch, radio, and shoe repair; florists, tailor shops, photo
studios, gas stations, car repair garages, libraries, athletic fields,
service clubs, teen clubs, service shows, as well as central butchers,
bakeries, dairies, and ice cream plants (such asthe massive one in Grünstadt)
that supplied the commissaries and
snack bars.  There were also EES service stations and snack bars on the
Autobahns.  Also there were mobile PXs and snack bars for troops in the
field.  In Germany the large majority of employees at EES establishments was
German. The
      Bald Eagles Echo, Fall 1995:
26 pages devoted to the closing of Frankfurt High School and
the whole American base in Frankfurt. Julie Decker and Chris Chiel,Quonset
Hut, Princeton Architectural Press (2005). Memories from
Germany,American Overseas Schools
Historical Society.  I particularly enjoyed thestory
of an American teacher, Nancy Siler, who went to Germany on a troopship
in 1949. The
Loving Story, 1960s documentary about the Lovings. Dr Robert Francis ""Bob"" Engs Jr,
1943-2013, Find A Grave memorial by Allen Monasmith, 11 May 2014. GI-humor Frankfurt map from 1954 Frankfurt trolley tickets Montage of tickets An interesting facet of the American elementary and junior high schools was
thatGerman language instruction was given to all
students[16,17] in a required daily class.  My
younger brother Dennis took German at Frankfurt Elementary #1, as didRobert Paul(see report card), Greg Cagle, and other
slightly younger informants who were in Frankfurt the same time I was.
Similarly for American schools in France, but French instead of German.
German language was taught by Germans; one of my informants
has an autograph from ""Ruth Geise, Deine Deutschlehrer).  The same is true
for American elementary schools in elsewhere in Germany such as the one
in Kaiserslautern, confirmed by another informant who was there in the
late 1950s. At Frankfurt high school when I was there in 1959-61, Latin, German, French,
and (from Fall 1960)Russianwere offered as
electives.  Checking the1977-78
yearbookI see that Russian had been removed and Spanish added. The first Frankfurt High School (FHS) was at Am Bornheimer Hang 46 in
Bornheim, about 2.5 miles (3.8km) east of the Farben building.  It
was built in 1929-30 as the Friedrich-Ebert-Reformschule[1,2] and designed byErnst May, who was
also responsible for the revolutionary Römerstadt apartment
buildingsdescribed above.  This school building
was the first of its kind in Europe and drew visitors from many countries.
During the war it served as a military hospital, an officer's school, and
temporary housing for bombed-out families.  From May 1945 to September 1946
it was billets for American occupation troops.  It became Frankfurt's
American high school in Fall 1946 and served in that capacity through Spring
1954.[3]  A protected landmark, it's still
there as
theCharles-Hallgarten
Schule[4,13,14] for special-needs students,
grades 1-10. The city of Frankfurt was located in the US Army Northern Area Command
(NACOM), one of six Cold War commands in 1952-1965, covering a large part of
the American zone of Germany (which by then had also subsumed the French
Zone).  In addition to its military role, NACOM ""also act[ed] as landlord
and corner grocer, city administrator and recreation supervisor for the
complete community of servicemen, wives, children and civilians.  Along this
line there are [as of 1963] 82 chapels, 51 service clubs, 71 libraries, 74
theaters, 69 bowling lanes, 70 gymnasiums and 602 other sports
facilities. In addition there are 72 education centers for the American
community plus 45 elementary and high schools with an enrollment of 33,000.
There are 72 housing areas and 100,000 troop barracks spaces to maintain
plus providing utilities for more than 200 separate installations.  The 12
main posts directly under NACom are: Giessen, Frankfurt, Heidelberg,
Wuerzburg, Bamberg, Fulda, Hanau, Bad Kreuznach, Baumholder, Pirmasens,
Kaiserslautern and Karlsruhe. The 12 sub-posts are Mainz, Schweinfurt,
Darmstadt, Bad Hersfeld, Bad Kissingen, Wildflecken, Kassel, Gelnhausen,
Worms, Aschaffenburg, Kitzingen and Wertheim.""[8] Der Frankfurter Reformschulversuch 1921–1930, Institut für Stadtgeschichte,
frankfurt1933-1945.de (accessed 23 November 2021). Der Frankfurter Reformschulversuch 1930–1937, Institut für Stadtgeschichte,
frankfurt1933-1945.de (accessed 23 November 2021). Frankfurt
 American High School, wikipedia.com (accessed 23 November 2021). Charles-Hallgarten
School Am Bornheimer Hang, architecture.eu (accessed 23 November 2021). Federal
Republic of Germany Post Report, US Department of State, U.S. Government
Printing Office, 0-281-540-2013, April 1979.  Frankfurt am Main section:
pp.33-37.  This is written for consular personel and their families, where
housing, school, and other policies might differ from those for military
families. Memories
of Frankfurt Elementary #1, compilation 1946-1995, American Overseas
Schools Historical Society, entry by Erika and Kurt Rothe
(aoshs.com, accessed 25 November 2021). DODEA's 75 Year
History, dodea.edu (accessed 25 November 2021). Ralph Bennington, ""NACOM to Celebrate 11th Anniversary"",Stars
& Stripes, 30 November 1963. History of the Dependents School Service (DSS), Germany:
Those First Six Years (1946-1952), Department of Defense Education
Activity, dodea.edu (accessed 26 November 2021). The Dependents'
 School Program of the U.S. Army, Europe, 1946–1956,
Headquarters, United States Army, Europe, Historical Division (1958),
118 pages (non-searchable PDF).  Page 9 has the photo of the Elizabethan
School captioned ""The Elizabethan School—first American elementary
school in Frankfurt and headquarters of the Dependents' School Service"". Elisabethenschule (Frankfurt am Main), second.wiki
(accessed 26 November 2021). Elisabethenschule website(accessed 26 November 2021). Charles Hallgarten
Schulewebsite (accessed 26 November 2021). Charles
 Hallgarten Schule: Schulhaus(school building's history with photos,
accessed 26 November 2021). Video:Behind
Frankfurt American High School 2014, Otis Pate, Youtube, April 2014. Host Nation Studies: An International Language and Culture Program for U.S.
Elementary Students in Overseas Schools, International Journal for the
Historiography of Education (IJHE) Jahrgang 4 Ausgabe 5, October 2014
(abstract).  ""In 1946, the first U.S. schools for military dependents opened
  their doors in post-war Germany to provide education for children of
  American personnel on foreign soil. The school system, originally known as
  the 'Dependents School Service' (DSS), offered a special subject within
  its curriculum: Native German teachers were hired to teach the language
  and culture of the current host nation to U.S. elementary and
  middle-school students."" Yearbooks,
Frankfurt MS (formerly JHS) Archives, American Overseas Schools
Historical Society archives.  Not a complete set, but they reveal that the
school had several Germans teaching German, and no other languages were
taught.  The 1988 yearbook identifies the school as ""Frankfurt American
Junior High School which is a Department of Defense, Dependent School
located on Drake Kaserne, Homburger Landstrasse 381, 6 Frankfurt/Main or APO
New York 09039-0005"". ""Who
Runs the Best U.S. Schools? It May Be the Defense Department—
Schools for children of military members achieve results rarely seen in
public education"", New York Times, 10 October 2023. Howitzer Overshot Kills 15, Injures 27 at Grafenwoehr,Stars and Stripesvol.19 no.138, Saturday, 3 September 1960, page 1:
""Fifteen 3rd Armd Div soldiers were killed early Friday [September 2],
and 27 injured when an 8-inch howitzer shell with an incorrect powder
charge overshot its mark and landed in a camp area after a morning roll call
...  The shell smashed into three tents occupied by soldiers.  It tore
through one tent, exploded in the second, and sent fragments hurtling into
the third."" Little-known
Grafenwoehr accident remains vivid to those who lived it, nearly 60 years
later, Martin Egnash,Stars and Stripes, 1 September 2018: ""the
memory of that day lives on in the soldiers who were there.  Retired
Gen. Colin Powell ... was one of them."" Tragedy at Grafenwoehr in September, 1960, 3rd Armored Division History
 Foundation.  Includes list of fatalities. Artillery Accident of 1960:
The deadliest event in the history of the Grafenwoehr Training Area,
Johanna Pschierer, USAG Bavaria Public Affairs, 23 August 2018. 3rd

Armored Division, Cold War, Wikipedia (accessed 6 March 2021):
""Throughout the Cold War, the division headquarters company, the 503rd
Administrative Company, 503rd Adjutant General Company, and 503rd MP Company
were based at Drake Kaserne, with 143rd Signal Battalion and other support
units stationed across the street at Edwards Kaserne in Frankfurt
... subunits were based in other Kasernes [in Kirch-Goens, Butzbach,
Gelnhausen, Friedberg, and Hanau]"", which are all places where FHS students
lived (seedirectory). I often felt that my time in high school in Germany was the best time of my
life.  It was such an adventure to be in postwar Germany, still pockmarked
with the scars of war, still relatively poor, still full of people who had
been Nazis, and with Elvis stationed just down the street.  And on the base,
to be among people of all races, nationalities and social classes after
living in racial and economic segregation up until then.  And my first love,
Pam Ives. The time we went to Nürnberg we wandered around the city and stumbled onto
the Luitpoldhain, which is where big annual Nazi rallies were staged from
1933 to 1938.  Spooky! A Prom-related incident resulted in a bump in our relationship (my fault)
and before it could be fixed the school year ended and Pam's family rotated
back to the States, Pan Am Flight 73, Frankfurt to NYC, July 2, 1961 (just
after her 16th birthday).  I would have been devastated by this if it were
not for the fact that we were being rotated too!  A year prematurely, due to
a f**kup by my dad.  I was devastated anyway; back in
Virginia I missed her like crazy.  We stayed in touch by mail.  A year
later she was thinking about college, wanted to major in psychology, wanted
to come to the east coast somewhere but said her grades weren't good and
probably she would wind up at Iowa State (""Anything!  Anyplace!  Just to
leave home!""), wished we could talk about it and do the things we used to
do, and closed by telling me not to do anything crazy like getting married
 or... Joining the Army!  But then her
father was transferred to Fort Leavenworth and I left
forUVAat the same time, and then the Army,
andthenmy Mom left my Dad and my Dad lost the house — the
address Pam was writing to — so weliterallylost touch.
Forever.Or so it seemed! This is a piece of a German map from 1961 showing the part of Frankfurt we
inhabited.  Click on it to see a full size version with notations in pencil
that I made at the time.  At C-12 I have the Platenstraße housing area
circled and building numbers penciled in, plus I drew in the baseball field.
A line is coming out of 2231 showing the shortcut I used to take to school,
which is in the upper left of D-10 marked FHS, north-northwest of the IG
Hochhaus (I.G. Farben building, shown in red).  The Teen Club (TC) is on
Siolistraße right across from the school.  In E-11, WAC Circle at Adickes
Allee and Eschersheimer Landstraße is circled: the PX, Commissary, and big
Snack Bar.  Pam lived in Carl Schurz Siedlung, a.k.a. HiCoG; her house is
circled by the lower left corner of D-11.  Our hangouts are also indicated:
D'Angelo's is on Raimundstraße near Am Dornbusch indicated as DA's in D-12.
Kurt's (with the jukebox that
playedMilord) is
at bottom center of D-12.  Some other places I don't recall are indicated
there too: D.S. and 7-Up, then just below the lower right corner of the same
quadrant, the eat-in family Italian restaurant, Bologna.  Then going south
on Eschersheimer Landstraße (E-10 and E-9) was bar country: Stark's,
Frank's, Bodega's (indicated as BO's), Leon's, Torrero, and finally the
Straw Bar.  These were the places we could walk to.The Straw Bar, unlike the other rowdy dives just listed, was sedate and
civilized, owned by a nice lady.  Nobody knows why we called it the Straw
Bar; it wasn't labeled that way.  A bunch of us guys and girls would go
there and sit around a large round table playing Hearts all night, drinking
white Mosel Wein out of Römers (photo at left) rather than the customary
Bier in Steins, in deference to the ladies, much more refined and
sophisticated. We also frequented some other places not on the map, e.g. in Ginnheim.  The
next map shows the hangouts we went to by trolley. The Platenstraße area in Frankfurt was like Smurf Village; everybody lived
in one place and it was just a couple blocks from the high school and main
PX.  When you walked to school in the morning you'd bump into all your
friends.  You could go outside any time, around the corner to the ball field
bleachers (a popular hangout) or a couple more blocks to the Teen Club and
all your friends would be in one of those places or the other.  We'd just
hang out or decide to go somewhere together, there was no end of escapades
we could have in postwar Germany. Plus there were part-time jobs for teenagers, bagging groceries in the
Commissary for tips, setting pins in the base bowling alley for 10 cents a
frame, and working the concession stand at the movie theater.  In those days
bowling alleys and pool halls were everywhere.  I never bowled much, but I
played pool quite well, starting in the Teen Club up through Army discharge,
six years of solid pool playing.  After that I think I played pool 3 times
total, once with Granpa who used to be a pool hustler (I did pretty well,
but he won of course — this was at the marina
inKinapic). Before leaving the topic of Elvis, he was filming parts
ofGI Blueswhile I was there; there was some location shooting
near me.  This was kind of a joint Hollywood-Army production, and the Army
did things the Army way.  For example, painting the tires of Army Jeeps and
trucks black and painting the grass in front of Army buildings green.  I saw
this.  Just two years later I'd bedoingit. Before leaving the topic of the Armed Forces Network, it should be noted
that AFN Frankfurt played music of interest to teenagers only scant hours of
the day; there was also ""grown-up"" pop music, country music, religious
programming, ""music in the air"", Don McNeill's Breakfast Club, and so on.
The other alternative for rock & roll and rhythm & blues
wasRadio
Luxembourg, which broadcast our kind of music about five days a week,
only in the evening.  We thought it was a pirate station broadcasting from a
ship in international waters, and in fact sometimes it was.  Meanwhile,
there was a pretty serious jazz scene in Frankfurt,
asnoted above; in addition to the Jazz Keller and
Storyville, there was excellent jazz programming on the radio (Hessischer
Rundfunk, Jazz Intermezzo with Joachim L. Spieren) featuring highly regarded
Frankfurt cool-jazz groups like
theJutta Hipp
Quintetand various Mangelsdorff groupings[9]
(Albert
Mangelsdorffwrote Jazz Intermezzo's theme song ""Simone I""). Armed
    Forced Network, Europe, at Walter Elkin'smonumentalU.S. Army in Germanywebsite. The Story Of
American Forces Network (AFN)(video), The Big Picture, Army Pictorial
Center.  A 30-minute film from 1963 about the history of AFN in Europe; it
includes footage of the studio and record library where I worked in the
Höchst castle just outside of Frankfurt. On The Air Over There, AFN Europe:
Part 2 The Castle Years, 29-minute video about AFN Frankfurt at the
Höchst castle... End of the War, Nürnburg trials, Berlin Airlift, Elvis,
Beatles, Berlin Wall, JFK (there are three other parts to this series). Meria Petrich,Lost
    vinyl collection returned to AFN home,Northwest Guardian,
9 December 2011. American
Forces Network, Wikipedia, accessed 10 December 2018. American
Forces Network, German Wikipedia, accessed 10 December 2018. AFN Frankfurt,
Wikipedia, accessed 13 December 2022. GI
Blues, a very silly Elvis movie made while he was in the Army and
  partially filmed on base.  He sings a song in German (Muß i denn). Heidi Laird,The
Frankfurt Kitchen: Forty-One Stories of Growing Up in Post World War II
West Germany, Fulton Books (2021), Chapter ""The Höchst Palace"",
pp.245-262: Her experiences as a German girl listening to AFN Frankfurt in
postwar years and visiting the AFN studios. Michael J. Budds, ed.,Jazz
 and the Germans, Pendragon Press (2002). Dennis
  M. Spragg,The
Armed Forces Radio Service, Glenn Miller Archive, University of Colorado
at Boulder, September 2013. LP record,
Wikipedia (accessed 12 December 2021). On the street there were Bratwurst vendors, flame-grilled Bratwurst with
Brötchen and German mustard, and later on (when I was in
Army) there were a lot of Yugoslavian food stands and the things they
sold were called Ćevapčići
(phonetically chee-WOP-chi-chi) (Wikipedia)
and (phonetically) DZHI-vich, which were both super-spicy, I think this was
the first fiery-hot food I ever ate.  And then besides these, there were
Chinese and Italian restaurants that were uniformly excellent.  A sit-down
meal in a German restaurant never cost more than 4 Marks (one dollar) when I
lived there. Mr. Thompson left FHS in 1962 and died in 2009, about ten years
before he could have seenthese Youtube videos, which I know he'd have
enjoyed as much as I do!"
http://www.columbia.edu/~fdc/family/frankfurt.html,Family Trips while living in Frankfurt,"This was my first plane ride.  I remember looking out the window and
thinking East Germany looks the same as West Germany, just a lot of farms and
little towns.  But traveling across or over East Germany was a tricky
business, there could be no deviation from the approved route.  So…
At some point the pilot came back into the passenger cabin and saw Dennis,
who was a cute little 9-year-old, and asked him if he would like to fly the
plane.  Dennis said OK, my Dad said OK, so the pilot took him into the
cabin.  Next thing we knew this huge aircraft was peeling off to the
right and in a steep dive.  Then it recovered and the pilot, his face
drained of blood, brought Dennis back to his seat without a word. Landing at Tempelhof airport in Berlin was an adventure in itself.  The
airport was in the middle of the city and as the plane makes its descent
there are apartment buildings on both sides, sometimes so close you can
see in the windows.  Tempelhof (which dated from 1927 and claimed to be the
world's oldest operating commercial airport) lasted until 2008, when it was
closed and converted to a ""green space"". In Berlin I sawthe not-yet-walled-off
Brandenburg Gate, the burnt-out Reichstag, the 1936 Olympic Stadium (where the
swastikas had been chiseled out from under the eagles), the Soviet War
Memorial, and Spandau Prison where Rudolf Hess, Albert Speer, and Baldur von
Schirach were serving their Nürnberg sentences (Karl Dönitz had been
released several years before; Speer was released in 1966 and published
""Inside the Third Reich""; after Hess died in 1987, the prison was demolished
to prevent it becoming a shrine).  I saw the bust of Nefertiti at the Berlin
museum.  I crossed into East Berlin by myself because my father couldn't go
there and bought some snacks at a Trink­halle.  I paid with Deutschmarks
and got change inOstmarks made of
aluminum.  In the Stadium photo I'm standing where Hitler stamped his
feet when Jesse Owens won the 100 meters. I was still in Germany when the Berlin wall went up, 13 August 1961.  I was
riding in car on the Autobahn with some people (can't remember who or why),
the radio was tuned to AFN, there was a newsflash. Video:Berlin 1945 in
  color, Youtube (7 minutes, silent). Berlin
    1961-62, photos from Robert Paul, a Frankfurt Elementary schoolmate
    of my brotherDennis, who visited Berlin in
    1961 and again in 1962 with his family. Stunde Null(Zero Hour), early postwar Germany and Berlin, Wikipedia, accessed 25
February 2020. Book: Robert Grathwol and Donita Moorhus,Berlin
and the American Military: A Cold War Chronicle,
New York University Press, Second Edition (1999). Book: Hildegard
Knef,The
Gift Horse, McGraw-Hill (1971).  Life in Berlin in the Nazizeit and
the early postwar: an intense, fascinating, and unique narrative.  Out of
print; used copies can be found at Amazon, Alibris, and EBay.  It's better
in the original German, if you can read it (and find it),
asDer
Geschenkte Gaul. Hildegard Knef,
brief biography at theDEFA Film
Libraryat the University of Massachusetts. Book: Horst Bosetzky,Der
 Kalte Engel – dokumentarischer
Kriminalroman aus dem Nachkriegs-Berlin, Berlin, Jaron Verlag
(2002).  Highly detailed descriptions of 1949-50 East and West Berlin.
Also available in English asCold
Angel: Murder in Berlin 1949. Victor Grossman,The Wall 30 Years Later, November 2019.  Was
East Germany really as bad as all that? Victor Grossman books,
a review by me of two books about East Germany by Victor Grossman. Trümmerfilm(Rubble films), Wikipedia, accessed 25 February 2020. Film:Die
Die Mörder sind unter uns(1946), the first postwar German film and
the first Trümmerfilm (rubble film), shot in the Soviet Zone of Berlin and
starring Hildegard Knef and Ernst Wilhelm Borchert. Film:The
Big Liftwith Montgomery Clift and Cornell Borchers, about the Berlin
Airlift, filmed in the rubble of West and East Berlin in 1950.  It was
originally going to star Hildegard Knef, but Borchers was substituted at
the last moment for reasons Knef relates inher book. Film:The
Man Between, a British rubble film starring James Mason, Claire Bloom,
and Hildegard Knef.  Filmed mainly on location in East Berlin in 1953
and directed by Carol Reed (who also  directedThe
Third Man), Film:One,
Two, Threewith James Cagney and Horst Buchholz, filmed in
West and East Berlin in 1961, just before the Wall. Berlin's
battle scars remain 75 years after end of WWII – in pictures,The Guardian, 8 May 2020. Joseph Kanon,The
Good German, Picador / Henry Holt and Company, 2001: 482 pages of total
 immersion in Berlin just after the European war ended in 1945; see theNew
York Times review.  It was made into afilm of
the same namein 2006 that looks like it was filmed on location in 1945
but that twists the plot and characters beyond recognition. Katja  Hoyer,Beyond the Wall, A History of East Germany, Basic Books (NY), 2023. High in the Bavarian Alps, Berch­tes­gaden and
Ober­salz­berg where we saw the ruins of recently blown-up houses of
Hitler, Goering, and Bormann, along with their secret bunkers and tunnels,
Hitler's Kehlsteinhaus (Eagle's Nest), from there to Salzburg in Austria to
see Mozart's birthplace, with a stop in the salt mines that you enter by
sliding down a wooden ramp about a mile long. About Holland… It was the first place I ever saw besides Army bases
that was totally diverse.  The parks were full of children of all races
playing together, everybody intermarried, etc.  I thought it must be the
most progressive, enlightened place on earth, and maybe it was.  Until it
became the first capital of Islamophobia in the 2000s. Donald A. Carter,Forging
the Shield: The U.S. Army in Europe 1951-1962, U.S. Army Center for
Military History (2015), pp.138-142: Evacuation dry runs 1952-54. Gustav Vigeland,
Wikipedia (accessed 4 December 2023). Ragna Thiis Stang,The Art of Gustav Vigeland in 48 Pictures,
The Vigeland Museum Series Number 1, Johan Grund Tanum,
Oslo (1957). A trip we did NOT take, my Dad's idea of ""bonding""… He wanted to take
me to Villefranche to the brothel he frequented when he was a sailor in the
1930s.  No thanks. FHS lasted until 1995, five years after the collapse of the Soviet Union and
the end of Cold War, when the US Army pulled out of the area and gave it all
back to Germany.  The buildings at WAC Circle (PX, Commissary, snack bar,
etc) were torn down and the space is now occupied by the new Hessisches
Polizeipräsidium.  The IG Hochhaus is now a campus of Goethe University.
Frankfurt High School is now the Phillipp-Holzmann Schule; its athletic
field survived until about 2020 when it became the site of the new Adorno
Gymnasium.  The American housing areas except HiCoG are now occupied by
Germans, Turks, Greeks, Syrians, and other residents of Germany; the 3-story
buildings are pastel colors again but the
""redensified"" ones are white.  HiCoG houses
the American consular families. Farewell to Frankfurt,
Karl Weisel,Soldiers, The Official U.S. Army Magazine,
Volume 50, Number 1 (January 1995), pp.22-23. Frankfurt High's Final Bell,
Helke Hasenauer,Soldiers, op.cit., pp.24-25. The
Abrams Building and the American Experience in Frankfurt 1945-1995,
V Corps 30-minute video (1995). Report 4:
Restructuring the US Bases in Germany, Internationales Konversionszentrum
Bonn (June 1995)."
http://kermitproject.org/html.html,"HTML...A
  text-to-html conversion script",This page last updated:Sun Sep 10 07:27:21 2023
http://kermitproject.org/html.html,Version 3.02,
http://kermitproject.org/html.html,Changes in html script version 3.02,"New parameter for command line or .htmlrc file:noconvertcset=number(on command line).noconvertcset =number(in .htmlrc file)If the number is not zero, the HTML result uses
the same character encoding as the original text file; it is not converted
to UTF-8.  In other words, don't bother with this option unless
youdon'twant the HTML file to come out in UTF-8.  One reason for
using this option might be that after the text file is converted to HTML,
you intend to edit the HTML file, but your editing tools don't support
UTF-8. URLs in the source text file are converted into clickable links
in the HTML result."
http://kermitproject.org/html.html,Changes in html script version 3.00,"Version 3.0 of the html script generates
HTML5 rather than HTML 4.01, and the resulting page always has UTF-8
character encoding, as HTML5 recommends.  If the input file uses ISO 8859-1
Latin Alphabet 1 or Microsoft Code Page 1252 character encoding, the html
script converts it to UTF-8 automatically.  If it uses some other
character encoding, you can specify it on the command line (see next item). Additional parameters (such as those describedbelow)
can now be included on the command line; for example:html example.txt ""Ejemplos"" example.html cset=cp437 lang=esThese parameters are inname=valueformat with no internal spaces and
no leading dot.  Thenameis the name of any variable used by the
html script, such as the ones listedbelow.
Character-set names understood by C-Kermit are
listedhere. A new directive,prefont, lets you specify a different font to use
for indented material that the html script puts
between<pre>..</pre>.  For example if
your document includes a lot of computer sourcecode or tables, you can:html codesnippets.txt ""Program code examples"" snippets.html prefont=monospaceBut I wouldn't recommend this if you also have other types of indented
material, such as bullet lists, enumerated lists, description lists,
or blockquotes."
http://kermitproject.org/html.html,Introduction,"In April 2017, when I uploaded C-Kermit 9.0.304 Dev.21,I wrote:"
http://kermitproject.org/html.html,What the html script is,
http://kermitproject.org/html.html,How to install the html script,
http://kermitproject.org/html.html,How to invoke the html script,"If you don't specify a title for the page, the script will use the first
line of the file, but only if it is followed by a blank line.  If there is
no such line, the title will be “Untitled”. If you don't specify an output filename, the output file will be given
the name of the input file, but with an.htmlexension, for examplenotes.txtwill producenotes.html, and it will be in the
same directory as the input file, unless you have defined
adestinationin your.htmlrcfile
(explainedbelow).  Let's say you do this, and that
the text file has a first line suitable as a title; then you can just do:"
http://kermitproject.org/html.html,Using the html script in Unix pipelines,"htmlis the name of the script; """"is a “nothing” in place of the input filename,
so the script knows to read from standard input; ""pagetitle""is the page title in doublequotes."
http://kermitproject.org/html.html,How to customize the html script,"In version 3.00 (or later) of the html script, you can also put parameters
on the command line after the third parameter asname=valuepairs (no
dot, no spaces around '=').  Command-line parameter settings override
.htmlrc ones.  Example:"
http://kermitproject.org/html.html,What the html script does,"The text mustnotcontain any HTML markup. The text should be in block style, paragraphs not indented. Paragraphs are separated by one or more blank lines. If URLs are in the file, they must not be broken across lines. Flushleft text is flowed. Indented text (e.g. bullet lists, enumerations, blockquotes) is
preserved as-is. Multilevel lists; Hanging-indent description lists; Headings within the text. Text where paragraphs are indicated by indentation of the first line,
  rather than being separated by blank lines. Finally, the html script puts Top and Bottom anchors and links in the page. To illustrate, here is a long plain-text file (14 years worth of C-Kermit 
update notes):"
http://kermitproject.org/html.html,Improving the results,"To produce Web pages from text files that will not change; As a first step in migrating a text file to html, in which case the
text file will no longer be used and all updates will be made to the html file."
http://kermitproject.org/html.html,Debugging,
http://www.columbia.edu/~fdc/entities.html,Symbolic Character Entities of HTML 4.01,"Latin Letters Greek Letters Miscellaneous Punctuation and Symbols Follow the links, or scroll down just a bit to see the first one.
The table columns show the symbolic character reference, which always begins
with an ampersand (&) and ends with a semicolon (;).
The name is case sensitive and must be spelled as shown. The next column shows the corresponding numeric character reference (the
decimal representation of theUnicodevalue).  The next column shows
the character itself (if you can't see it, it's a deficiency of your browser
or font) and the final column is the character name (in English).
To use a symbolic (or numeric) character reference in a Web document, just
put it where the desired character would go, for example: becomes: The three tables show all the symbolic character references of HTML 4.01
(the current version as of this writing).  To get characters that do not
have symbolic references (e.g. Cyrillic, Hebrew, line-and-box drawing,
etc), usenumericcharacter references.  For example, the uppercase
Russian alphabet: can be written like this: You can also usehexadecimalnumeric character references.  These
are like decimal numeric character references except (a) there is a letter
""x"" after the ""&#"" and (b) the number is hexadecimal
(base 16).  These are handy because Unicode values are usually written in
hexadecimal, e.g. U+042F (the four characters after ""U+"" are the four
hexadecimal digits).  Using hex notation, the same Russian alphabet can be
written like this: You can also include characters in any MIME-registered character setdirectly(literally) in a Web page, but that's beyond the scope of
this document, and also it's more risky. Also see: The HTML
4.01 Specification(official) Character
Entities in HTML 4(official) Unicode Character Charts(official) A briefHTML tutorial / sampler AUnicode 4.0 Table(all but Chinese, Japanese, and Korean; shows hexadecimal values) Morecharacter
set tables AUTF-8 sampler(text in many languages, entered ""direct"" in Unicode Transformation Format 8)."
http://www.columbia.edu/~fdc/entities.html,Latin,
http://www.columbia.edu/~fdc/entities.html,Greek,
http://www.columbia.edu/~fdc/entities.html,Miscellaneous,
http://www.kermitproject.org/,The New Open-Source Kermit Project,"25 October 2022But you can stilluse FTP the old-fashioned way: ftp
ftp.kermitproject.org, user: anonymous, password:anything, cd kermit
(and at this point you might have to give the ""passive"" command depending on
the FTP client) and then (for example) cd test/tar to download (""get"")
C-Kermit Beta-test tarballs.  For best results
useC-Kermit's built-in FTP client. Kermitis a robust and portable
platform-and-transport-independent file-transfer protocol and a large
collection of software programs that implement it on
awide variety of platforms.  In addition to file
transfer, many of these programs also make network, dialed, and/or
serial-port connections and also offer features such as terminal emulation,
character-set conversion, and scripting for automation of any communication
or file-management task.  The Kermit Project originated at Columbia
University in New York City in 1981 and remained there for 30 years.  Since
2011 it is independent.CLICK HEREfor more about
the Kermit Project, protocol, and software. August 11, 2024...ck10.0 for Microsoft Windows and IBM OS/2
  Beta.06based on C-Kermit 10.0 Beta.06 from David Goodwin in New
  Zealand. August 8, 2024...ck10.0 for UNIX (Linux, BSD, etc) and (Open)VMS
  Beta.06. July 15, 2023...
Sortable tables on the website, which stopped being sortable last September,
are now sortable again, for example theKermit
file-transfer packets referencepage.  They are also found
on theNYC New Dealsite, e.g.here,here, andhere).
Thanks toStuart Langridgefor the
fix (and forsorttable.js). July 3, 2022...C-Kermit 10.0 Beta.10- 
The forthcoming new C-Kermit release for Unix, VMS, and MS-Windows.
Detailshere. 2 April 2023...DECSYSTEM-20 Kermit 5.3(230)by Tom DeBellis, the first major release in nearly two decades (with a
subsequent minor update 11 June). May 1, 2023...
The Kermit Project site is accessible by IPV4, HTTP, HTTPS, 
and as of 27 Apr 2023IPV6 and a new FTP server. September 18, 2022... NewKermit File-Transfer Packet Reference September 15, 2022...  Third Beta Test of the newC-Kermit for Windows. April 29, 2022...
The Kermit script for downloading and installing other Kermit scripts,getkermitscript, a casualty of the
Great FTP Purge of 2021, now
fixed;download
  new version. February 10, 2022...
Problem with download links to the original Kermit Project website at
  Columbia University;see notice. November 14, 2021...G-Kermit 2.01- a few more
adjustments to our ever-changing Unix APIs. October 17, 2021...Photogallery 3.12-
some minor fixes. May 26, 2021...E-Kermit 1.18Bug fixes, plus
all FTP links in the E-Kermit page have been converted to HTTP. May 26, 2021...G-Kermit 2.00, the first and only new
release since it debuted over 20 years ago.  Version 2.00 should compile
cleanly in most modernUnixversions and produce a
working excutable.  All FTP links in the G-Kermit page have been converted
to HTTP. May 7, 2021...
All FTP links in theC-Kermit pageand
theC-Kermit ""Daily""page converted to work with
Chrome and Firefox. May 2, 2021...
All FTP links theKermit Archive pagehave been converted to something that Chrome and Firefox will accept. April 30, 2021...All FTP links removed from this pagesince
they no longer work in Firefox or Chrome.. April 29, 2021...40th anniversary of first Kermit protocol file
transferandWhy I still use Kermit all
day every day 16 February, 2021...HTTP-to-HTTPS conversion:
Kermit Project website is now encrypted. August 1, 2019... New index to all C-Kermit documentationHERE, plus comprehensive tables of C-Kermit'sbuilt-in functionsandbuilt-in variables.  For associative
arrays,SEE HERE. September 15, 2021...C-Kermit 9.0.305 Alpha.04available for
testing; some preliminary work has been done on the VMS support. July 25, 2020...C-Kermit 9.0.305 Alpha.01available for
testing.Important:This is an emergency test release that works
around a change made affecting Linux and other Unix systems that use the GNU
stdio library (glibc) which causes C-Kermit builds to fail; affected systems
include (at least) Ubuntu and Debian.  Please test to make sure this version
builds without errors, and that arrow keys function correctly in C-Kermit
command mode, e.g. up-arrow for command recall. April 19, 2021...
C-Kermit 4C(057) of 31 July 1985 has been added to
thehistorical archive, thanks to Jeffrey H. 
Johnson. 24 March, 2021...  Some minor improvements
toPhotogallery, and the three iframes in
the user manual are working again (they were casualties of the
  http-https cutover). June 29, 2020...Photogallery 3.04.  Improved handling
of character sets, etc. April 26, 2020...The first release of C-Kermit, version 4.0 of
5 February 1985, has been excavated. 2016-2019...Translationsof this
page(and others) into many languages;
seecredits below. December 30, 2019...Is this website secure?(yes) January 31, 2020...Photogallery 3.00, a major new release.
Supports PNG, GIF, and Animated GIF as well as JPG, and does not require
ImageMagick, many more improvements.  Use this version with
C-Kermit 9.0.304 Dev.23. November 22, 2019...Photogallery script 2.38...
IMAGES file: ignore leading blanks, allow end-of-line comments October 17, 2019...K95 Russian Keyboard Mapfor English speakers
who want to type Russian words mnemonically: a new fit-on-one page table
(new Oct 16, revised Oct 17). April 19, 2019... This page converted to HTML5 and validated;
layout and fluidity improved. June 17, 2017...The First Kermit File Transfer Re-enacted(report from 2017 Vintage Computer Festival East). May 1, 2017...C-Kermit 9.0.304
Dev.22available for testing, plus 
anew scriptfor converting plain-text
files to HTML. April 7. 2017...Original 1983 Kermit BYTE articlelocated. March 15, 2017...
This page converted from ISO-8859-1 toUTF-8.
The original remains availablehere. January 14, 2017...ITS Kermitin Maclisp for the PDP-10
resurfaces, mostly. March 14, 2016...Does Kermit 95 work
in Windows 10?(yes) February 10, 2016...New Kermit software archive page with updates. February 8, 2016...Kermit books are now online as PDF files. January 28, 2016...C-Kermit 4.2from March 1985, which was
lost for decades, has resurfaced.  Happy 30th birthday to C-Kermit, somewhat
belated. January 16, 2016...C-Kermit 9.0.304
Dev.20available for testing. January 16, 2016...
New script:Remind,
reminds you about what's coming up on your schedule. October 25, 2015...Photogallery script 2.09,
with new optional button to enlarge images, special treatment for
portrait images, ability to insert descriptive text after subtitles
on the index page. May 19, 2015...Photogallery script 2.02,
now “mobile friendly”;
download it withGetkermiscript.
Also, most of the top-level pages on this site have been
“mobilized”. January 30, 2015...Progress Report
on Open Source Kermit 95. February 28, 2014...Replacetextblock- A script
to replace blocks of text. February 19, 2014...The MM email clientmoves to kermitproject.org January 12, 2014...
NewGetkermitscriptscript for
downloading and installing Kermit scripts. October 30, 2013... 
Kermit ProjectOral History Transcriptsat the
Computer History MuseumHEREandHERE. October 29, 2013...Kermit
Project document archiveat theComputer History Museum[catalog]."
http://www.kermitproject.org/,Kermit programs currently in use,"All of these are written in theC
programming language, with source code available. The historical Kermit software archive — the one that contains all the
Kermit programs and files from 1981 to August 2011 — is at Columbia
University: about 150 different programs, covering thousands of
hardware-OS-version combinations, in 36 different programming languages and
many more dialects.  The archive page indicated just below links mostly
to Columbia, but also links to some newer items that are here at the
new site: My thanks toPanix Public Access Networks
Corporationon behalf of the open source community and Kermit software
users and developers for hosting this site since 2011.—Frank da Cruz,fdc@kermitproject.org"
http://www.kermitproject.org/,Translations of this page courtesy of...,"[about translations]Note:Translations are hosted at other sites and tend to disappear. As of 16 February 2021, this website is encrypted via
services provided by the free, automated, and
openLet's Encryptcertificate
authority as administered byPanix.com. As of 10 October 2020, this site participates in the Amazon Services LLC
Associates Program, linking to reference materials (mainly books and films)
atAmazon.comin order to partially fund its expenses through small referral commissions
on book orders.  No endorsement, support, or sponsorship of this site by
Amazon.com (or vice-versa) is expressed or implied, nor any affiliation with
Amazon beyond membership in the Affiliate program."
https://www.w3.org/TR/html52/,HTML,Living Standard — Last Updated23 October 2024
https://www.w3.org/TR/html52/,Table of contents,"1Introduction 2Common infrastructure 3Semantics, structure, and APIs of HTML documents 4The elements of HTML 5Microdata 6User interaction 7Loading web pages 8Web application APIs 9Communication 10Web workers 11Worklets 12Web storage 13The HTML syntax 14The XML syntax 15Rendering 16Obsolete features 17IANA considerations Index References Acknowledgments Intellectual property rights"
https://www.w3.org/TR/html52/,Full table of contents,"1Introduction1.1Where does this specification fit?1.2Is this HTML5?1.3Background1.4Audience1.5Scope1.6History1.7Design notes1.7.1Serializability of script execution1.7.2Compliance with other specifications1.7.3Extensibility1.8HTML vs XML syntax1.9Structure of this specification1.9.1How to read this specification1.9.2Typographic conventions1.10A quick introduction to HTML1.10.1Writing secure applications with HTML1.10.2Common pitfalls to avoid when using the scripting APIs1.10.3How to catch mistakes when writing HTML: validators and conformance checkers1.11Conformance requirements for authors1.11.1Presentational markup1.11.2Syntax errors1.11.3Restrictions on content models and on attribute values1.12Suggested reading 1.1Where does this specification fit? 1.2Is this HTML5? 1.3Background 1.4Audience 1.5Scope 1.6History 1.7Design notes1.7.1Serializability of script execution1.7.2Compliance with other specifications1.7.3Extensibility 1.7.1Serializability of script execution 1.7.2Compliance with other specifications 1.7.3Extensibility 1.8HTML vs XML syntax 1.9Structure of this specification1.9.1How to read this specification1.9.2Typographic conventions 1.9.1How to read this specification 1.9.2Typographic conventions 1.10A quick introduction to HTML1.10.1Writing secure applications with HTML1.10.2Common pitfalls to avoid when using the scripting APIs1.10.3How to catch mistakes when writing HTML: validators and conformance checkers 1.10.1Writing secure applications with HTML 1.10.2Common pitfalls to avoid when using the scripting APIs 1.10.3How to catch mistakes when writing HTML: validators and conformance checkers 1.11Conformance requirements for authors1.11.1Presentational markup1.11.2Syntax errors1.11.3Restrictions on content models and on attribute values 1.11.1Presentational markup 1.11.2Syntax errors 1.11.3Restrictions on content models and on attribute values 1.12Suggested reading 2Common infrastructure2.1Terminology2.1.1Parallelism2.1.2Resources2.1.3XML compatibility2.1.4DOM trees2.1.5Scripting2.1.6Plugins2.1.7Character encodings2.1.8Conformance classes2.1.9Dependencies2.1.10Extensibility2.1.11Interactions with XPath and XSLT2.2Policy-controlled features2.3Common microsyntaxes2.3.1Common parser idioms2.3.2Boolean attributes2.3.3Keywords and enumerated attributes2.3.4Numbers2.3.4.1Signed integers2.3.4.2Non-negative integers2.3.4.3Floating-point numbers2.3.4.4Percentages and lengths2.3.4.5Nonzero percentages and lengths2.3.4.6Lists of floating-point numbers2.3.4.7Lists of dimensions2.3.5Dates and times2.3.5.1Months2.3.5.2Dates2.3.5.3Yearless dates2.3.5.4Times2.3.5.5Local dates and times2.3.5.6Time zones2.3.5.7Global dates and times2.3.5.8Weeks2.3.5.9Durations2.3.5.10Vaguer moments in time2.3.6Legacy colors2.3.7Space-separated tokens2.3.8Comma-separated tokens2.3.9References2.3.10Media queries2.3.11Unique internal values2.4URLs2.4.1Terminology2.4.2Parsing URLs2.4.3Dynamic changes to base URLs2.5Fetching resources2.5.1Terminology2.5.2Determining the type of a resource2.5.3Extracting character encodings frommetaelements2.5.4CORS settings attributes2.5.5Referrer policy attributes2.5.6Nonce attributes2.5.7Lazy loading attributes2.5.8Blocking attributes2.5.9Fetch priority attributes2.6Common DOM interfaces2.6.1Reflecting content attributes in IDL attributes2.6.2Using reflect in specifications2.6.3Collections2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList)2.6.3.2TheHTMLFormControlsCollectioninterface2.6.3.3TheHTMLOptionsCollectioninterface2.6.4TheDOMStringListinterface2.7Safe passing of structured data2.7.1Serializable objects2.7.2Transferable objects2.7.3StructuredSerializeInternal (value,forStorage[ ,memory] )2.7.4StructuredSerialize (value)2.7.5StructuredSerializeForStorage (value)2.7.6StructuredDeserialize (serialized,targetRealm[ ,memory] )2.7.7StructuredSerializeWithTransfer (value,transferList)2.7.8StructuredDeserializeWithTransfer (serializeWithTransferResult,targetRealm)2.7.9Performing serialization and
  transferring from other specifications2.7.10Structured cloning API 2.1Terminology2.1.1Parallelism2.1.2Resources2.1.3XML compatibility2.1.4DOM trees2.1.5Scripting2.1.6Plugins2.1.7Character encodings2.1.8Conformance classes2.1.9Dependencies2.1.10Extensibility2.1.11Interactions with XPath and XSLT 2.1.1Parallelism 2.1.2Resources 2.1.3XML compatibility 2.1.4DOM trees 2.1.5Scripting 2.1.6Plugins 2.1.7Character encodings 2.1.8Conformance classes 2.1.9Dependencies 2.1.10Extensibility 2.1.11Interactions with XPath and XSLT 2.2Policy-controlled features 2.3Common microsyntaxes2.3.1Common parser idioms2.3.2Boolean attributes2.3.3Keywords and enumerated attributes2.3.4Numbers2.3.4.1Signed integers2.3.4.2Non-negative integers2.3.4.3Floating-point numbers2.3.4.4Percentages and lengths2.3.4.5Nonzero percentages and lengths2.3.4.6Lists of floating-point numbers2.3.4.7Lists of dimensions2.3.5Dates and times2.3.5.1Months2.3.5.2Dates2.3.5.3Yearless dates2.3.5.4Times2.3.5.5Local dates and times2.3.5.6Time zones2.3.5.7Global dates and times2.3.5.8Weeks2.3.5.9Durations2.3.5.10Vaguer moments in time2.3.6Legacy colors2.3.7Space-separated tokens2.3.8Comma-separated tokens2.3.9References2.3.10Media queries2.3.11Unique internal values 2.3.1Common parser idioms 2.3.2Boolean attributes 2.3.3Keywords and enumerated attributes 2.3.4Numbers2.3.4.1Signed integers2.3.4.2Non-negative integers2.3.4.3Floating-point numbers2.3.4.4Percentages and lengths2.3.4.5Nonzero percentages and lengths2.3.4.6Lists of floating-point numbers2.3.4.7Lists of dimensions 2.3.4.1Signed integers 2.3.4.2Non-negative integers 2.3.4.3Floating-point numbers 2.3.4.4Percentages and lengths 2.3.4.5Nonzero percentages and lengths 2.3.4.6Lists of floating-point numbers 2.3.4.7Lists of dimensions 2.3.5Dates and times2.3.5.1Months2.3.5.2Dates2.3.5.3Yearless dates2.3.5.4Times2.3.5.5Local dates and times2.3.5.6Time zones2.3.5.7Global dates and times2.3.5.8Weeks2.3.5.9Durations2.3.5.10Vaguer moments in time 2.3.5.1Months 2.3.5.2Dates 2.3.5.3Yearless dates 2.3.5.4Times 2.3.5.5Local dates and times 2.3.5.6Time zones 2.3.5.7Global dates and times 2.3.5.8Weeks 2.3.5.9Durations 2.3.5.10Vaguer moments in time 2.3.6Legacy colors 2.3.7Space-separated tokens 2.3.8Comma-separated tokens 2.3.9References 2.3.10Media queries 2.3.11Unique internal values 2.4URLs2.4.1Terminology2.4.2Parsing URLs2.4.3Dynamic changes to base URLs 2.4.1Terminology 2.4.2Parsing URLs 2.4.3Dynamic changes to base URLs 2.5Fetching resources2.5.1Terminology2.5.2Determining the type of a resource2.5.3Extracting character encodings frommetaelements2.5.4CORS settings attributes2.5.5Referrer policy attributes2.5.6Nonce attributes2.5.7Lazy loading attributes2.5.8Blocking attributes2.5.9Fetch priority attributes 2.5.1Terminology 2.5.2Determining the type of a resource 2.5.3Extracting character encodings frommetaelements 2.5.4CORS settings attributes 2.5.5Referrer policy attributes 2.5.6Nonce attributes 2.5.7Lazy loading attributes 2.5.8Blocking attributes 2.5.9Fetch priority attributes 2.6Common DOM interfaces2.6.1Reflecting content attributes in IDL attributes2.6.2Using reflect in specifications2.6.3Collections2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList)2.6.3.2TheHTMLFormControlsCollectioninterface2.6.3.3TheHTMLOptionsCollectioninterface2.6.4TheDOMStringListinterface 2.6.1Reflecting content attributes in IDL attributes 2.6.2Using reflect in specifications 2.6.3Collections2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList)2.6.3.2TheHTMLFormControlsCollectioninterface2.6.3.3TheHTMLOptionsCollectioninterface 2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.6.3.2TheHTMLFormControlsCollectioninterface 2.6.3.3TheHTMLOptionsCollectioninterface 2.6.4TheDOMStringListinterface 2.7Safe passing of structured data2.7.1Serializable objects2.7.2Transferable objects2.7.3StructuredSerializeInternal (value,forStorage[ ,memory] )2.7.4StructuredSerialize (value)2.7.5StructuredSerializeForStorage (value)2.7.6StructuredDeserialize (serialized,targetRealm[ ,memory] )2.7.7StructuredSerializeWithTransfer (value,transferList)2.7.8StructuredDeserializeWithTransfer (serializeWithTransferResult,targetRealm)2.7.9Performing serialization and
  transferring from other specifications2.7.10Structured cloning API 2.7.1Serializable objects 2.7.2Transferable objects 2.7.3StructuredSerializeInternal (value,forStorage[ ,memory] ) 2.7.4StructuredSerialize (value) 2.7.5StructuredSerializeForStorage (value) 2.7.6StructuredDeserialize (serialized,targetRealm[ ,memory] ) 2.7.7StructuredSerializeWithTransfer (value,transferList) 2.7.8StructuredDeserializeWithTransfer (serializeWithTransferResult,targetRealm) 2.7.9Performing serialization and
  transferring from other specifications 2.7.10Structured cloning API 3Semantics, structure, and APIs of HTML documents3.1Documents3.1.1TheDocumentobject3.1.2TheDocumentOrShadowRootinterface3.1.3Resource metadata management3.1.4Reporting document loading status3.1.5Render-blocking mechanism3.1.6DOM tree accessors3.2Elements3.2.1Semantics3.2.2Elements in the DOM3.2.3HTML element constructors3.2.4Element definitions3.2.4.1Attributes3.2.5Content models3.2.5.1The ""nothing"" content model3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements3.2.5.3Transparent content models3.2.5.4Paragraphs3.2.6Global attributes3.2.6.1Thetitleattribute3.2.6.2Thelangandxml:langattributes3.2.6.3Thetranslateattribute3.2.6.4Thedirattribute3.2.6.5Thestyleattribute3.2.6.6Embedding custom non-visible data with thedata-*attributes3.2.7TheinnerTextandouterTextproperties3.2.8Requirements relating to the bidirectional algorithm3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters3.2.8.2User agent conformance criteria3.2.9Requirements related to ARIA and to platform accessibility APIs 3.1Documents3.1.1TheDocumentobject3.1.2TheDocumentOrShadowRootinterface3.1.3Resource metadata management3.1.4Reporting document loading status3.1.5Render-blocking mechanism3.1.6DOM tree accessors 3.1.1TheDocumentobject 3.1.2TheDocumentOrShadowRootinterface 3.1.3Resource metadata management 3.1.4Reporting document loading status 3.1.5Render-blocking mechanism 3.1.6DOM tree accessors 3.2Elements3.2.1Semantics3.2.2Elements in the DOM3.2.3HTML element constructors3.2.4Element definitions3.2.4.1Attributes3.2.5Content models3.2.5.1The ""nothing"" content model3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements3.2.5.3Transparent content models3.2.5.4Paragraphs3.2.6Global attributes3.2.6.1Thetitleattribute3.2.6.2Thelangandxml:langattributes3.2.6.3Thetranslateattribute3.2.6.4Thedirattribute3.2.6.5Thestyleattribute3.2.6.6Embedding custom non-visible data with thedata-*attributes3.2.7TheinnerTextandouterTextproperties3.2.8Requirements relating to the bidirectional algorithm3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters3.2.8.2User agent conformance criteria3.2.9Requirements related to ARIA and to platform accessibility APIs 3.2.1Semantics 3.2.2Elements in the DOM 3.2.3HTML element constructors 3.2.4Element definitions3.2.4.1Attributes 3.2.4.1Attributes 3.2.5Content models3.2.5.1The ""nothing"" content model3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements3.2.5.3Transparent content models3.2.5.4Paragraphs 3.2.5.1The ""nothing"" content model 3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements 3.2.5.2.1Metadata content 3.2.5.2.2Flow content 3.2.5.2.3Sectioning content 3.2.5.2.4Heading content 3.2.5.2.5Phrasing content 3.2.5.2.6Embedded content 3.2.5.2.7Interactive content 3.2.5.2.8Palpable content 3.2.5.2.9Script-supporting elements 3.2.5.3Transparent content models 3.2.5.4Paragraphs 3.2.6Global attributes3.2.6.1Thetitleattribute3.2.6.2Thelangandxml:langattributes3.2.6.3Thetranslateattribute3.2.6.4Thedirattribute3.2.6.5Thestyleattribute3.2.6.6Embedding custom non-visible data with thedata-*attributes 3.2.6.1Thetitleattribute 3.2.6.2Thelangandxml:langattributes 3.2.6.3Thetranslateattribute 3.2.6.4Thedirattribute 3.2.6.5Thestyleattribute 3.2.6.6Embedding custom non-visible data with thedata-*attributes 3.2.7TheinnerTextandouterTextproperties 3.2.8Requirements relating to the bidirectional algorithm3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters3.2.8.2User agent conformance criteria 3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters 3.2.8.2User agent conformance criteria 3.2.9Requirements related to ARIA and to platform accessibility APIs 4The elements of HTML4.1The document element4.1.1Thehtmlelement4.2Document metadata4.2.1Theheadelement4.2.2Thetitleelement4.2.3Thebaseelement4.2.4Thelinkelement4.2.4.1Processing themediaattribute4.2.4.2Processing thetypeattribute4.2.4.3Fetching and processing a resource
  from alinkelement4.2.4.4Processing `Link` headers4.2.4.5Early hints4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement4.2.5Themetaelement4.2.5.1Standard metadata names4.2.5.2Other metadata names4.2.5.3Pragma directives4.2.5.4Specifying the document's character encoding4.2.6Thestyleelement4.2.7Interactions of styling and scripting4.3Sections4.3.1Thebodyelement4.3.2Thearticleelement4.3.3Thesectionelement4.3.4Thenavelement4.3.5Theasideelement4.3.6Theh1,h2,h3,h4,h5, andh6elements4.3.7Thehgroupelement4.3.8Theheaderelement4.3.9Thefooterelement4.3.10Theaddresselement4.3.11Headings and outlines4.3.11.1Sample outlines4.3.11.2Exposing outlines to users4.3.12Usage summary4.3.12.1Article or section?4.4Grouping content4.4.1Thepelement4.4.2Thehrelement4.4.3Thepreelement4.4.4Theblockquoteelement4.4.5Theolelement4.4.6Theulelement4.4.7Themenuelement4.4.8Thelielement4.4.9Thedlelement4.4.10Thedtelement4.4.11Theddelement4.4.12Thefigureelement4.4.13Thefigcaptionelement4.4.14Themainelement4.4.15Thesearchelement4.4.16Thedivelement4.5Text-level semantics4.5.1Theaelement4.5.2Theemelement4.5.3Thestrongelement4.5.4Thesmallelement4.5.5Theselement4.5.6Theciteelement4.5.7Theqelement4.5.8Thedfnelement4.5.9Theabbrelement4.5.10Therubyelement4.5.11Thertelement4.5.12Therpelement4.5.13Thedataelement4.5.14Thetimeelement4.5.15Thecodeelement4.5.16Thevarelement4.5.17Thesampelement4.5.18Thekbdelement4.5.19Thesubandsupelements4.5.20Theielement4.5.21Thebelement4.5.22Theuelement4.5.23Themarkelement4.5.24Thebdielement4.5.25Thebdoelement4.5.26Thespanelement4.5.27Thebrelement4.5.28Thewbrelement4.5.29Usage summary4.6Links4.6.1Introduction4.6.2Links created byaandareaelements4.6.3API foraandareaelements4.6.4Following hyperlinks4.6.5Downloading resources4.6.6Hyperlink auditing4.6.6.1The `Ping-From` and `Ping-To` headers4.6.7Link types4.6.7.1Link type ""alternate""4.6.7.2Link type ""author""4.6.7.3Link type ""bookmark""4.6.7.4Link type ""canonical""4.6.7.5Link type ""dns-prefetch""4.6.7.6Link type ""expect""4.6.7.7Link type ""external""4.6.7.8Link type ""help""4.6.7.9Link type ""icon""4.6.7.10Link type ""license""4.6.7.11Link type ""manifest""4.6.7.12Link type ""modulepreload""4.6.7.13Link type ""nofollow""4.6.7.14Link type ""noopener""4.6.7.15Link type ""noreferrer""4.6.7.16Link type ""opener""4.6.7.17Link type ""pingback""4.6.7.18Link type ""preconnect""4.6.7.19Link type ""prefetch""4.6.7.20Link type ""preload""4.6.7.21Link type ""privacy-policy""4.6.7.22Link type ""search""4.6.7.23Link type ""stylesheet""4.6.7.24Link type ""tag""4.6.7.25Link Type ""terms-of-service""4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev""4.6.7.27Other link types4.7Edits4.7.1Theinselement4.7.2Thedelelement4.7.3Attributes common toinsanddelelements4.7.4Edits and paragraphs4.7.5Edits and lists4.7.6Edits and tables4.8Embedded content4.8.1Thepictureelement4.8.2Thesourceelement4.8.3Theimgelement4.8.4Images4.8.4.1Introduction4.8.4.1.1Adaptive images4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers4.8.5Theiframeelement4.8.6Theembedelement4.8.7Theobjectelement4.8.8Thevideoelement4.8.9Theaudioelement4.8.10Thetrackelement4.8.11Media elements4.8.11.1Error codes4.8.11.2Location of the media resource4.8.11.3MIME types4.8.11.4Network states4.8.11.5Loading the media resource4.8.11.6Offsets into the media resource4.8.11.7Ready states4.8.11.8Playing the media resource4.8.11.9Seeking4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks4.8.11.12Identifying a track kind through a URL4.8.11.13User interface4.8.11.14Time ranges4.8.11.15TheTrackEventinterface4.8.11.16Events summary4.8.11.17Security and privacy considerations4.8.11.18Best practices for authors using media elements4.8.11.19Best practices for implementers of media elements4.8.12Themapelement4.8.13Theareaelement4.8.14Image maps4.8.14.1Authoring4.8.14.2Processing model4.8.15MathML4.8.16SVG4.8.17Dimension attributes4.9Tabular data4.9.1Thetableelement4.9.1.1Techniques for describing tables4.9.1.2Techniques for table design4.9.2Thecaptionelement4.9.3Thecolgroupelement4.9.4Thecolelement4.9.5Thetbodyelement4.9.6Thetheadelement4.9.7Thetfootelement4.9.8Thetrelement4.9.9Thetdelement4.9.10Thethelement4.9.11Attributes common totdandthelements4.9.12Processing model4.9.12.1Forming a table4.9.12.2Forming relationships between data cells and header cells4.9.13Examples4.10Forms4.10.1Introduction4.10.1.1Writing a form's user interface4.10.1.2Implementing the server-side processing for a form4.10.1.3Configuring a form to communicate with a server4.10.1.4Client-side form validation4.10.1.5Enabling client-side automatic filling of form controls4.10.1.6Improving the user experience on mobile devices4.10.1.7The difference between the field type, the autofill field name, and the input modality4.10.1.8Date, time, and number formats4.10.2Categories4.10.3Theformelement4.10.4Thelabelelement4.10.5Theinputelement4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button)4.10.5.2Implementation notes regarding localization of form controls4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute4.10.5.4Commoninputelement APIs4.10.5.5Common event behaviors4.10.6Thebuttonelement4.10.7Theselectelement4.10.8Thedatalistelement4.10.9Theoptgroupelement4.10.10Theoptionelement4.10.11Thetextareaelement4.10.12Theoutputelement4.10.13Theprogresselement4.10.14Themeterelement4.10.15Thefieldsetelement4.10.16Thelegendelement4.10.17Form control infrastructure4.10.17.1A form control's value4.10.17.2Mutability4.10.17.3Association of controls and forms4.10.18Attributes common to form controls4.10.18.1Naming form controls: thenameattribute4.10.18.2Submitting element directionality: thedirnameattribute4.10.18.3Limiting user input length: themaxlengthattribute4.10.18.4Setting minimum input length requirements: theminlengthattribute4.10.18.5Enabling and disabling form controls: thedisabledattribute4.10.18.6Form submission attributes4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model4.10.19APIs for the text control selections4.10.20Constraints4.10.20.1Definitions4.10.20.2Constraint validation4.10.20.3The constraint validation API4.10.20.4Security4.10.21Form submission4.10.21.1Introduction4.10.21.2Implicit submission4.10.21.3Form submission algorithm4.10.21.4Constructing the entry list4.10.21.5Selecting a form submission encoding4.10.21.6Converting an entry list to a list of name-value pairs4.10.21.7URL-encoded form data4.10.21.8Multipart form data4.10.21.9Plain text form data4.10.21.10TheSubmitEventinterface4.10.21.11TheFormDataEventinterface4.10.22Resetting a form4.11Interactive elements4.11.1Thedetailselement4.11.2Thesummaryelement4.11.3Commands4.11.3.1Facets4.11.3.2Using theaelement to define a command4.11.3.3Using thebuttonelement to define a command4.11.3.4Using theinputelement to define a command4.11.3.5Using theoptionelement to define a command4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command4.11.3.7Using theaccesskeyattribute to define a command on other elements4.11.4Thedialogelement4.12Scripting4.12.1Thescriptelement4.12.1.1Processing model4.12.1.2Scripting languages4.12.1.3Restrictions for contents ofscriptelements4.12.1.4Inline documentation for external scripts4.12.1.5Interaction ofscriptelements and XSLT4.12.2Thenoscriptelement4.12.3Thetemplateelement4.12.3.1Interaction oftemplateelements with XSLT and XPath4.12.4Theslotelement4.12.5Thecanvaselement4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context4.12.5.4Color spaces and color space
  conversion4.12.5.5Serializing bitmaps to a file4.12.5.6Security withcanvaselements4.12.5.7Premultiplied alpha and the 2D rendering context4.13Custom elements4.13.1Introduction4.13.1.1Creating an autonomous custom element4.13.1.2Creating a form-associated custom element4.13.1.3Creating a custom element with default accessible roles, states, and properties4.13.1.4Creating a customized built-in element4.13.1.5Drawbacks of autonomous custom elements4.13.1.6Upgrading elements after their creation4.13.1.7Exposing custom element states4.13.2Requirements for custom element constructors and
  reactions4.13.3Core concepts4.13.4TheCustomElementRegistryinterface4.13.5Upgrades4.13.6Custom element reactions4.13.7Element internals4.13.7.1TheElementInternalsinterface4.13.7.2Shadow root access4.13.7.3Form-associated custom elements4.13.7.4Accessibility semantics4.13.7.5Custom state pseudo-class4.14Common idioms without dedicated elements4.14.1Breadcrumb navigation4.14.2Tag clouds4.14.3Conversations4.14.4Footnotes4.15Disabled elements4.16Matching HTML elements using selectors and CSS4.16.1Case-sensitivity of the CSS 'attr()' function4.16.2Case-sensitivity of selectors4.16.3Pseudo-classes 4.1The document element4.1.1Thehtmlelement 4.1.1Thehtmlelement 4.2Document metadata4.2.1Theheadelement4.2.2Thetitleelement4.2.3Thebaseelement4.2.4Thelinkelement4.2.4.1Processing themediaattribute4.2.4.2Processing thetypeattribute4.2.4.3Fetching and processing a resource
  from alinkelement4.2.4.4Processing `Link` headers4.2.4.5Early hints4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement4.2.5Themetaelement4.2.5.1Standard metadata names4.2.5.2Other metadata names4.2.5.3Pragma directives4.2.5.4Specifying the document's character encoding4.2.6Thestyleelement4.2.7Interactions of styling and scripting 4.2.1Theheadelement 4.2.2Thetitleelement 4.2.3Thebaseelement 4.2.4Thelinkelement4.2.4.1Processing themediaattribute4.2.4.2Processing thetypeattribute4.2.4.3Fetching and processing a resource
  from alinkelement4.2.4.4Processing `Link` headers4.2.4.5Early hints4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement 4.2.4.1Processing themediaattribute 4.2.4.2Processing thetypeattribute 4.2.4.3Fetching and processing a resource
  from alinkelement 4.2.4.4Processing `Link` headers 4.2.4.5Early hints 4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement 4.2.5Themetaelement4.2.5.1Standard metadata names4.2.5.2Other metadata names4.2.5.3Pragma directives4.2.5.4Specifying the document's character encoding 4.2.5.1Standard metadata names 4.2.5.2Other metadata names 4.2.5.3Pragma directives 4.2.5.4Specifying the document's character encoding 4.2.6Thestyleelement 4.2.7Interactions of styling and scripting 4.3Sections4.3.1Thebodyelement4.3.2Thearticleelement4.3.3Thesectionelement4.3.4Thenavelement4.3.5Theasideelement4.3.6Theh1,h2,h3,h4,h5, andh6elements4.3.7Thehgroupelement4.3.8Theheaderelement4.3.9Thefooterelement4.3.10Theaddresselement4.3.11Headings and outlines4.3.11.1Sample outlines4.3.11.2Exposing outlines to users4.3.12Usage summary4.3.12.1Article or section? 4.3.1Thebodyelement 4.3.2Thearticleelement 4.3.3Thesectionelement 4.3.4Thenavelement 4.3.5Theasideelement 4.3.6Theh1,h2,h3,h4,h5, andh6elements 4.3.7Thehgroupelement 4.3.8Theheaderelement 4.3.9Thefooterelement 4.3.10Theaddresselement 4.3.11Headings and outlines4.3.11.1Sample outlines4.3.11.2Exposing outlines to users 4.3.11.1Sample outlines 4.3.11.2Exposing outlines to users 4.3.12Usage summary4.3.12.1Article or section? 4.3.12.1Article or section? 4.4Grouping content4.4.1Thepelement4.4.2Thehrelement4.4.3Thepreelement4.4.4Theblockquoteelement4.4.5Theolelement4.4.6Theulelement4.4.7Themenuelement4.4.8Thelielement4.4.9Thedlelement4.4.10Thedtelement4.4.11Theddelement4.4.12Thefigureelement4.4.13Thefigcaptionelement4.4.14Themainelement4.4.15Thesearchelement4.4.16Thedivelement 4.4.1Thepelement 4.4.2Thehrelement 4.4.3Thepreelement 4.4.4Theblockquoteelement 4.4.5Theolelement 4.4.6Theulelement 4.4.7Themenuelement 4.4.8Thelielement 4.4.9Thedlelement 4.4.10Thedtelement 4.4.11Theddelement 4.4.12Thefigureelement 4.4.13Thefigcaptionelement 4.4.14Themainelement 4.4.15Thesearchelement 4.4.16Thedivelement 4.5Text-level semantics4.5.1Theaelement4.5.2Theemelement4.5.3Thestrongelement4.5.4Thesmallelement4.5.5Theselement4.5.6Theciteelement4.5.7Theqelement4.5.8Thedfnelement4.5.9Theabbrelement4.5.10Therubyelement4.5.11Thertelement4.5.12Therpelement4.5.13Thedataelement4.5.14Thetimeelement4.5.15Thecodeelement4.5.16Thevarelement4.5.17Thesampelement4.5.18Thekbdelement4.5.19Thesubandsupelements4.5.20Theielement4.5.21Thebelement4.5.22Theuelement4.5.23Themarkelement4.5.24Thebdielement4.5.25Thebdoelement4.5.26Thespanelement4.5.27Thebrelement4.5.28Thewbrelement4.5.29Usage summary 4.5.1Theaelement 4.5.2Theemelement 4.5.3Thestrongelement 4.5.4Thesmallelement 4.5.5Theselement 4.5.6Theciteelement 4.5.7Theqelement 4.5.8Thedfnelement 4.5.9Theabbrelement 4.5.10Therubyelement 4.5.11Thertelement 4.5.12Therpelement 4.5.13Thedataelement 4.5.14Thetimeelement 4.5.15Thecodeelement 4.5.16Thevarelement 4.5.17Thesampelement 4.5.18Thekbdelement 4.5.19Thesubandsupelements 4.5.20Theielement 4.5.21Thebelement 4.5.22Theuelement 4.5.23Themarkelement 4.5.24Thebdielement 4.5.25Thebdoelement 4.5.26Thespanelement 4.5.27Thebrelement 4.5.28Thewbrelement 4.5.29Usage summary 4.6Links4.6.1Introduction4.6.2Links created byaandareaelements4.6.3API foraandareaelements4.6.4Following hyperlinks4.6.5Downloading resources4.6.6Hyperlink auditing4.6.6.1The `Ping-From` and `Ping-To` headers4.6.7Link types4.6.7.1Link type ""alternate""4.6.7.2Link type ""author""4.6.7.3Link type ""bookmark""4.6.7.4Link type ""canonical""4.6.7.5Link type ""dns-prefetch""4.6.7.6Link type ""expect""4.6.7.7Link type ""external""4.6.7.8Link type ""help""4.6.7.9Link type ""icon""4.6.7.10Link type ""license""4.6.7.11Link type ""manifest""4.6.7.12Link type ""modulepreload""4.6.7.13Link type ""nofollow""4.6.7.14Link type ""noopener""4.6.7.15Link type ""noreferrer""4.6.7.16Link type ""opener""4.6.7.17Link type ""pingback""4.6.7.18Link type ""preconnect""4.6.7.19Link type ""prefetch""4.6.7.20Link type ""preload""4.6.7.21Link type ""privacy-policy""4.6.7.22Link type ""search""4.6.7.23Link type ""stylesheet""4.6.7.24Link type ""tag""4.6.7.25Link Type ""terms-of-service""4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev""4.6.7.27Other link types 4.6.1Introduction 4.6.2Links created byaandareaelements 4.6.3API foraandareaelements 4.6.4Following hyperlinks 4.6.5Downloading resources 4.6.6Hyperlink auditing4.6.6.1The `Ping-From` and `Ping-To` headers 4.6.6.1The `Ping-From` and `Ping-To` headers 4.6.7Link types4.6.7.1Link type ""alternate""4.6.7.2Link type ""author""4.6.7.3Link type ""bookmark""4.6.7.4Link type ""canonical""4.6.7.5Link type ""dns-prefetch""4.6.7.6Link type ""expect""4.6.7.7Link type ""external""4.6.7.8Link type ""help""4.6.7.9Link type ""icon""4.6.7.10Link type ""license""4.6.7.11Link type ""manifest""4.6.7.12Link type ""modulepreload""4.6.7.13Link type ""nofollow""4.6.7.14Link type ""noopener""4.6.7.15Link type ""noreferrer""4.6.7.16Link type ""opener""4.6.7.17Link type ""pingback""4.6.7.18Link type ""preconnect""4.6.7.19Link type ""prefetch""4.6.7.20Link type ""preload""4.6.7.21Link type ""privacy-policy""4.6.7.22Link type ""search""4.6.7.23Link type ""stylesheet""4.6.7.24Link type ""tag""4.6.7.25Link Type ""terms-of-service""4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev""4.6.7.27Other link types 4.6.7.1Link type ""alternate"" 4.6.7.2Link type ""author"" 4.6.7.3Link type ""bookmark"" 4.6.7.4Link type ""canonical"" 4.6.7.5Link type ""dns-prefetch"" 4.6.7.6Link type ""expect"" 4.6.7.7Link type ""external"" 4.6.7.8Link type ""help"" 4.6.7.9Link type ""icon"" 4.6.7.10Link type ""license"" 4.6.7.11Link type ""manifest"" 4.6.7.12Link type ""modulepreload"" 4.6.7.13Link type ""nofollow"" 4.6.7.14Link type ""noopener"" 4.6.7.15Link type ""noreferrer"" 4.6.7.16Link type ""opener"" 4.6.7.17Link type ""pingback"" 4.6.7.18Link type ""preconnect"" 4.6.7.19Link type ""prefetch"" 4.6.7.20Link type ""preload"" 4.6.7.21Link type ""privacy-policy"" 4.6.7.22Link type ""search"" 4.6.7.23Link type ""stylesheet"" 4.6.7.24Link type ""tag"" 4.6.7.25Link Type ""terms-of-service"" 4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev"" 4.6.7.26.1Link type ""next"" 4.6.7.26.2Link type ""prev"" 4.6.7.27Other link types 4.7Edits4.7.1Theinselement4.7.2Thedelelement4.7.3Attributes common toinsanddelelements4.7.4Edits and paragraphs4.7.5Edits and lists4.7.6Edits and tables 4.7.1Theinselement 4.7.2Thedelelement 4.7.3Attributes common toinsanddelelements 4.7.4Edits and paragraphs 4.7.5Edits and lists 4.7.6Edits and tables 4.8Embedded content4.8.1Thepictureelement4.8.2Thesourceelement4.8.3Theimgelement4.8.4Images4.8.4.1Introduction4.8.4.1.1Adaptive images4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers4.8.5Theiframeelement4.8.6Theembedelement4.8.7Theobjectelement4.8.8Thevideoelement4.8.9Theaudioelement4.8.10Thetrackelement4.8.11Media elements4.8.11.1Error codes4.8.11.2Location of the media resource4.8.11.3MIME types4.8.11.4Network states4.8.11.5Loading the media resource4.8.11.6Offsets into the media resource4.8.11.7Ready states4.8.11.8Playing the media resource4.8.11.9Seeking4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks4.8.11.12Identifying a track kind through a URL4.8.11.13User interface4.8.11.14Time ranges4.8.11.15TheTrackEventinterface4.8.11.16Events summary4.8.11.17Security and privacy considerations4.8.11.18Best practices for authors using media elements4.8.11.19Best practices for implementers of media elements4.8.12Themapelement4.8.13Theareaelement4.8.14Image maps4.8.14.1Authoring4.8.14.2Processing model4.8.15MathML4.8.16SVG4.8.17Dimension attributes 4.8.1Thepictureelement 4.8.2Thesourceelement 4.8.3Theimgelement 4.8.4Images4.8.4.1Introduction4.8.4.1.1Adaptive images4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers 4.8.4.1Introduction4.8.4.1.1Adaptive images 4.8.4.1.1Adaptive images 4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes 4.8.4.2.1Srcset attributes 4.8.4.2.2Sizes attributes 4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes 4.8.4.3.1When to obtain images 4.8.4.3.2Reacting to DOM mutations 4.8.4.3.3The list of available images 4.8.4.3.4Decoding images 4.8.4.3.5Updating the image data 4.8.4.3.6Preparing an image for presentation 4.8.4.3.7Selecting an image source 4.8.4.3.8Creating a source set from attributes 4.8.4.3.9Updating the source set 4.8.4.3.10Parsing a srcset attribute 4.8.4.3.11Parsing a sizes attribute 4.8.4.3.12Normalizing the source densities 4.8.4.3.13Reacting to environment changes 4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers 4.8.4.4.1General guidelines 4.8.4.4.2A link or button containing nothing but the image 4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations 4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos 4.8.4.4.5Text that has been rendered to a graphic for typographical effect 4.8.4.4.6A graphical representation of some of the surrounding text 4.8.4.4.7Ancillary images 4.8.4.4.8A purely decorative image that doesn't add any information 4.8.4.4.9A group of images that form a single larger picture with no links 4.8.4.4.10A group of images that form a single larger picture with links 4.8.4.4.11A key part of the content 4.8.4.4.12An image not intended for the user 4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images 4.8.4.4.14Guidance for markup generators 4.8.4.4.15Guidance for conformance checkers 4.8.5Theiframeelement 4.8.6Theembedelement 4.8.7Theobjectelement 4.8.8Thevideoelement 4.8.9Theaudioelement 4.8.10Thetrackelement 4.8.11Media elements4.8.11.1Error codes4.8.11.2Location of the media resource4.8.11.3MIME types4.8.11.4Network states4.8.11.5Loading the media resource4.8.11.6Offsets into the media resource4.8.11.7Ready states4.8.11.8Playing the media resource4.8.11.9Seeking4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks4.8.11.12Identifying a track kind through a URL4.8.11.13User interface4.8.11.14Time ranges4.8.11.15TheTrackEventinterface4.8.11.16Events summary4.8.11.17Security and privacy considerations4.8.11.18Best practices for authors using media elements4.8.11.19Best practices for implementers of media elements 4.8.11.1Error codes 4.8.11.2Location of the media resource 4.8.11.3MIME types 4.8.11.4Network states 4.8.11.5Loading the media resource 4.8.11.6Offsets into the media resource 4.8.11.7Ready states 4.8.11.8Playing the media resource 4.8.11.9Seeking 4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.10.1AudioTrackListandVideoTrackListobjects 4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks 4.8.11.11.1Text track model 4.8.11.11.2Sourcing in-band text tracks 4.8.11.11.3Sourcing out-of-band text tracks 4.8.11.11.4Guidelines for exposing cues in various formats as text track cues 4.8.11.11.5Text track API 4.8.11.11.6Event handlers for objects of the text track APIs 4.8.11.11.7Best practices for metadata text tracks 4.8.11.12Identifying a track kind through a URL 4.8.11.13User interface 4.8.11.14Time ranges 4.8.11.15TheTrackEventinterface 4.8.11.16Events summary 4.8.11.17Security and privacy considerations 4.8.11.18Best practices for authors using media elements 4.8.11.19Best practices for implementers of media elements 4.8.12Themapelement 4.8.13Theareaelement 4.8.14Image maps4.8.14.1Authoring4.8.14.2Processing model 4.8.14.1Authoring 4.8.14.2Processing model 4.8.15MathML 4.8.16SVG 4.8.17Dimension attributes 4.9Tabular data4.9.1Thetableelement4.9.1.1Techniques for describing tables4.9.1.2Techniques for table design4.9.2Thecaptionelement4.9.3Thecolgroupelement4.9.4Thecolelement4.9.5Thetbodyelement4.9.6Thetheadelement4.9.7Thetfootelement4.9.8Thetrelement4.9.9Thetdelement4.9.10Thethelement4.9.11Attributes common totdandthelements4.9.12Processing model4.9.12.1Forming a table4.9.12.2Forming relationships between data cells and header cells4.9.13Examples 4.9.1Thetableelement4.9.1.1Techniques for describing tables4.9.1.2Techniques for table design 4.9.1.1Techniques for describing tables 4.9.1.2Techniques for table design 4.9.2Thecaptionelement 4.9.3Thecolgroupelement 4.9.4Thecolelement 4.9.5Thetbodyelement 4.9.6Thetheadelement 4.9.7Thetfootelement 4.9.8Thetrelement 4.9.9Thetdelement 4.9.10Thethelement 4.9.11Attributes common totdandthelements 4.9.12Processing model4.9.12.1Forming a table4.9.12.2Forming relationships between data cells and header cells 4.9.12.1Forming a table 4.9.12.2Forming relationships between data cells and header cells 4.9.13Examples 4.10Forms4.10.1Introduction4.10.1.1Writing a form's user interface4.10.1.2Implementing the server-side processing for a form4.10.1.3Configuring a form to communicate with a server4.10.1.4Client-side form validation4.10.1.5Enabling client-side automatic filling of form controls4.10.1.6Improving the user experience on mobile devices4.10.1.7The difference between the field type, the autofill field name, and the input modality4.10.1.8Date, time, and number formats4.10.2Categories4.10.3Theformelement4.10.4Thelabelelement4.10.5Theinputelement4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button)4.10.5.2Implementation notes regarding localization of form controls4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute4.10.5.4Commoninputelement APIs4.10.5.5Common event behaviors4.10.6Thebuttonelement4.10.7Theselectelement4.10.8Thedatalistelement4.10.9Theoptgroupelement4.10.10Theoptionelement4.10.11Thetextareaelement4.10.12Theoutputelement4.10.13Theprogresselement4.10.14Themeterelement4.10.15Thefieldsetelement4.10.16Thelegendelement4.10.17Form control infrastructure4.10.17.1A form control's value4.10.17.2Mutability4.10.17.3Association of controls and forms4.10.18Attributes common to form controls4.10.18.1Naming form controls: thenameattribute4.10.18.2Submitting element directionality: thedirnameattribute4.10.18.3Limiting user input length: themaxlengthattribute4.10.18.4Setting minimum input length requirements: theminlengthattribute4.10.18.5Enabling and disabling form controls: thedisabledattribute4.10.18.6Form submission attributes4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model4.10.19APIs for the text control selections4.10.20Constraints4.10.20.1Definitions4.10.20.2Constraint validation4.10.20.3The constraint validation API4.10.20.4Security4.10.21Form submission4.10.21.1Introduction4.10.21.2Implicit submission4.10.21.3Form submission algorithm4.10.21.4Constructing the entry list4.10.21.5Selecting a form submission encoding4.10.21.6Converting an entry list to a list of name-value pairs4.10.21.7URL-encoded form data4.10.21.8Multipart form data4.10.21.9Plain text form data4.10.21.10TheSubmitEventinterface4.10.21.11TheFormDataEventinterface4.10.22Resetting a form 4.10.1Introduction4.10.1.1Writing a form's user interface4.10.1.2Implementing the server-side processing for a form4.10.1.3Configuring a form to communicate with a server4.10.1.4Client-side form validation4.10.1.5Enabling client-side automatic filling of form controls4.10.1.6Improving the user experience on mobile devices4.10.1.7The difference between the field type, the autofill field name, and the input modality4.10.1.8Date, time, and number formats 4.10.1.1Writing a form's user interface 4.10.1.2Implementing the server-side processing for a form 4.10.1.3Configuring a form to communicate with a server 4.10.1.4Client-side form validation 4.10.1.5Enabling client-side automatic filling of form controls 4.10.1.6Improving the user experience on mobile devices 4.10.1.7The difference between the field type, the autofill field name, and the input modality 4.10.1.8Date, time, and number formats 4.10.2Categories 4.10.3Theformelement 4.10.4Thelabelelement 4.10.5Theinputelement4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button)4.10.5.2Implementation notes regarding localization of form controls4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute4.10.5.4Commoninputelement APIs4.10.5.5Common event behaviors 4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button) 4.10.5.1.1Hidden state (type=hidden) 4.10.5.1.2Text (type=text) state and Search state (type=search) 4.10.5.1.3Telephone state (type=tel) 4.10.5.1.4URL state (type=url) 4.10.5.1.5Email state (type=email) 4.10.5.1.6Password state (type=password) 4.10.5.1.7Date state (type=date) 4.10.5.1.8Month state (type=month) 4.10.5.1.9Week state (type=week) 4.10.5.1.10Time state (type=time) 4.10.5.1.11Local Date and Time state (type=datetime-local) 4.10.5.1.12Number state (type=number) 4.10.5.1.13Range state (type=range) 4.10.5.1.14Color state (type=color) 4.10.5.1.15Checkbox state (type=checkbox) 4.10.5.1.16Radio Button state (type=radio) 4.10.5.1.17File Upload state (type=file) 4.10.5.1.18Submit Button state (type=submit) 4.10.5.1.19Image Button state (type=image) 4.10.5.1.20Reset Button state (type=reset) 4.10.5.1.21Button state (type=button) 4.10.5.2Implementation notes regarding localization of form controls 4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute 4.10.5.3.1Themaxlengthandminlengthattributes 4.10.5.3.2Thesizeattribute 4.10.5.3.3Thereadonlyattribute 4.10.5.3.4Therequiredattribute 4.10.5.3.5Themultipleattribute 4.10.5.3.6Thepatternattribute 4.10.5.3.7Theminandmaxattributes 4.10.5.3.8Thestepattribute 4.10.5.3.9Thelistattribute 4.10.5.3.10Theplaceholderattribute 4.10.5.4Commoninputelement APIs 4.10.5.5Common event behaviors 4.10.6Thebuttonelement 4.10.7Theselectelement 4.10.8Thedatalistelement 4.10.9Theoptgroupelement 4.10.10Theoptionelement 4.10.11Thetextareaelement 4.10.12Theoutputelement 4.10.13Theprogresselement 4.10.14Themeterelement 4.10.15Thefieldsetelement 4.10.16Thelegendelement 4.10.17Form control infrastructure4.10.17.1A form control's value4.10.17.2Mutability4.10.17.3Association of controls and forms 4.10.17.1A form control's value 4.10.17.2Mutability 4.10.17.3Association of controls and forms 4.10.18Attributes common to form controls4.10.18.1Naming form controls: thenameattribute4.10.18.2Submitting element directionality: thedirnameattribute4.10.18.3Limiting user input length: themaxlengthattribute4.10.18.4Setting minimum input length requirements: theminlengthattribute4.10.18.5Enabling and disabling form controls: thedisabledattribute4.10.18.6Form submission attributes4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model 4.10.18.1Naming form controls: thenameattribute 4.10.18.2Submitting element directionality: thedirnameattribute 4.10.18.3Limiting user input length: themaxlengthattribute 4.10.18.4Setting minimum input length requirements: theminlengthattribute 4.10.18.5Enabling and disabling form controls: thedisabledattribute 4.10.18.6Form submission attributes 4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model 4.10.18.7.1Autofilling form controls: theautocompleteattribute 4.10.18.7.2Processing model 4.10.19APIs for the text control selections 4.10.20Constraints4.10.20.1Definitions4.10.20.2Constraint validation4.10.20.3The constraint validation API4.10.20.4Security 4.10.20.1Definitions 4.10.20.2Constraint validation 4.10.20.3The constraint validation API 4.10.20.4Security 4.10.21Form submission4.10.21.1Introduction4.10.21.2Implicit submission4.10.21.3Form submission algorithm4.10.21.4Constructing the entry list4.10.21.5Selecting a form submission encoding4.10.21.6Converting an entry list to a list of name-value pairs4.10.21.7URL-encoded form data4.10.21.8Multipart form data4.10.21.9Plain text form data4.10.21.10TheSubmitEventinterface4.10.21.11TheFormDataEventinterface 4.10.21.1Introduction 4.10.21.2Implicit submission 4.10.21.3Form submission algorithm 4.10.21.4Constructing the entry list 4.10.21.5Selecting a form submission encoding 4.10.21.6Converting an entry list to a list of name-value pairs 4.10.21.7URL-encoded form data 4.10.21.8Multipart form data 4.10.21.9Plain text form data 4.10.21.10TheSubmitEventinterface 4.10.21.11TheFormDataEventinterface 4.10.22Resetting a form 4.11Interactive elements4.11.1Thedetailselement4.11.2Thesummaryelement4.11.3Commands4.11.3.1Facets4.11.3.2Using theaelement to define a command4.11.3.3Using thebuttonelement to define a command4.11.3.4Using theinputelement to define a command4.11.3.5Using theoptionelement to define a command4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command4.11.3.7Using theaccesskeyattribute to define a command on other elements4.11.4Thedialogelement 4.11.1Thedetailselement 4.11.2Thesummaryelement 4.11.3Commands4.11.3.1Facets4.11.3.2Using theaelement to define a command4.11.3.3Using thebuttonelement to define a command4.11.3.4Using theinputelement to define a command4.11.3.5Using theoptionelement to define a command4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command4.11.3.7Using theaccesskeyattribute to define a command on other elements 4.11.3.1Facets 4.11.3.2Using theaelement to define a command 4.11.3.3Using thebuttonelement to define a command 4.11.3.4Using theinputelement to define a command 4.11.3.5Using theoptionelement to define a command 4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command 4.11.3.7Using theaccesskeyattribute to define a command on other elements 4.11.4Thedialogelement 4.12Scripting4.12.1Thescriptelement4.12.1.1Processing model4.12.1.2Scripting languages4.12.1.3Restrictions for contents ofscriptelements4.12.1.4Inline documentation for external scripts4.12.1.5Interaction ofscriptelements and XSLT4.12.2Thenoscriptelement4.12.3Thetemplateelement4.12.3.1Interaction oftemplateelements with XSLT and XPath4.12.4Theslotelement4.12.5Thecanvaselement4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context4.12.5.4Color spaces and color space
  conversion4.12.5.5Serializing bitmaps to a file4.12.5.6Security withcanvaselements4.12.5.7Premultiplied alpha and the 2D rendering context 4.12.1Thescriptelement4.12.1.1Processing model4.12.1.2Scripting languages4.12.1.3Restrictions for contents ofscriptelements4.12.1.4Inline documentation for external scripts4.12.1.5Interaction ofscriptelements and XSLT 4.12.1.1Processing model 4.12.1.2Scripting languages 4.12.1.3Restrictions for contents ofscriptelements 4.12.1.4Inline documentation for external scripts 4.12.1.5Interaction ofscriptelements and XSLT 4.12.2Thenoscriptelement 4.12.3Thetemplateelement4.12.3.1Interaction oftemplateelements with XSLT and XPath 4.12.3.1Interaction oftemplateelements with XSLT and XPath 4.12.4Theslotelement 4.12.5Thecanvaselement4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context4.12.5.4Color spaces and color space
  conversion4.12.5.5Serializing bitmaps to a file4.12.5.6Security withcanvaselements4.12.5.7Premultiplied alpha and the 2D rendering context 4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples 4.12.5.1.1Implementation notes 4.12.5.1.2The canvas state 4.12.5.1.3Line styles 4.12.5.1.4Text styles 4.12.5.1.5Building paths 4.12.5.1.6Path2Dobjects 4.12.5.1.7Transformations 4.12.5.1.8Image sources for 2D rendering contexts 4.12.5.1.9Fill and stroke styles 4.12.5.1.10Drawing rectangles to the bitmap 4.12.5.1.11Drawing text to the bitmap 4.12.5.1.12Drawing paths to the canvas 4.12.5.1.13Drawing focus rings 4.12.5.1.14Drawing images 4.12.5.1.15Pixel manipulation 4.12.5.1.16Compositing 4.12.5.1.17Image smoothing 4.12.5.1.18Shadows 4.12.5.1.19Filters 4.12.5.1.20Working with externally-defined SVG filters 4.12.5.1.21Drawing model 4.12.5.1.22Best practices 4.12.5.1.23Examples 4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.2.1Introduction 4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context 4.12.5.3.1The offscreen 2D rendering context 4.12.5.4Color spaces and color space
  conversion 4.12.5.5Serializing bitmaps to a file 4.12.5.6Security withcanvaselements 4.12.5.7Premultiplied alpha and the 2D rendering context 4.13Custom elements4.13.1Introduction4.13.1.1Creating an autonomous custom element4.13.1.2Creating a form-associated custom element4.13.1.3Creating a custom element with default accessible roles, states, and properties4.13.1.4Creating a customized built-in element4.13.1.5Drawbacks of autonomous custom elements4.13.1.6Upgrading elements after their creation4.13.1.7Exposing custom element states4.13.2Requirements for custom element constructors and
  reactions4.13.3Core concepts4.13.4TheCustomElementRegistryinterface4.13.5Upgrades4.13.6Custom element reactions4.13.7Element internals4.13.7.1TheElementInternalsinterface4.13.7.2Shadow root access4.13.7.3Form-associated custom elements4.13.7.4Accessibility semantics4.13.7.5Custom state pseudo-class 4.13.1Introduction4.13.1.1Creating an autonomous custom element4.13.1.2Creating a form-associated custom element4.13.1.3Creating a custom element with default accessible roles, states, and properties4.13.1.4Creating a customized built-in element4.13.1.5Drawbacks of autonomous custom elements4.13.1.6Upgrading elements after their creation4.13.1.7Exposing custom element states 4.13.1.1Creating an autonomous custom element 4.13.1.2Creating a form-associated custom element 4.13.1.3Creating a custom element with default accessible roles, states, and properties 4.13.1.4Creating a customized built-in element 4.13.1.5Drawbacks of autonomous custom elements 4.13.1.6Upgrading elements after their creation 4.13.1.7Exposing custom element states 4.13.2Requirements for custom element constructors and
  reactions 4.13.3Core concepts 4.13.4TheCustomElementRegistryinterface 4.13.5Upgrades 4.13.6Custom element reactions 4.13.7Element internals4.13.7.1TheElementInternalsinterface4.13.7.2Shadow root access4.13.7.3Form-associated custom elements4.13.7.4Accessibility semantics4.13.7.5Custom state pseudo-class 4.13.7.1TheElementInternalsinterface 4.13.7.2Shadow root access 4.13.7.3Form-associated custom elements 4.13.7.4Accessibility semantics 4.13.7.5Custom state pseudo-class 4.14Common idioms without dedicated elements4.14.1Breadcrumb navigation4.14.2Tag clouds4.14.3Conversations4.14.4Footnotes 4.14.1Breadcrumb navigation 4.14.2Tag clouds 4.14.3Conversations 4.14.4Footnotes 4.15Disabled elements 4.16Matching HTML elements using selectors and CSS4.16.1Case-sensitivity of the CSS 'attr()' function4.16.2Case-sensitivity of selectors4.16.3Pseudo-classes 4.16.1Case-sensitivity of the CSS 'attr()' function 4.16.2Case-sensitivity of selectors 4.16.3Pseudo-classes 5Microdata5.1Introduction5.1.1Overview5.1.2The basic syntax5.1.3Typed items5.1.4Global identifiers for items5.1.5Selecting names when defining vocabularies5.2Encoding microdata5.2.1The microdata model5.2.2Items5.2.3Names: theitempropattribute5.2.4Values5.2.5Associating names with items5.2.6Microdata and other namespaces5.3Sample microdata vocabularies5.3.1vCard5.3.1.1Conversion to vCard5.3.1.2Examples5.3.2vEvent5.3.2.1Conversion to iCalendar5.3.2.2Examples5.3.3Licensing works5.3.3.1Examples5.4Converting HTML to other formats5.4.1JSON 5.1Introduction5.1.1Overview5.1.2The basic syntax5.1.3Typed items5.1.4Global identifiers for items5.1.5Selecting names when defining vocabularies 5.1.1Overview 5.1.2The basic syntax 5.1.3Typed items 5.1.4Global identifiers for items 5.1.5Selecting names when defining vocabularies 5.2Encoding microdata5.2.1The microdata model5.2.2Items5.2.3Names: theitempropattribute5.2.4Values5.2.5Associating names with items5.2.6Microdata and other namespaces 5.2.1The microdata model 5.2.2Items 5.2.3Names: theitempropattribute 5.2.4Values 5.2.5Associating names with items 5.2.6Microdata and other namespaces 5.3Sample microdata vocabularies5.3.1vCard5.3.1.1Conversion to vCard5.3.1.2Examples5.3.2vEvent5.3.2.1Conversion to iCalendar5.3.2.2Examples5.3.3Licensing works5.3.3.1Examples 5.3.1vCard5.3.1.1Conversion to vCard5.3.1.2Examples 5.3.1.1Conversion to vCard 5.3.1.2Examples 5.3.2vEvent5.3.2.1Conversion to iCalendar5.3.2.2Examples 5.3.2.1Conversion to iCalendar 5.3.2.2Examples 5.3.3Licensing works5.3.3.1Examples 5.3.3.1Examples 5.4Converting HTML to other formats5.4.1JSON 5.4.1JSON 6User interaction6.1Thehiddenattribute6.2Page visibility6.2.1TheVisibilityStateEntryinterface6.3Inert subtrees6.3.1Modal dialogs and inert subtrees6.3.2Theinertattribute6.4Tracking user activation6.4.1Data model6.4.2Processing model6.4.3APIs gated by user activation6.4.4TheUserActivationinterface6.4.5User agent automation6.5Activation behavior of elements6.5.1TheToggleEventinterface6.6Focus6.6.1Introduction6.6.2Data model6.6.3Thetabindexattribute6.6.4Processing model6.6.5Sequential focus navigation6.6.6Focus management APIs6.6.7Theautofocusattribute6.7Assigning keyboard shortcuts6.7.1Introduction6.7.2Theaccesskeyattribute6.7.3Processing
  model6.8Editing6.8.1Making document regions editable: Thecontenteditablecontent attribute6.8.2Making entire documents
  editable: thedesignModegetter and setter6.8.3Best practices for in-page editors6.8.4Editing APIs6.8.5Spelling and grammar checking6.8.6Writing suggestions6.8.7Autocapitalization6.8.8Autocorrection6.8.9Input modalities: theinputmodeattribute6.8.10Input modalities: theenterkeyhintattribute6.9Find-in-page6.9.1Introduction6.9.2Interaction withdetailsandhidden=until-found6.9.3Interaction with selection6.10Close requests and close watchers6.10.1Close requests6.10.2Close watcher infrastructure6.10.3TheCloseWatcherinterface6.11Drag and drop6.11.1Introduction6.11.2The drag data store6.11.3TheDataTransferinterface6.11.3.1TheDataTransferItemListinterface6.11.3.2TheDataTransferIteminterface6.11.4TheDragEventinterface6.11.5Processing model6.11.6Events summary6.11.7Thedraggableattribute6.11.8Security risks in the drag-and-drop model6.12Thepopoverattribute6.12.1The popover target attributes6.12.2Popover light dismiss 6.1Thehiddenattribute 6.2Page visibility6.2.1TheVisibilityStateEntryinterface 6.2.1TheVisibilityStateEntryinterface 6.3Inert subtrees6.3.1Modal dialogs and inert subtrees6.3.2Theinertattribute 6.3.1Modal dialogs and inert subtrees 6.3.2Theinertattribute 6.4Tracking user activation6.4.1Data model6.4.2Processing model6.4.3APIs gated by user activation6.4.4TheUserActivationinterface6.4.5User agent automation 6.4.1Data model 6.4.2Processing model 6.4.3APIs gated by user activation 6.4.4TheUserActivationinterface 6.4.5User agent automation 6.5Activation behavior of elements6.5.1TheToggleEventinterface 6.5.1TheToggleEventinterface 6.6Focus6.6.1Introduction6.6.2Data model6.6.3Thetabindexattribute6.6.4Processing model6.6.5Sequential focus navigation6.6.6Focus management APIs6.6.7Theautofocusattribute 6.6.1Introduction 6.6.2Data model 6.6.3Thetabindexattribute 6.6.4Processing model 6.6.5Sequential focus navigation 6.6.6Focus management APIs 6.6.7Theautofocusattribute 6.7Assigning keyboard shortcuts6.7.1Introduction6.7.2Theaccesskeyattribute6.7.3Processing
  model 6.7.1Introduction 6.7.2Theaccesskeyattribute 6.7.3Processing
  model 6.8Editing6.8.1Making document regions editable: Thecontenteditablecontent attribute6.8.2Making entire documents
  editable: thedesignModegetter and setter6.8.3Best practices for in-page editors6.8.4Editing APIs6.8.5Spelling and grammar checking6.8.6Writing suggestions6.8.7Autocapitalization6.8.8Autocorrection6.8.9Input modalities: theinputmodeattribute6.8.10Input modalities: theenterkeyhintattribute 6.8.1Making document regions editable: Thecontenteditablecontent attribute 6.8.2Making entire documents
  editable: thedesignModegetter and setter 6.8.3Best practices for in-page editors 6.8.4Editing APIs 6.8.5Spelling and grammar checking 6.8.6Writing suggestions 6.8.7Autocapitalization 6.8.8Autocorrection 6.8.9Input modalities: theinputmodeattribute 6.8.10Input modalities: theenterkeyhintattribute 6.9Find-in-page6.9.1Introduction6.9.2Interaction withdetailsandhidden=until-found6.9.3Interaction with selection 6.9.1Introduction 6.9.2Interaction withdetailsandhidden=until-found 6.9.3Interaction with selection 6.10Close requests and close watchers6.10.1Close requests6.10.2Close watcher infrastructure6.10.3TheCloseWatcherinterface 6.10.1Close requests 6.10.2Close watcher infrastructure 6.10.3TheCloseWatcherinterface 6.11Drag and drop6.11.1Introduction6.11.2The drag data store6.11.3TheDataTransferinterface6.11.3.1TheDataTransferItemListinterface6.11.3.2TheDataTransferIteminterface6.11.4TheDragEventinterface6.11.5Processing model6.11.6Events summary6.11.7Thedraggableattribute6.11.8Security risks in the drag-and-drop model 6.11.1Introduction 6.11.2The drag data store 6.11.3TheDataTransferinterface6.11.3.1TheDataTransferItemListinterface6.11.3.2TheDataTransferIteminterface 6.11.3.1TheDataTransferItemListinterface 6.11.3.2TheDataTransferIteminterface 6.11.4TheDragEventinterface 6.11.5Processing model 6.11.6Events summary 6.11.7Thedraggableattribute 6.11.8Security risks in the drag-and-drop model 6.12Thepopoverattribute6.12.1The popover target attributes6.12.2Popover light dismiss 6.12.1The popover target attributes 6.12.2Popover light dismiss 7Loading web pages7.1Supporting concepts7.1.1Origins7.1.1.1Sites7.1.1.2Relaxing the same-origin restriction7.1.2Origin-keyed agent clusters7.1.3Cross-origin opener policies7.1.3.1The headers7.1.3.2Browsing context group
  switches due to opener policy7.1.3.3Reporting7.1.4Cross-origin embedder policies7.1.4.1The headers7.1.4.2Embedder policy checks7.1.5Sandboxing7.1.6Policy containers7.2APIs related to navigation and
  session history7.2.1Security infrastructure forWindow,WindowProxy, andLocationobjects7.2.1.1Integration with IDL7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]]7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O)7.2.2TheWindowobject7.2.2.1Opening and closing windows7.2.2.2Indexed access on theWindowobject7.2.2.3Named access on theWindowobject7.2.2.4Accessing related windows7.2.2.5Historical browser interface element APIs7.2.2.6Script settings forWindowobjects7.2.3TheWindowProxyexotic object7.2.3.1[[GetPrototypeOf]] ( )7.2.3.2[[SetPrototypeOf]] (V)7.2.3.3[[IsExtensible]] ( )7.2.3.4[[PreventExtensions]] ( )7.2.3.5[[GetOwnProperty]] (P)7.2.3.6[[DefineOwnProperty]] (P,Desc)7.2.3.7[[Get]] (P,Receiver)7.2.3.8[[Set]] (P,V,Receiver)7.2.3.9[[Delete]] (P)7.2.3.10[[OwnPropertyKeys]] ( )7.2.4TheLocationinterface7.2.4.1[[GetPrototypeOf]] ( )7.2.4.2[[SetPrototypeOf]] (V)7.2.4.3[[IsExtensible]] ( )7.2.4.4[[PreventExtensions]] ( )7.2.4.5[[GetOwnProperty]] (P)7.2.4.6[[DefineOwnProperty]] (P,Desc)7.2.4.7[[Get]] (P,Receiver)7.2.4.8[[Set]] (P,V,Receiver)7.2.4.9[[Delete]] (P)7.2.4.10[[OwnPropertyKeys]] ( )7.2.5TheHistoryinterface7.2.6The navigation API7.2.6.1Introduction7.2.6.2TheNavigationinterface7.2.6.3Core infrastructure7.2.6.4Initializing and updating the entry list7.2.6.5TheNavigationHistoryEntryinterface7.2.6.6The history entry list7.2.6.7Initiating navigations7.2.6.8Ongoing navigation tracking7.2.6.9TheNavigationActivationinterface7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior7.2.7Event interfaces7.2.7.1TheNavigationCurrentEntryChangeEventinterface7.2.7.2ThePopStateEventinterface7.2.7.3TheHashChangeEventinterface7.2.7.4ThePageSwapEventinterface7.2.7.5ThePageRevealEventinterface7.2.7.6ThePageTransitionEventinterface7.2.7.7TheBeforeUnloadEventinterface7.2.8TheNotRestoredReasonsinterface7.3Infrastructure for sequences of documents7.3.1Navigables7.3.1.1Traversable navigables7.3.1.2Top-level traversables7.3.1.3Child navigables7.3.1.4Jake diagrams7.3.1.5Related navigable collections7.3.1.6Navigable destruction7.3.1.7Navigable target names7.3.2Browsing contexts7.3.2.1Creating browsing contexts7.3.2.2Related browsing contexts7.3.2.3Groupings of browsing contexts7.3.3Fully active documents7.4Navigation and session
  history7.4.1Session history7.4.1.1Session history entries7.4.1.2Document state7.4.1.3Centralized modifications of session history7.4.1.4Low-level operations on session history7.4.2Navigation7.4.2.1Supporting concepts7.4.2.2Beginning navigation7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software7.4.2.4Preventing navigation7.4.2.5Aborting navigation7.4.3Reloading and traversing7.4.4Non-fragment synchronous ""navigations""7.4.5Populating a session history entry7.4.6Applying the history step7.4.6.1Updating the traversable7.4.6.2Updating the document7.4.6.3Revealing the document7.4.6.4Scrolling to a fragment7.4.6.5Persisted history entry state7.5Document lifecycle7.5.1Shared document creation infrastructure7.5.2Loading HTML documents7.5.3Loading XML documents7.5.4Loading text documents7.5.5Loadingmultipart/x-mixed-replacedocuments7.5.6Loading media documents7.5.7Loading a document for inline content that doesn't have a
  DOM7.5.8Finishing the loading process7.5.9Unloading documents7.5.10Destroying documents7.5.11Aborting a document load7.6The `X-Frame-Options` header7.7The `Refresh` header7.8Browser user interface
  considerations 7.1Supporting concepts7.1.1Origins7.1.1.1Sites7.1.1.2Relaxing the same-origin restriction7.1.2Origin-keyed agent clusters7.1.3Cross-origin opener policies7.1.3.1The headers7.1.3.2Browsing context group
  switches due to opener policy7.1.3.3Reporting7.1.4Cross-origin embedder policies7.1.4.1The headers7.1.4.2Embedder policy checks7.1.5Sandboxing7.1.6Policy containers 7.1.1Origins7.1.1.1Sites7.1.1.2Relaxing the same-origin restriction 7.1.1.1Sites 7.1.1.2Relaxing the same-origin restriction 7.1.2Origin-keyed agent clusters 7.1.3Cross-origin opener policies7.1.3.1The headers7.1.3.2Browsing context group
  switches due to opener policy7.1.3.3Reporting 7.1.3.1The headers 7.1.3.2Browsing context group
  switches due to opener policy 7.1.3.3Reporting 7.1.4Cross-origin embedder policies7.1.4.1The headers7.1.4.2Embedder policy checks 7.1.4.1The headers 7.1.4.2Embedder policy checks 7.1.5Sandboxing 7.1.6Policy containers 7.2APIs related to navigation and
  session history7.2.1Security infrastructure forWindow,WindowProxy, andLocationobjects7.2.1.1Integration with IDL7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]]7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O)7.2.2TheWindowobject7.2.2.1Opening and closing windows7.2.2.2Indexed access on theWindowobject7.2.2.3Named access on theWindowobject7.2.2.4Accessing related windows7.2.2.5Historical browser interface element APIs7.2.2.6Script settings forWindowobjects7.2.3TheWindowProxyexotic object7.2.3.1[[GetPrototypeOf]] ( )7.2.3.2[[SetPrototypeOf]] (V)7.2.3.3[[IsExtensible]] ( )7.2.3.4[[PreventExtensions]] ( )7.2.3.5[[GetOwnProperty]] (P)7.2.3.6[[DefineOwnProperty]] (P,Desc)7.2.3.7[[Get]] (P,Receiver)7.2.3.8[[Set]] (P,V,Receiver)7.2.3.9[[Delete]] (P)7.2.3.10[[OwnPropertyKeys]] ( )7.2.4TheLocationinterface7.2.4.1[[GetPrototypeOf]] ( )7.2.4.2[[SetPrototypeOf]] (V)7.2.4.3[[IsExtensible]] ( )7.2.4.4[[PreventExtensions]] ( )7.2.4.5[[GetOwnProperty]] (P)7.2.4.6[[DefineOwnProperty]] (P,Desc)7.2.4.7[[Get]] (P,Receiver)7.2.4.8[[Set]] (P,V,Receiver)7.2.4.9[[Delete]] (P)7.2.4.10[[OwnPropertyKeys]] ( )7.2.5TheHistoryinterface7.2.6The navigation API7.2.6.1Introduction7.2.6.2TheNavigationinterface7.2.6.3Core infrastructure7.2.6.4Initializing and updating the entry list7.2.6.5TheNavigationHistoryEntryinterface7.2.6.6The history entry list7.2.6.7Initiating navigations7.2.6.8Ongoing navigation tracking7.2.6.9TheNavigationActivationinterface7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior7.2.7Event interfaces7.2.7.1TheNavigationCurrentEntryChangeEventinterface7.2.7.2ThePopStateEventinterface7.2.7.3TheHashChangeEventinterface7.2.7.4ThePageSwapEventinterface7.2.7.5ThePageRevealEventinterface7.2.7.6ThePageTransitionEventinterface7.2.7.7TheBeforeUnloadEventinterface7.2.8TheNotRestoredReasonsinterface 7.2.1Security infrastructure forWindow,WindowProxy, andLocationobjects7.2.1.1Integration with IDL7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]]7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.1.1Integration with IDL 7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]] 7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.1.3.1CrossOriginProperties (O) 7.2.1.3.2CrossOriginPropertyFallback (P) 7.2.1.3.3IsPlatformObjectSameOrigin (O) 7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P) 7.2.1.3.5CrossOriginGet (O,P,Receiver) 7.2.1.3.6CrossOriginSet (O,P,V,Receiver) 7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.2TheWindowobject7.2.2.1Opening and closing windows7.2.2.2Indexed access on theWindowobject7.2.2.3Named access on theWindowobject7.2.2.4Accessing related windows7.2.2.5Historical browser interface element APIs7.2.2.6Script settings forWindowobjects 7.2.2.1Opening and closing windows 7.2.2.2Indexed access on theWindowobject 7.2.2.3Named access on theWindowobject 7.2.2.4Accessing related windows 7.2.2.5Historical browser interface element APIs 7.2.2.6Script settings forWindowobjects 7.2.3TheWindowProxyexotic object7.2.3.1[[GetPrototypeOf]] ( )7.2.3.2[[SetPrototypeOf]] (V)7.2.3.3[[IsExtensible]] ( )7.2.3.4[[PreventExtensions]] ( )7.2.3.5[[GetOwnProperty]] (P)7.2.3.6[[DefineOwnProperty]] (P,Desc)7.2.3.7[[Get]] (P,Receiver)7.2.3.8[[Set]] (P,V,Receiver)7.2.3.9[[Delete]] (P)7.2.3.10[[OwnPropertyKeys]] ( ) 7.2.3.1[[GetPrototypeOf]] ( ) 7.2.3.2[[SetPrototypeOf]] (V) 7.2.3.3[[IsExtensible]] ( ) 7.2.3.4[[PreventExtensions]] ( ) 7.2.3.5[[GetOwnProperty]] (P) 7.2.3.6[[DefineOwnProperty]] (P,Desc) 7.2.3.7[[Get]] (P,Receiver) 7.2.3.8[[Set]] (P,V,Receiver) 7.2.3.9[[Delete]] (P) 7.2.3.10[[OwnPropertyKeys]] ( ) 7.2.4TheLocationinterface7.2.4.1[[GetPrototypeOf]] ( )7.2.4.2[[SetPrototypeOf]] (V)7.2.4.3[[IsExtensible]] ( )7.2.4.4[[PreventExtensions]] ( )7.2.4.5[[GetOwnProperty]] (P)7.2.4.6[[DefineOwnProperty]] (P,Desc)7.2.4.7[[Get]] (P,Receiver)7.2.4.8[[Set]] (P,V,Receiver)7.2.4.9[[Delete]] (P)7.2.4.10[[OwnPropertyKeys]] ( ) 7.2.4.1[[GetPrototypeOf]] ( ) 7.2.4.2[[SetPrototypeOf]] (V) 7.2.4.3[[IsExtensible]] ( ) 7.2.4.4[[PreventExtensions]] ( ) 7.2.4.5[[GetOwnProperty]] (P) 7.2.4.6[[DefineOwnProperty]] (P,Desc) 7.2.4.7[[Get]] (P,Receiver) 7.2.4.8[[Set]] (P,V,Receiver) 7.2.4.9[[Delete]] (P) 7.2.4.10[[OwnPropertyKeys]] ( ) 7.2.5TheHistoryinterface 7.2.6The navigation API7.2.6.1Introduction7.2.6.2TheNavigationinterface7.2.6.3Core infrastructure7.2.6.4Initializing and updating the entry list7.2.6.5TheNavigationHistoryEntryinterface7.2.6.6The history entry list7.2.6.7Initiating navigations7.2.6.8Ongoing navigation tracking7.2.6.9TheNavigationActivationinterface7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior 7.2.6.1Introduction 7.2.6.2TheNavigationinterface 7.2.6.3Core infrastructure 7.2.6.4Initializing and updating the entry list 7.2.6.5TheNavigationHistoryEntryinterface 7.2.6.6The history entry list 7.2.6.7Initiating navigations 7.2.6.8Ongoing navigation tracking 7.2.6.9TheNavigationActivationinterface 7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior 7.2.6.10.1TheNavigateEventinterface 7.2.6.10.2TheNavigationDestinationinterface 7.2.6.10.3Firing the event 7.2.6.10.4Scroll and focus behavior 7.2.7Event interfaces7.2.7.1TheNavigationCurrentEntryChangeEventinterface7.2.7.2ThePopStateEventinterface7.2.7.3TheHashChangeEventinterface7.2.7.4ThePageSwapEventinterface7.2.7.5ThePageRevealEventinterface7.2.7.6ThePageTransitionEventinterface7.2.7.7TheBeforeUnloadEventinterface 7.2.7.1TheNavigationCurrentEntryChangeEventinterface 7.2.7.2ThePopStateEventinterface 7.2.7.3TheHashChangeEventinterface 7.2.7.4ThePageSwapEventinterface 7.2.7.5ThePageRevealEventinterface 7.2.7.6ThePageTransitionEventinterface 7.2.7.7TheBeforeUnloadEventinterface 7.2.8TheNotRestoredReasonsinterface 7.3Infrastructure for sequences of documents7.3.1Navigables7.3.1.1Traversable navigables7.3.1.2Top-level traversables7.3.1.3Child navigables7.3.1.4Jake diagrams7.3.1.5Related navigable collections7.3.1.6Navigable destruction7.3.1.7Navigable target names7.3.2Browsing contexts7.3.2.1Creating browsing contexts7.3.2.2Related browsing contexts7.3.2.3Groupings of browsing contexts7.3.3Fully active documents 7.3.1Navigables7.3.1.1Traversable navigables7.3.1.2Top-level traversables7.3.1.3Child navigables7.3.1.4Jake diagrams7.3.1.5Related navigable collections7.3.1.6Navigable destruction7.3.1.7Navigable target names 7.3.1.1Traversable navigables 7.3.1.2Top-level traversables 7.3.1.3Child navigables 7.3.1.4Jake diagrams 7.3.1.5Related navigable collections 7.3.1.6Navigable destruction 7.3.1.7Navigable target names 7.3.2Browsing contexts7.3.2.1Creating browsing contexts7.3.2.2Related browsing contexts7.3.2.3Groupings of browsing contexts 7.3.2.1Creating browsing contexts 7.3.2.2Related browsing contexts 7.3.2.3Groupings of browsing contexts 7.3.3Fully active documents 7.4Navigation and session
  history7.4.1Session history7.4.1.1Session history entries7.4.1.2Document state7.4.1.3Centralized modifications of session history7.4.1.4Low-level operations on session history7.4.2Navigation7.4.2.1Supporting concepts7.4.2.2Beginning navigation7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software7.4.2.4Preventing navigation7.4.2.5Aborting navigation7.4.3Reloading and traversing7.4.4Non-fragment synchronous ""navigations""7.4.5Populating a session history entry7.4.6Applying the history step7.4.6.1Updating the traversable7.4.6.2Updating the document7.4.6.3Revealing the document7.4.6.4Scrolling to a fragment7.4.6.5Persisted history entry state 7.4.1Session history7.4.1.1Session history entries7.4.1.2Document state7.4.1.3Centralized modifications of session history7.4.1.4Low-level operations on session history 7.4.1.1Session history entries 7.4.1.2Document state 7.4.1.3Centralized modifications of session history 7.4.1.4Low-level operations on session history 7.4.2Navigation7.4.2.1Supporting concepts7.4.2.2Beginning navigation7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software7.4.2.4Preventing navigation7.4.2.5Aborting navigation 7.4.2.1Supporting concepts 7.4.2.2Beginning navigation 7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software 7.4.2.3.1The usual cross-document navigation case 7.4.2.3.2Thejavascript:URL special case 7.4.2.3.3Fragment navigations 7.4.2.3.4Non-fetch schemes and external software 7.4.2.4Preventing navigation 7.4.2.5Aborting navigation 7.4.3Reloading and traversing 7.4.4Non-fragment synchronous ""navigations"" 7.4.5Populating a session history entry 7.4.6Applying the history step7.4.6.1Updating the traversable7.4.6.2Updating the document7.4.6.3Revealing the document7.4.6.4Scrolling to a fragment7.4.6.5Persisted history entry state 7.4.6.1Updating the traversable 7.4.6.2Updating the document 7.4.6.3Revealing the document 7.4.6.4Scrolling to a fragment 7.4.6.5Persisted history entry state 7.5Document lifecycle7.5.1Shared document creation infrastructure7.5.2Loading HTML documents7.5.3Loading XML documents7.5.4Loading text documents7.5.5Loadingmultipart/x-mixed-replacedocuments7.5.6Loading media documents7.5.7Loading a document for inline content that doesn't have a
  DOM7.5.8Finishing the loading process7.5.9Unloading documents7.5.10Destroying documents7.5.11Aborting a document load 7.5.1Shared document creation infrastructure 7.5.2Loading HTML documents 7.5.3Loading XML documents 7.5.4Loading text documents 7.5.5Loadingmultipart/x-mixed-replacedocuments 7.5.6Loading media documents 7.5.7Loading a document for inline content that doesn't have a
  DOM 7.5.8Finishing the loading process 7.5.9Unloading documents 7.5.10Destroying documents 7.5.11Aborting a document load 7.6The `X-Frame-Options` header 7.7The `Refresh` header 7.8Browser user interface
  considerations 8Web application APIs8.1Scripting8.1.1Introduction8.1.2Agents and agent clusters8.1.2.1Integration with the JavaScript agent formalism8.1.2.2Integration with the JavaScript agent cluster formalism8.1.3Realms and their counterparts8.1.3.1Environments8.1.3.2Environment settings objects8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant8.1.3.4Enabling and disabling scripting8.1.3.5Secure contexts8.1.4Script processing
  model8.1.4.1Scripts8.1.4.2Fetching scripts8.1.4.3Creating scripts8.1.4.4Calling scripts8.1.4.5Killing scripts8.1.4.6Runtime script errors8.1.4.7Unhandled promise rejections8.1.4.8Import map parse results8.1.5Module specifier resolution8.1.5.1The resolution algorithm8.1.5.2Import maps8.1.5.3Import map processing model8.1.6JavaScript specification host hooks8.1.6.1HostEnsureCanAddPrivateElement(O)8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg)8.1.6.3HostGetCodeForEval(argument)8.1.6.4HostPromiseRejectionTracker(promise,operation)8.1.6.5HostSystemUTCEpochNanoseconds(global)8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable)8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload)8.1.7Event loops8.1.7.1Definitions8.1.7.2Queuing tasks8.1.7.3Processing model8.1.7.4Generic task sources8.1.7.5Dealing with the event loop from other specifications8.1.8Events8.1.8.1Event handlers8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions8.1.8.3Event firing8.2TheWindowOrWorkerGlobalScopemixin8.3Base64 utility methods8.4Dynamic markup insertion8.4.1Opening the input stream8.4.2Closing the input stream8.4.3document.write()8.4.4document.writeln()8.5DOM parsing and serialization APIs8.5.1TheDOMParserinterface8.5.2Unsafe HTML parsing methods8.5.3HTML serialization methods8.5.4TheinnerHTMLproperty8.5.5TheouterHTMLproperty8.5.6TheinsertAdjacentHTML()method8.5.7ThecreateContextualFragment()method8.6Timers8.7Microtask queuing8.8User prompts8.8.1Simple dialogs8.8.2Printing8.9System state and capabilities8.9.1TheNavigatorobject8.9.1.1Client identification8.9.1.2Language preferences8.9.1.3Browser state8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation8.9.1.5Cookies8.9.1.6PDF viewing support8.10Images8.11Animation frames 8.1Scripting8.1.1Introduction8.1.2Agents and agent clusters8.1.2.1Integration with the JavaScript agent formalism8.1.2.2Integration with the JavaScript agent cluster formalism8.1.3Realms and their counterparts8.1.3.1Environments8.1.3.2Environment settings objects8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant8.1.3.4Enabling and disabling scripting8.1.3.5Secure contexts8.1.4Script processing
  model8.1.4.1Scripts8.1.4.2Fetching scripts8.1.4.3Creating scripts8.1.4.4Calling scripts8.1.4.5Killing scripts8.1.4.6Runtime script errors8.1.4.7Unhandled promise rejections8.1.4.8Import map parse results8.1.5Module specifier resolution8.1.5.1The resolution algorithm8.1.5.2Import maps8.1.5.3Import map processing model8.1.6JavaScript specification host hooks8.1.6.1HostEnsureCanAddPrivateElement(O)8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg)8.1.6.3HostGetCodeForEval(argument)8.1.6.4HostPromiseRejectionTracker(promise,operation)8.1.6.5HostSystemUTCEpochNanoseconds(global)8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable)8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload)8.1.7Event loops8.1.7.1Definitions8.1.7.2Queuing tasks8.1.7.3Processing model8.1.7.4Generic task sources8.1.7.5Dealing with the event loop from other specifications8.1.8Events8.1.8.1Event handlers8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions8.1.8.3Event firing 8.1.1Introduction 8.1.2Agents and agent clusters8.1.2.1Integration with the JavaScript agent formalism8.1.2.2Integration with the JavaScript agent cluster formalism 8.1.2.1Integration with the JavaScript agent formalism 8.1.2.2Integration with the JavaScript agent cluster formalism 8.1.3Realms and their counterparts8.1.3.1Environments8.1.3.2Environment settings objects8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant8.1.3.4Enabling and disabling scripting8.1.3.5Secure contexts 8.1.3.1Environments 8.1.3.2Environment settings objects 8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant 8.1.3.3.1Entry 8.1.3.3.2Incumbent 8.1.3.3.3Current 8.1.3.3.4Relevant 8.1.3.4Enabling and disabling scripting 8.1.3.5Secure contexts 8.1.4Script processing
  model8.1.4.1Scripts8.1.4.2Fetching scripts8.1.4.3Creating scripts8.1.4.4Calling scripts8.1.4.5Killing scripts8.1.4.6Runtime script errors8.1.4.7Unhandled promise rejections8.1.4.8Import map parse results 8.1.4.1Scripts 8.1.4.2Fetching scripts 8.1.4.3Creating scripts 8.1.4.4Calling scripts 8.1.4.5Killing scripts 8.1.4.6Runtime script errors 8.1.4.7Unhandled promise rejections 8.1.4.8Import map parse results 8.1.5Module specifier resolution8.1.5.1The resolution algorithm8.1.5.2Import maps8.1.5.3Import map processing model 8.1.5.1The resolution algorithm 8.1.5.2Import maps 8.1.5.3Import map processing model 8.1.6JavaScript specification host hooks8.1.6.1HostEnsureCanAddPrivateElement(O)8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg)8.1.6.3HostGetCodeForEval(argument)8.1.6.4HostPromiseRejectionTracker(promise,operation)8.1.6.5HostSystemUTCEpochNanoseconds(global)8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable)8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.6.1HostEnsureCanAddPrivateElement(O) 8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg) 8.1.6.3HostGetCodeForEval(argument) 8.1.6.4HostPromiseRejectionTracker(promise,operation) 8.1.6.5HostSystemUTCEpochNanoseconds(global) 8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.6.1HostCallJobCallback(callback,V,argumentsList) 8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry) 8.1.6.6.3HostEnqueueGenericJob(job,realm) 8.1.6.6.4HostEnqueuePromiseJob(job,realm) 8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds) 8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.6.7.1HostGetImportMetaProperties(moduleRecord) 8.1.6.7.2HostGetSupportedImportAttributes() 8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.7Event loops8.1.7.1Definitions8.1.7.2Queuing tasks8.1.7.3Processing model8.1.7.4Generic task sources8.1.7.5Dealing with the event loop from other specifications 8.1.7.1Definitions 8.1.7.2Queuing tasks 8.1.7.3Processing model 8.1.7.4Generic task sources 8.1.7.5Dealing with the event loop from other specifications 8.1.8Events8.1.8.1Event handlers8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions8.1.8.3Event firing 8.1.8.1Event handlers 8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions 8.1.8.2.1IDL definitions 8.1.8.3Event firing 8.2TheWindowOrWorkerGlobalScopemixin 8.3Base64 utility methods 8.4Dynamic markup insertion8.4.1Opening the input stream8.4.2Closing the input stream8.4.3document.write()8.4.4document.writeln() 8.4.1Opening the input stream 8.4.2Closing the input stream 8.4.3document.write() 8.4.4document.writeln() 8.5DOM parsing and serialization APIs8.5.1TheDOMParserinterface8.5.2Unsafe HTML parsing methods8.5.3HTML serialization methods8.5.4TheinnerHTMLproperty8.5.5TheouterHTMLproperty8.5.6TheinsertAdjacentHTML()method8.5.7ThecreateContextualFragment()method 8.5.1TheDOMParserinterface 8.5.2Unsafe HTML parsing methods 8.5.3HTML serialization methods 8.5.4TheinnerHTMLproperty 8.5.5TheouterHTMLproperty 8.5.6TheinsertAdjacentHTML()method 8.5.7ThecreateContextualFragment()method 8.6Timers 8.7Microtask queuing 8.8User prompts8.8.1Simple dialogs8.8.2Printing 8.8.1Simple dialogs 8.8.2Printing 8.9System state and capabilities8.9.1TheNavigatorobject8.9.1.1Client identification8.9.1.2Language preferences8.9.1.3Browser state8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation8.9.1.5Cookies8.9.1.6PDF viewing support 8.9.1TheNavigatorobject8.9.1.1Client identification8.9.1.2Language preferences8.9.1.3Browser state8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation8.9.1.5Cookies8.9.1.6PDF viewing support 8.9.1.1Client identification 8.9.1.2Language preferences 8.9.1.3Browser state 8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation 8.9.1.4.1Security and privacy 8.9.1.4.2User agent automation 8.9.1.5Cookies 8.9.1.6PDF viewing support 8.10Images 8.11Animation frames 9Communication9.1TheMessageEventinterface9.2Server-sent events9.2.1Introduction9.2.2TheEventSourceinterface9.2.3Processing model9.2.4The `Last-Event-ID` header9.2.5Parsing an event stream9.2.6Interpreting an event stream9.2.7Authoring notes9.2.8Connectionless push and other features9.2.9Garbage collection9.2.10Implementation advice9.3Cross-document messaging9.3.1Introduction9.3.2Security9.3.2.1Authors9.3.2.2User agents9.3.3Posting messages9.4Channel messaging9.4.1Introduction9.4.1.1Examples9.4.1.2Ports as the basis of an object-capability model on the web9.4.1.3Ports as the basis of abstracting out service implementations9.4.2Message channels9.4.3Message ports9.4.4Ports and garbage collection9.5Broadcasting to other browsing contexts 9.1TheMessageEventinterface 9.2Server-sent events9.2.1Introduction9.2.2TheEventSourceinterface9.2.3Processing model9.2.4The `Last-Event-ID` header9.2.5Parsing an event stream9.2.6Interpreting an event stream9.2.7Authoring notes9.2.8Connectionless push and other features9.2.9Garbage collection9.2.10Implementation advice 9.2.1Introduction 9.2.2TheEventSourceinterface 9.2.3Processing model 9.2.4The `Last-Event-ID` header 9.2.5Parsing an event stream 9.2.6Interpreting an event stream 9.2.7Authoring notes 9.2.8Connectionless push and other features 9.2.9Garbage collection 9.2.10Implementation advice 9.3Cross-document messaging9.3.1Introduction9.3.2Security9.3.2.1Authors9.3.2.2User agents9.3.3Posting messages 9.3.1Introduction 9.3.2Security9.3.2.1Authors9.3.2.2User agents 9.3.2.1Authors 9.3.2.2User agents 9.3.3Posting messages 9.4Channel messaging9.4.1Introduction9.4.1.1Examples9.4.1.2Ports as the basis of an object-capability model on the web9.4.1.3Ports as the basis of abstracting out service implementations9.4.2Message channels9.4.3Message ports9.4.4Ports and garbage collection 9.4.1Introduction9.4.1.1Examples9.4.1.2Ports as the basis of an object-capability model on the web9.4.1.3Ports as the basis of abstracting out service implementations 9.4.1.1Examples 9.4.1.2Ports as the basis of an object-capability model on the web 9.4.1.3Ports as the basis of abstracting out service implementations 9.4.2Message channels 9.4.3Message ports 9.4.4Ports and garbage collection 9.5Broadcasting to other browsing contexts 10Web workers10.1Introduction10.1.1Scope10.1.2Examples10.1.2.1A background number-crunching worker10.1.2.2Using a JavaScript module as a worker10.1.2.3Shared workers introduction10.1.2.4Shared state using a shared worker10.1.2.5Delegation10.1.2.6Providing libraries10.1.3Tutorials10.1.3.1Creating a dedicated worker10.1.3.2Communicating with a dedicated worker10.1.3.3Shared workers10.2Infrastructure10.2.1The global scope10.2.1.1TheWorkerGlobalScopecommon interface10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface10.2.2The event loop10.2.3The worker's lifetime10.2.4Processing model10.2.5Runtime script errors10.2.6Creating workers10.2.6.1TheAbstractWorkermixin10.2.6.2Script settings for workers10.2.6.3Dedicated workers and theWorkerinterface10.2.6.4Shared workers and theSharedWorkerinterface10.2.7Concurrent hardware capabilities10.3APIs available to workers10.3.1Importing scripts and libraries10.3.2TheWorkerNavigatorinterface10.3.3TheWorkerLocationinterface 10.1Introduction10.1.1Scope10.1.2Examples10.1.2.1A background number-crunching worker10.1.2.2Using a JavaScript module as a worker10.1.2.3Shared workers introduction10.1.2.4Shared state using a shared worker10.1.2.5Delegation10.1.2.6Providing libraries10.1.3Tutorials10.1.3.1Creating a dedicated worker10.1.3.2Communicating with a dedicated worker10.1.3.3Shared workers 10.1.1Scope 10.1.2Examples10.1.2.1A background number-crunching worker10.1.2.2Using a JavaScript module as a worker10.1.2.3Shared workers introduction10.1.2.4Shared state using a shared worker10.1.2.5Delegation10.1.2.6Providing libraries 10.1.2.1A background number-crunching worker 10.1.2.2Using a JavaScript module as a worker 10.1.2.3Shared workers introduction 10.1.2.4Shared state using a shared worker 10.1.2.5Delegation 10.1.2.6Providing libraries 10.1.3Tutorials10.1.3.1Creating a dedicated worker10.1.3.2Communicating with a dedicated worker10.1.3.3Shared workers 10.1.3.1Creating a dedicated worker 10.1.3.2Communicating with a dedicated worker 10.1.3.3Shared workers 10.2Infrastructure10.2.1The global scope10.2.1.1TheWorkerGlobalScopecommon interface10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface10.2.2The event loop10.2.3The worker's lifetime10.2.4Processing model10.2.5Runtime script errors10.2.6Creating workers10.2.6.1TheAbstractWorkermixin10.2.6.2Script settings for workers10.2.6.3Dedicated workers and theWorkerinterface10.2.6.4Shared workers and theSharedWorkerinterface10.2.7Concurrent hardware capabilities 10.2.1The global scope10.2.1.1TheWorkerGlobalScopecommon interface10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface 10.2.1.1TheWorkerGlobalScopecommon interface 10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface 10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface 10.2.2The event loop 10.2.3The worker's lifetime 10.2.4Processing model 10.2.5Runtime script errors 10.2.6Creating workers10.2.6.1TheAbstractWorkermixin10.2.6.2Script settings for workers10.2.6.3Dedicated workers and theWorkerinterface10.2.6.4Shared workers and theSharedWorkerinterface 10.2.6.1TheAbstractWorkermixin 10.2.6.2Script settings for workers 10.2.6.3Dedicated workers and theWorkerinterface 10.2.6.4Shared workers and theSharedWorkerinterface 10.2.7Concurrent hardware capabilities 10.3APIs available to workers10.3.1Importing scripts and libraries10.3.2TheWorkerNavigatorinterface10.3.3TheWorkerLocationinterface 10.3.1Importing scripts and libraries 10.3.2TheWorkerNavigatorinterface 10.3.3TheWorkerLocationinterface 11Worklets11.1Introduction11.1.1Motivations11.1.2Code idempotence11.1.3Speculative evaluation11.2Examples11.2.1Loading scripts11.2.2Registering a class and invoking its methods11.3Infrastructure11.3.1The global scope11.3.1.1Agents and event loops11.3.1.2Creation and termination11.3.1.3Script settings for worklets11.3.2TheWorkletclass11.3.3The worklet's lifetime 11.1Introduction11.1.1Motivations11.1.2Code idempotence11.1.3Speculative evaluation 11.1.1Motivations 11.1.2Code idempotence 11.1.3Speculative evaluation 11.2Examples11.2.1Loading scripts11.2.2Registering a class and invoking its methods 11.2.1Loading scripts 11.2.2Registering a class and invoking its methods 11.3Infrastructure11.3.1The global scope11.3.1.1Agents and event loops11.3.1.2Creation and termination11.3.1.3Script settings for worklets11.3.2TheWorkletclass11.3.3The worklet's lifetime 11.3.1The global scope11.3.1.1Agents and event loops11.3.1.2Creation and termination11.3.1.3Script settings for worklets 11.3.1.1Agents and event loops 11.3.1.2Creation and termination 11.3.1.3Script settings for worklets 11.3.2TheWorkletclass 11.3.3The worklet's lifetime 12Web storage12.1Introduction12.2The API12.2.1TheStorageinterface12.2.2ThesessionStoragegetter12.2.3ThelocalStoragegetter12.2.4TheStorageEventinterface12.3Privacy12.3.1User tracking12.3.2Sensitivity of data12.4Security12.4.1DNS spoofing attacks12.4.2Cross-directory attacks12.4.3Implementation risks 12.1Introduction 12.2The API12.2.1TheStorageinterface12.2.2ThesessionStoragegetter12.2.3ThelocalStoragegetter12.2.4TheStorageEventinterface 12.2.1TheStorageinterface 12.2.2ThesessionStoragegetter 12.2.3ThelocalStoragegetter 12.2.4TheStorageEventinterface 12.3Privacy12.3.1User tracking12.3.2Sensitivity of data 12.3.1User tracking 12.3.2Sensitivity of data 12.4Security12.4.1DNS spoofing attacks12.4.2Cross-directory attacks12.4.3Implementation risks 12.4.1DNS spoofing attacks 12.4.2Cross-directory attacks 12.4.3Implementation risks 13The HTML syntax13.1Writing HTML documents13.1.1The DOCTYPE13.1.2Elements13.1.2.1Start tags13.1.2.2End tags13.1.2.3Attributes13.1.2.4Optional tags13.1.2.5Restrictions on content models13.1.2.6Restrictions on the contents of raw text and escapable raw text elements13.1.3Text13.1.3.1Newlines13.1.4Character references13.1.5CDATA sections13.1.6Comments13.2Parsing HTML documents13.2.1Overview of the parsing model13.2.2Parse errors13.2.3The input byte stream13.2.3.1Parsing with a known character encoding13.2.3.2Determining the character encoding13.2.3.3Character encodings13.2.3.4Changing the encoding while parsing13.2.3.5Preprocessing the input stream13.2.4Parse state13.2.4.1The insertion mode13.2.4.2The stack of open elements13.2.4.3The list of active formatting elements13.2.4.4The element pointers13.2.4.5Other parsing state flags13.2.5Tokenization13.2.5.1Data state13.2.5.2RCDATA state13.2.5.3RAWTEXT state13.2.5.4Script data state13.2.5.5PLAINTEXT state13.2.5.6Tag open state13.2.5.7End tag open state13.2.5.8Tag name state13.2.5.9RCDATA less-than sign state13.2.5.10RCDATA end tag open state13.2.5.11RCDATA end tag name state13.2.5.12RAWTEXT less-than sign state13.2.5.13RAWTEXT end tag open state13.2.5.14RAWTEXT end tag name state13.2.5.15Script data less-than sign state13.2.5.16Script data end tag open state13.2.5.17Script data end tag name state13.2.5.18Script data escape start state13.2.5.19Script data escape start dash state13.2.5.20Script data escaped state13.2.5.21Script data escaped dash state13.2.5.22Script data escaped dash dash state13.2.5.23Script data escaped less-than sign state13.2.5.24Script data escaped end tag open state13.2.5.25Script data escaped end tag name state13.2.5.26Script data double escape start state13.2.5.27Script data double escaped state13.2.5.28Script data double escaped dash state13.2.5.29Script data double escaped dash dash state13.2.5.30Script data double escaped less-than sign state13.2.5.31Script data double escape end state13.2.5.32Before attribute name state13.2.5.33Attribute name state13.2.5.34After attribute name state13.2.5.35Before attribute value state13.2.5.36Attribute value (double-quoted) state13.2.5.37Attribute value (single-quoted) state13.2.5.38Attribute value (unquoted) state13.2.5.39After attribute value (quoted) state13.2.5.40Self-closing start tag state13.2.5.41Bogus comment state13.2.5.42Markup declaration open state13.2.5.43Comment start state13.2.5.44Comment start dash state13.2.5.45Comment state13.2.5.46Comment less-than sign state13.2.5.47Comment less-than sign bang state13.2.5.48Comment less-than sign bang dash state13.2.5.49Comment less-than sign bang dash dash state13.2.5.50Comment end dash state13.2.5.51Comment end state13.2.5.52Comment end bang state13.2.5.53DOCTYPE state13.2.5.54Before DOCTYPE name state13.2.5.55DOCTYPE name state13.2.5.56After DOCTYPE name state13.2.5.57After DOCTYPE public keyword state13.2.5.58Before DOCTYPE public identifier state13.2.5.59DOCTYPE public identifier (double-quoted) state13.2.5.60DOCTYPE public identifier (single-quoted) state13.2.5.61After DOCTYPE public identifier state13.2.5.62Between DOCTYPE public and system identifiers state13.2.5.63After DOCTYPE system keyword state13.2.5.64Before DOCTYPE system identifier state13.2.5.65DOCTYPE system identifier (double-quoted) state13.2.5.66DOCTYPE system identifier (single-quoted) state13.2.5.67After DOCTYPE system identifier state13.2.5.68Bogus DOCTYPE state13.2.5.69CDATA section state13.2.5.70CDATA section bracket state13.2.5.71CDATA section end state13.2.5.72Character reference state13.2.5.73Named character reference state13.2.5.74Ambiguous ampersand state13.2.5.75Numeric character reference state13.2.5.76Hexadecimal character reference start state13.2.5.77Decimal character reference start state13.2.5.78Hexadecimal character reference state13.2.5.79Decimal character reference state13.2.5.80Numeric character reference end state13.2.6Tree construction13.2.6.1Creating and inserting nodes13.2.6.2Parsing elements that contain only text13.2.6.3Closing elements that have implied end tags13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode13.2.6.5The rules for parsing tokens in foreign content13.2.7The end13.2.8Speculative HTML parsing13.2.9Coercing an HTML DOM into an infoset13.2.10An introduction to error handling and strange cases in the parser13.2.10.1Misnested tags: <b><i></b></i>13.2.10.2Misnested tags: <b><p></b></p>13.2.10.3Unexpected markup in tables13.2.10.4Scripts that modify the page as it is being parsed13.2.10.5The execution of scripts that are moving across multiple documents13.2.10.6Unclosed formatting elements13.3Serializing HTML fragments13.4Parsing HTML fragments13.5Named character references 13.1Writing HTML documents13.1.1The DOCTYPE13.1.2Elements13.1.2.1Start tags13.1.2.2End tags13.1.2.3Attributes13.1.2.4Optional tags13.1.2.5Restrictions on content models13.1.2.6Restrictions on the contents of raw text and escapable raw text elements13.1.3Text13.1.3.1Newlines13.1.4Character references13.1.5CDATA sections13.1.6Comments 13.1.1The DOCTYPE 13.1.2Elements13.1.2.1Start tags13.1.2.2End tags13.1.2.3Attributes13.1.2.4Optional tags13.1.2.5Restrictions on content models13.1.2.6Restrictions on the contents of raw text and escapable raw text elements 13.1.2.1Start tags 13.1.2.2End tags 13.1.2.3Attributes 13.1.2.4Optional tags 13.1.2.5Restrictions on content models 13.1.2.6Restrictions on the contents of raw text and escapable raw text elements 13.1.3Text13.1.3.1Newlines 13.1.3.1Newlines 13.1.4Character references 13.1.5CDATA sections 13.1.6Comments 13.2Parsing HTML documents13.2.1Overview of the parsing model13.2.2Parse errors13.2.3The input byte stream13.2.3.1Parsing with a known character encoding13.2.3.2Determining the character encoding13.2.3.3Character encodings13.2.3.4Changing the encoding while parsing13.2.3.5Preprocessing the input stream13.2.4Parse state13.2.4.1The insertion mode13.2.4.2The stack of open elements13.2.4.3The list of active formatting elements13.2.4.4The element pointers13.2.4.5Other parsing state flags13.2.5Tokenization13.2.5.1Data state13.2.5.2RCDATA state13.2.5.3RAWTEXT state13.2.5.4Script data state13.2.5.5PLAINTEXT state13.2.5.6Tag open state13.2.5.7End tag open state13.2.5.8Tag name state13.2.5.9RCDATA less-than sign state13.2.5.10RCDATA end tag open state13.2.5.11RCDATA end tag name state13.2.5.12RAWTEXT less-than sign state13.2.5.13RAWTEXT end tag open state13.2.5.14RAWTEXT end tag name state13.2.5.15Script data less-than sign state13.2.5.16Script data end tag open state13.2.5.17Script data end tag name state13.2.5.18Script data escape start state13.2.5.19Script data escape start dash state13.2.5.20Script data escaped state13.2.5.21Script data escaped dash state13.2.5.22Script data escaped dash dash state13.2.5.23Script data escaped less-than sign state13.2.5.24Script data escaped end tag open state13.2.5.25Script data escaped end tag name state13.2.5.26Script data double escape start state13.2.5.27Script data double escaped state13.2.5.28Script data double escaped dash state13.2.5.29Script data double escaped dash dash state13.2.5.30Script data double escaped less-than sign state13.2.5.31Script data double escape end state13.2.5.32Before attribute name state13.2.5.33Attribute name state13.2.5.34After attribute name state13.2.5.35Before attribute value state13.2.5.36Attribute value (double-quoted) state13.2.5.37Attribute value (single-quoted) state13.2.5.38Attribute value (unquoted) state13.2.5.39After attribute value (quoted) state13.2.5.40Self-closing start tag state13.2.5.41Bogus comment state13.2.5.42Markup declaration open state13.2.5.43Comment start state13.2.5.44Comment start dash state13.2.5.45Comment state13.2.5.46Comment less-than sign state13.2.5.47Comment less-than sign bang state13.2.5.48Comment less-than sign bang dash state13.2.5.49Comment less-than sign bang dash dash state13.2.5.50Comment end dash state13.2.5.51Comment end state13.2.5.52Comment end bang state13.2.5.53DOCTYPE state13.2.5.54Before DOCTYPE name state13.2.5.55DOCTYPE name state13.2.5.56After DOCTYPE name state13.2.5.57After DOCTYPE public keyword state13.2.5.58Before DOCTYPE public identifier state13.2.5.59DOCTYPE public identifier (double-quoted) state13.2.5.60DOCTYPE public identifier (single-quoted) state13.2.5.61After DOCTYPE public identifier state13.2.5.62Between DOCTYPE public and system identifiers state13.2.5.63After DOCTYPE system keyword state13.2.5.64Before DOCTYPE system identifier state13.2.5.65DOCTYPE system identifier (double-quoted) state13.2.5.66DOCTYPE system identifier (single-quoted) state13.2.5.67After DOCTYPE system identifier state13.2.5.68Bogus DOCTYPE state13.2.5.69CDATA section state13.2.5.70CDATA section bracket state13.2.5.71CDATA section end state13.2.5.72Character reference state13.2.5.73Named character reference state13.2.5.74Ambiguous ampersand state13.2.5.75Numeric character reference state13.2.5.76Hexadecimal character reference start state13.2.5.77Decimal character reference start state13.2.5.78Hexadecimal character reference state13.2.5.79Decimal character reference state13.2.5.80Numeric character reference end state13.2.6Tree construction13.2.6.1Creating and inserting nodes13.2.6.2Parsing elements that contain only text13.2.6.3Closing elements that have implied end tags13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode13.2.6.5The rules for parsing tokens in foreign content13.2.7The end13.2.8Speculative HTML parsing13.2.9Coercing an HTML DOM into an infoset13.2.10An introduction to error handling and strange cases in the parser13.2.10.1Misnested tags: <b><i></b></i>13.2.10.2Misnested tags: <b><p></b></p>13.2.10.3Unexpected markup in tables13.2.10.4Scripts that modify the page as it is being parsed13.2.10.5The execution of scripts that are moving across multiple documents13.2.10.6Unclosed formatting elements 13.2.1Overview of the parsing model 13.2.2Parse errors 13.2.3The input byte stream13.2.3.1Parsing with a known character encoding13.2.3.2Determining the character encoding13.2.3.3Character encodings13.2.3.4Changing the encoding while parsing13.2.3.5Preprocessing the input stream 13.2.3.1Parsing with a known character encoding 13.2.3.2Determining the character encoding 13.2.3.3Character encodings 13.2.3.4Changing the encoding while parsing 13.2.3.5Preprocessing the input stream 13.2.4Parse state13.2.4.1The insertion mode13.2.4.2The stack of open elements13.2.4.3The list of active formatting elements13.2.4.4The element pointers13.2.4.5Other parsing state flags 13.2.4.1The insertion mode 13.2.4.2The stack of open elements 13.2.4.3The list of active formatting elements 13.2.4.4The element pointers 13.2.4.5Other parsing state flags 13.2.5Tokenization13.2.5.1Data state13.2.5.2RCDATA state13.2.5.3RAWTEXT state13.2.5.4Script data state13.2.5.5PLAINTEXT state13.2.5.6Tag open state13.2.5.7End tag open state13.2.5.8Tag name state13.2.5.9RCDATA less-than sign state13.2.5.10RCDATA end tag open state13.2.5.11RCDATA end tag name state13.2.5.12RAWTEXT less-than sign state13.2.5.13RAWTEXT end tag open state13.2.5.14RAWTEXT end tag name state13.2.5.15Script data less-than sign state13.2.5.16Script data end tag open state13.2.5.17Script data end tag name state13.2.5.18Script data escape start state13.2.5.19Script data escape start dash state13.2.5.20Script data escaped state13.2.5.21Script data escaped dash state13.2.5.22Script data escaped dash dash state13.2.5.23Script data escaped less-than sign state13.2.5.24Script data escaped end tag open state13.2.5.25Script data escaped end tag name state13.2.5.26Script data double escape start state13.2.5.27Script data double escaped state13.2.5.28Script data double escaped dash state13.2.5.29Script data double escaped dash dash state13.2.5.30Script data double escaped less-than sign state13.2.5.31Script data double escape end state13.2.5.32Before attribute name state13.2.5.33Attribute name state13.2.5.34After attribute name state13.2.5.35Before attribute value state13.2.5.36Attribute value (double-quoted) state13.2.5.37Attribute value (single-quoted) state13.2.5.38Attribute value (unquoted) state13.2.5.39After attribute value (quoted) state13.2.5.40Self-closing start tag state13.2.5.41Bogus comment state13.2.5.42Markup declaration open state13.2.5.43Comment start state13.2.5.44Comment start dash state13.2.5.45Comment state13.2.5.46Comment less-than sign state13.2.5.47Comment less-than sign bang state13.2.5.48Comment less-than sign bang dash state13.2.5.49Comment less-than sign bang dash dash state13.2.5.50Comment end dash state13.2.5.51Comment end state13.2.5.52Comment end bang state13.2.5.53DOCTYPE state13.2.5.54Before DOCTYPE name state13.2.5.55DOCTYPE name state13.2.5.56After DOCTYPE name state13.2.5.57After DOCTYPE public keyword state13.2.5.58Before DOCTYPE public identifier state13.2.5.59DOCTYPE public identifier (double-quoted) state13.2.5.60DOCTYPE public identifier (single-quoted) state13.2.5.61After DOCTYPE public identifier state13.2.5.62Between DOCTYPE public and system identifiers state13.2.5.63After DOCTYPE system keyword state13.2.5.64Before DOCTYPE system identifier state13.2.5.65DOCTYPE system identifier (double-quoted) state13.2.5.66DOCTYPE system identifier (single-quoted) state13.2.5.67After DOCTYPE system identifier state13.2.5.68Bogus DOCTYPE state13.2.5.69CDATA section state13.2.5.70CDATA section bracket state13.2.5.71CDATA section end state13.2.5.72Character reference state13.2.5.73Named character reference state13.2.5.74Ambiguous ampersand state13.2.5.75Numeric character reference state13.2.5.76Hexadecimal character reference start state13.2.5.77Decimal character reference start state13.2.5.78Hexadecimal character reference state13.2.5.79Decimal character reference state13.2.5.80Numeric character reference end state 13.2.5.1Data state 13.2.5.2RCDATA state 13.2.5.3RAWTEXT state 13.2.5.4Script data state 13.2.5.5PLAINTEXT state 13.2.5.6Tag open state 13.2.5.7End tag open state 13.2.5.8Tag name state 13.2.5.9RCDATA less-than sign state 13.2.5.10RCDATA end tag open state 13.2.5.11RCDATA end tag name state 13.2.5.12RAWTEXT less-than sign state 13.2.5.13RAWTEXT end tag open state 13.2.5.14RAWTEXT end tag name state 13.2.5.15Script data less-than sign state 13.2.5.16Script data end tag open state 13.2.5.17Script data end tag name state 13.2.5.18Script data escape start state 13.2.5.19Script data escape start dash state 13.2.5.20Script data escaped state 13.2.5.21Script data escaped dash state 13.2.5.22Script data escaped dash dash state 13.2.5.23Script data escaped less-than sign state 13.2.5.24Script data escaped end tag open state 13.2.5.25Script data escaped end tag name state 13.2.5.26Script data double escape start state 13.2.5.27Script data double escaped state 13.2.5.28Script data double escaped dash state 13.2.5.29Script data double escaped dash dash state 13.2.5.30Script data double escaped less-than sign state 13.2.5.31Script data double escape end state 13.2.5.32Before attribute name state 13.2.5.33Attribute name state 13.2.5.34After attribute name state 13.2.5.35Before attribute value state 13.2.5.36Attribute value (double-quoted) state 13.2.5.37Attribute value (single-quoted) state 13.2.5.38Attribute value (unquoted) state 13.2.5.39After attribute value (quoted) state 13.2.5.40Self-closing start tag state 13.2.5.41Bogus comment state 13.2.5.42Markup declaration open state 13.2.5.43Comment start state 13.2.5.44Comment start dash state 13.2.5.45Comment state 13.2.5.46Comment less-than sign state 13.2.5.47Comment less-than sign bang state 13.2.5.48Comment less-than sign bang dash state 13.2.5.49Comment less-than sign bang dash dash state 13.2.5.50Comment end dash state 13.2.5.51Comment end state 13.2.5.52Comment end bang state 13.2.5.53DOCTYPE state 13.2.5.54Before DOCTYPE name state 13.2.5.55DOCTYPE name state 13.2.5.56After DOCTYPE name state 13.2.5.57After DOCTYPE public keyword state 13.2.5.58Before DOCTYPE public identifier state 13.2.5.59DOCTYPE public identifier (double-quoted) state 13.2.5.60DOCTYPE public identifier (single-quoted) state 13.2.5.61After DOCTYPE public identifier state 13.2.5.62Between DOCTYPE public and system identifiers state 13.2.5.63After DOCTYPE system keyword state 13.2.5.64Before DOCTYPE system identifier state 13.2.5.65DOCTYPE system identifier (double-quoted) state 13.2.5.66DOCTYPE system identifier (single-quoted) state 13.2.5.67After DOCTYPE system identifier state 13.2.5.68Bogus DOCTYPE state 13.2.5.69CDATA section state 13.2.5.70CDATA section bracket state 13.2.5.71CDATA section end state 13.2.5.72Character reference state 13.2.5.73Named character reference state 13.2.5.74Ambiguous ampersand state 13.2.5.75Numeric character reference state 13.2.5.76Hexadecimal character reference start state 13.2.5.77Decimal character reference start state 13.2.5.78Hexadecimal character reference state 13.2.5.79Decimal character reference state 13.2.5.80Numeric character reference end state 13.2.6Tree construction13.2.6.1Creating and inserting nodes13.2.6.2Parsing elements that contain only text13.2.6.3Closing elements that have implied end tags13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode13.2.6.5The rules for parsing tokens in foreign content 13.2.6.1Creating and inserting nodes 13.2.6.2Parsing elements that contain only text 13.2.6.3Closing elements that have implied end tags 13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode 13.2.6.4.1The ""initial"" insertion mode 13.2.6.4.2The ""before html"" insertion mode 13.2.6.4.3The ""before head"" insertion mode 13.2.6.4.4The ""in head"" insertion mode 13.2.6.4.5The ""in head noscript"" insertion mode 13.2.6.4.6The ""after head"" insertion mode 13.2.6.4.7The ""in body"" insertion mode 13.2.6.4.8The ""text"" insertion mode 13.2.6.4.9The ""in table"" insertion mode 13.2.6.4.10The ""in table text"" insertion mode 13.2.6.4.11The ""in caption"" insertion mode 13.2.6.4.12The ""in column group"" insertion mode 13.2.6.4.13The ""in table body"" insertion mode 13.2.6.4.14The ""in row"" insertion mode 13.2.6.4.15The ""in cell"" insertion mode 13.2.6.4.16The ""in select"" insertion mode 13.2.6.4.17The ""in select in table"" insertion mode 13.2.6.4.18The ""in template"" insertion mode 13.2.6.4.19The ""after body"" insertion mode 13.2.6.4.20The ""in frameset"" insertion mode 13.2.6.4.21The ""after frameset"" insertion mode 13.2.6.4.22The ""after after body"" insertion mode 13.2.6.4.23The ""after after frameset"" insertion mode 13.2.6.5The rules for parsing tokens in foreign content 13.2.7The end 13.2.8Speculative HTML parsing 13.2.9Coercing an HTML DOM into an infoset 13.2.10An introduction to error handling and strange cases in the parser13.2.10.1Misnested tags: <b><i></b></i>13.2.10.2Misnested tags: <b><p></b></p>13.2.10.3Unexpected markup in tables13.2.10.4Scripts that modify the page as it is being parsed13.2.10.5The execution of scripts that are moving across multiple documents13.2.10.6Unclosed formatting elements 13.2.10.1Misnested tags: <b><i></b></i> 13.2.10.2Misnested tags: <b><p></b></p> 13.2.10.3Unexpected markup in tables 13.2.10.4Scripts that modify the page as it is being parsed 13.2.10.5The execution of scripts that are moving across multiple documents 13.2.10.6Unclosed formatting elements 13.3Serializing HTML fragments 13.4Parsing HTML fragments 13.5Named character references 14The XML syntax14.1Writing documents in the XML syntax14.2Parsing XML documents14.3Serializing XML fragments14.4Parsing XML fragments 14.1Writing documents in the XML syntax 14.2Parsing XML documents 14.3Serializing XML fragments 14.4Parsing XML fragments 15Rendering15.1Introduction15.2The CSS user agent style sheet and presentational hints15.3Non-replaced elements15.3.1Hidden elements15.3.2The page15.3.3Flow content15.3.4Phrasing content15.3.5Bidirectional text15.3.6Sections and headings15.3.7Lists15.3.8Tables15.3.9Margin collapsing quirks15.3.10Form controls15.3.11Thehrelement15.3.12Thefieldsetandlegendelements15.4Replaced elements15.4.1Embedded content15.4.2Images15.4.3Attributes for embedded content and images15.4.4Image maps15.5Widgets15.5.1Native appearance15.5.2Writing mode15.5.3Button layout15.5.4Thebuttonelement15.5.5Thedetailsandsummaryelements15.5.6Theinputelement as a text entry widget15.5.7Theinputelement as domain-specific widgets15.5.8Theinputelement as a range control15.5.9Theinputelement as a color
  well15.5.10Theinputelement as a checkbox and radio button widgets15.5.11Theinputelement as a file upload control15.5.12Theinputelement as a button15.5.13Themarqueeelement15.5.14Themeterelement15.5.15Theprogresselement15.5.16Theselectelement15.5.17Thetextareaelement15.6Frames and framesets15.7Interactive media15.7.1Links, forms, and navigation15.7.2Thetitleattribute15.7.3Editing hosts15.7.4Text rendered in native user interfaces15.8Print media15.9Unstyled XML documents 15.1Introduction 15.2The CSS user agent style sheet and presentational hints 15.3Non-replaced elements15.3.1Hidden elements15.3.2The page15.3.3Flow content15.3.4Phrasing content15.3.5Bidirectional text15.3.6Sections and headings15.3.7Lists15.3.8Tables15.3.9Margin collapsing quirks15.3.10Form controls15.3.11Thehrelement15.3.12Thefieldsetandlegendelements 15.3.1Hidden elements 15.3.2The page 15.3.3Flow content 15.3.4Phrasing content 15.3.5Bidirectional text 15.3.6Sections and headings 15.3.7Lists 15.3.8Tables 15.3.9Margin collapsing quirks 15.3.10Form controls 15.3.11Thehrelement 15.3.12Thefieldsetandlegendelements 15.4Replaced elements15.4.1Embedded content15.4.2Images15.4.3Attributes for embedded content and images15.4.4Image maps 15.4.1Embedded content 15.4.2Images 15.4.3Attributes for embedded content and images 15.4.4Image maps 15.5Widgets15.5.1Native appearance15.5.2Writing mode15.5.3Button layout15.5.4Thebuttonelement15.5.5Thedetailsandsummaryelements15.5.6Theinputelement as a text entry widget15.5.7Theinputelement as domain-specific widgets15.5.8Theinputelement as a range control15.5.9Theinputelement as a color
  well15.5.10Theinputelement as a checkbox and radio button widgets15.5.11Theinputelement as a file upload control15.5.12Theinputelement as a button15.5.13Themarqueeelement15.5.14Themeterelement15.5.15Theprogresselement15.5.16Theselectelement15.5.17Thetextareaelement 15.5.1Native appearance 15.5.2Writing mode 15.5.3Button layout 15.5.4Thebuttonelement 15.5.5Thedetailsandsummaryelements 15.5.6Theinputelement as a text entry widget 15.5.7Theinputelement as domain-specific widgets 15.5.8Theinputelement as a range control 15.5.9Theinputelement as a color
  well 15.5.10Theinputelement as a checkbox and radio button widgets 15.5.11Theinputelement as a file upload control 15.5.12Theinputelement as a button 15.5.13Themarqueeelement 15.5.14Themeterelement 15.5.15Theprogresselement 15.5.16Theselectelement 15.5.17Thetextareaelement 15.6Frames and framesets 15.7Interactive media15.7.1Links, forms, and navigation15.7.2Thetitleattribute15.7.3Editing hosts15.7.4Text rendered in native user interfaces 15.7.1Links, forms, and navigation 15.7.2Thetitleattribute 15.7.3Editing hosts 15.7.4Text rendered in native user interfaces 15.8Print media 15.9Unstyled XML documents 16Obsolete features16.1Obsolete but conforming features16.1.1Warnings for obsolete but conforming features16.2Non-conforming features16.3Requirements for implementations16.3.1Themarqueeelement16.3.2Frames16.3.3Other elements, attributes and APIs 16.1Obsolete but conforming features16.1.1Warnings for obsolete but conforming features 16.1.1Warnings for obsolete but conforming features 16.2Non-conforming features 16.3Requirements for implementations16.3.1Themarqueeelement16.3.2Frames16.3.3Other elements, attributes and APIs 16.3.1Themarqueeelement 16.3.2Frames 16.3.3Other elements, attributes and APIs 17IANA considerations17.1text/html17.2multipart/x-mixed-replace17.3application/xhtml+xml17.4text/ping17.5application/microdata+json17.6text/event-stream17.7web+scheme prefix 17.1text/html 17.2multipart/x-mixed-replace 17.3application/xhtml+xml 17.4text/ping 17.5application/microdata+json 17.6text/event-stream 17.7web+scheme prefix IndexElementsElement content categoriesAttributesElement interfacesAll interfacesEventsHTTP headersMIME types Elements Element content categories Attributes Element interfaces All interfaces Events HTTP headers MIME types References Acknowledgments Intellectual property rights 1.1Where does this specification fit? 1.2Is this HTML5? 1.3Background 1.4Audience 1.5Scope 1.6History 1.7Design notes1.7.1Serializability of script execution1.7.2Compliance with other specifications1.7.3Extensibility 1.7.1Serializability of script execution 1.7.2Compliance with other specifications 1.7.3Extensibility 1.8HTML vs XML syntax 1.9Structure of this specification1.9.1How to read this specification1.9.2Typographic conventions 1.9.1How to read this specification 1.9.2Typographic conventions 1.10A quick introduction to HTML1.10.1Writing secure applications with HTML1.10.2Common pitfalls to avoid when using the scripting APIs1.10.3How to catch mistakes when writing HTML: validators and conformance checkers 1.10.1Writing secure applications with HTML 1.10.2Common pitfalls to avoid when using the scripting APIs 1.10.3How to catch mistakes when writing HTML: validators and conformance checkers 1.11Conformance requirements for authors1.11.1Presentational markup1.11.2Syntax errors1.11.3Restrictions on content models and on attribute values 1.11.1Presentational markup 1.11.2Syntax errors 1.11.3Restrictions on content models and on attribute values 1.12Suggested reading 1.7.1Serializability of script execution 1.7.2Compliance with other specifications 1.7.3Extensibility 1.9.1How to read this specification 1.9.2Typographic conventions 1.10.1Writing secure applications with HTML 1.10.2Common pitfalls to avoid when using the scripting APIs 1.10.3How to catch mistakes when writing HTML: validators and conformance checkers 1.11.1Presentational markup 1.11.2Syntax errors 1.11.3Restrictions on content models and on attribute values 2.1Terminology2.1.1Parallelism2.1.2Resources2.1.3XML compatibility2.1.4DOM trees2.1.5Scripting2.1.6Plugins2.1.7Character encodings2.1.8Conformance classes2.1.9Dependencies2.1.10Extensibility2.1.11Interactions with XPath and XSLT 2.1.1Parallelism 2.1.2Resources 2.1.3XML compatibility 2.1.4DOM trees 2.1.5Scripting 2.1.6Plugins 2.1.7Character encodings 2.1.8Conformance classes 2.1.9Dependencies 2.1.10Extensibility 2.1.11Interactions with XPath and XSLT 2.2Policy-controlled features 2.3Common microsyntaxes2.3.1Common parser idioms2.3.2Boolean attributes2.3.3Keywords and enumerated attributes2.3.4Numbers2.3.4.1Signed integers2.3.4.2Non-negative integers2.3.4.3Floating-point numbers2.3.4.4Percentages and lengths2.3.4.5Nonzero percentages and lengths2.3.4.6Lists of floating-point numbers2.3.4.7Lists of dimensions2.3.5Dates and times2.3.5.1Months2.3.5.2Dates2.3.5.3Yearless dates2.3.5.4Times2.3.5.5Local dates and times2.3.5.6Time zones2.3.5.7Global dates and times2.3.5.8Weeks2.3.5.9Durations2.3.5.10Vaguer moments in time2.3.6Legacy colors2.3.7Space-separated tokens2.3.8Comma-separated tokens2.3.9References2.3.10Media queries2.3.11Unique internal values 2.3.1Common parser idioms 2.3.2Boolean attributes 2.3.3Keywords and enumerated attributes 2.3.4Numbers2.3.4.1Signed integers2.3.4.2Non-negative integers2.3.4.3Floating-point numbers2.3.4.4Percentages and lengths2.3.4.5Nonzero percentages and lengths2.3.4.6Lists of floating-point numbers2.3.4.7Lists of dimensions 2.3.4.1Signed integers 2.3.4.2Non-negative integers 2.3.4.3Floating-point numbers 2.3.4.4Percentages and lengths 2.3.4.5Nonzero percentages and lengths 2.3.4.6Lists of floating-point numbers 2.3.4.7Lists of dimensions 2.3.5Dates and times2.3.5.1Months2.3.5.2Dates2.3.5.3Yearless dates2.3.5.4Times2.3.5.5Local dates and times2.3.5.6Time zones2.3.5.7Global dates and times2.3.5.8Weeks2.3.5.9Durations2.3.5.10Vaguer moments in time 2.3.5.1Months 2.3.5.2Dates 2.3.5.3Yearless dates 2.3.5.4Times 2.3.5.5Local dates and times 2.3.5.6Time zones 2.3.5.7Global dates and times 2.3.5.8Weeks 2.3.5.9Durations 2.3.5.10Vaguer moments in time 2.3.6Legacy colors 2.3.7Space-separated tokens 2.3.8Comma-separated tokens 2.3.9References 2.3.10Media queries 2.3.11Unique internal values 2.4URLs2.4.1Terminology2.4.2Parsing URLs2.4.3Dynamic changes to base URLs 2.4.1Terminology 2.4.2Parsing URLs 2.4.3Dynamic changes to base URLs 2.5Fetching resources2.5.1Terminology2.5.2Determining the type of a resource2.5.3Extracting character encodings frommetaelements2.5.4CORS settings attributes2.5.5Referrer policy attributes2.5.6Nonce attributes2.5.7Lazy loading attributes2.5.8Blocking attributes2.5.9Fetch priority attributes 2.5.1Terminology 2.5.2Determining the type of a resource 2.5.3Extracting character encodings frommetaelements 2.5.4CORS settings attributes 2.5.5Referrer policy attributes 2.5.6Nonce attributes 2.5.7Lazy loading attributes 2.5.8Blocking attributes 2.5.9Fetch priority attributes 2.6Common DOM interfaces2.6.1Reflecting content attributes in IDL attributes2.6.2Using reflect in specifications2.6.3Collections2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList)2.6.3.2TheHTMLFormControlsCollectioninterface2.6.3.3TheHTMLOptionsCollectioninterface2.6.4TheDOMStringListinterface 2.6.1Reflecting content attributes in IDL attributes 2.6.2Using reflect in specifications 2.6.3Collections2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList)2.6.3.2TheHTMLFormControlsCollectioninterface2.6.3.3TheHTMLOptionsCollectioninterface 2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.6.3.2TheHTMLFormControlsCollectioninterface 2.6.3.3TheHTMLOptionsCollectioninterface 2.6.4TheDOMStringListinterface 2.7Safe passing of structured data2.7.1Serializable objects2.7.2Transferable objects2.7.3StructuredSerializeInternal (value,forStorage[ ,memory] )2.7.4StructuredSerialize (value)2.7.5StructuredSerializeForStorage (value)2.7.6StructuredDeserialize (serialized,targetRealm[ ,memory] )2.7.7StructuredSerializeWithTransfer (value,transferList)2.7.8StructuredDeserializeWithTransfer (serializeWithTransferResult,targetRealm)2.7.9Performing serialization and
  transferring from other specifications2.7.10Structured cloning API 2.7.1Serializable objects 2.7.2Transferable objects 2.7.3StructuredSerializeInternal (value,forStorage[ ,memory] ) 2.7.4StructuredSerialize (value) 2.7.5StructuredSerializeForStorage (value) 2.7.6StructuredDeserialize (serialized,targetRealm[ ,memory] ) 2.7.7StructuredSerializeWithTransfer (value,transferList) 2.7.8StructuredDeserializeWithTransfer (serializeWithTransferResult,targetRealm) 2.7.9Performing serialization and
  transferring from other specifications 2.7.10Structured cloning API 2.1.1Parallelism 2.1.2Resources 2.1.3XML compatibility 2.1.4DOM trees 2.1.5Scripting 2.1.6Plugins 2.1.7Character encodings 2.1.8Conformance classes 2.1.9Dependencies 2.1.10Extensibility 2.1.11Interactions with XPath and XSLT 2.3.1Common parser idioms 2.3.2Boolean attributes 2.3.3Keywords and enumerated attributes 2.3.4Numbers2.3.4.1Signed integers2.3.4.2Non-negative integers2.3.4.3Floating-point numbers2.3.4.4Percentages and lengths2.3.4.5Nonzero percentages and lengths2.3.4.6Lists of floating-point numbers2.3.4.7Lists of dimensions 2.3.4.1Signed integers 2.3.4.2Non-negative integers 2.3.4.3Floating-point numbers 2.3.4.4Percentages and lengths 2.3.4.5Nonzero percentages and lengths 2.3.4.6Lists of floating-point numbers 2.3.4.7Lists of dimensions 2.3.5Dates and times2.3.5.1Months2.3.5.2Dates2.3.5.3Yearless dates2.3.5.4Times2.3.5.5Local dates and times2.3.5.6Time zones2.3.5.7Global dates and times2.3.5.8Weeks2.3.5.9Durations2.3.5.10Vaguer moments in time 2.3.5.1Months 2.3.5.2Dates 2.3.5.3Yearless dates 2.3.5.4Times 2.3.5.5Local dates and times 2.3.5.6Time zones 2.3.5.7Global dates and times 2.3.5.8Weeks 2.3.5.9Durations 2.3.5.10Vaguer moments in time 2.3.6Legacy colors 2.3.7Space-separated tokens 2.3.8Comma-separated tokens 2.3.9References 2.3.10Media queries 2.3.11Unique internal values 2.3.4.1Signed integers 2.3.4.2Non-negative integers 2.3.4.3Floating-point numbers 2.3.4.4Percentages and lengths 2.3.4.5Nonzero percentages and lengths 2.3.4.6Lists of floating-point numbers 2.3.4.7Lists of dimensions 2.3.5.1Months 2.3.5.2Dates 2.3.5.3Yearless dates 2.3.5.4Times 2.3.5.5Local dates and times 2.3.5.6Time zones 2.3.5.7Global dates and times 2.3.5.8Weeks 2.3.5.9Durations 2.3.5.10Vaguer moments in time 2.4.1Terminology 2.4.2Parsing URLs 2.4.3Dynamic changes to base URLs 2.5.1Terminology 2.5.2Determining the type of a resource 2.5.3Extracting character encodings frommetaelements 2.5.4CORS settings attributes 2.5.5Referrer policy attributes 2.5.6Nonce attributes 2.5.7Lazy loading attributes 2.5.8Blocking attributes 2.5.9Fetch priority attributes 2.6.1Reflecting content attributes in IDL attributes 2.6.2Using reflect in specifications 2.6.3Collections2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList)2.6.3.2TheHTMLFormControlsCollectioninterface2.6.3.3TheHTMLOptionsCollectioninterface 2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.6.3.2TheHTMLFormControlsCollectioninterface 2.6.3.3TheHTMLOptionsCollectioninterface 2.6.4TheDOMStringListinterface 2.6.3.1TheHTMLAllCollectioninterface2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.6.3.2TheHTMLFormControlsCollectioninterface 2.6.3.3TheHTMLOptionsCollectioninterface 2.6.3.1.1[[Call]] (thisArgument,argumentsList) 2.7.1Serializable objects 2.7.2Transferable objects 2.7.3StructuredSerializeInternal (value,forStorage[ ,memory] ) 2.7.4StructuredSerialize (value) 2.7.5StructuredSerializeForStorage (value) 2.7.6StructuredDeserialize (serialized,targetRealm[ ,memory] ) 2.7.7StructuredSerializeWithTransfer (value,transferList) 2.7.8StructuredDeserializeWithTransfer (serializeWithTransferResult,targetRealm) 2.7.9Performing serialization and
  transferring from other specifications 2.7.10Structured cloning API 3.1Documents3.1.1TheDocumentobject3.1.2TheDocumentOrShadowRootinterface3.1.3Resource metadata management3.1.4Reporting document loading status3.1.5Render-blocking mechanism3.1.6DOM tree accessors 3.1.1TheDocumentobject 3.1.2TheDocumentOrShadowRootinterface 3.1.3Resource metadata management 3.1.4Reporting document loading status 3.1.5Render-blocking mechanism 3.1.6DOM tree accessors 3.2Elements3.2.1Semantics3.2.2Elements in the DOM3.2.3HTML element constructors3.2.4Element definitions3.2.4.1Attributes3.2.5Content models3.2.5.1The ""nothing"" content model3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements3.2.5.3Transparent content models3.2.5.4Paragraphs3.2.6Global attributes3.2.6.1Thetitleattribute3.2.6.2Thelangandxml:langattributes3.2.6.3Thetranslateattribute3.2.6.4Thedirattribute3.2.6.5Thestyleattribute3.2.6.6Embedding custom non-visible data with thedata-*attributes3.2.7TheinnerTextandouterTextproperties3.2.8Requirements relating to the bidirectional algorithm3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters3.2.8.2User agent conformance criteria3.2.9Requirements related to ARIA and to platform accessibility APIs 3.2.1Semantics 3.2.2Elements in the DOM 3.2.3HTML element constructors 3.2.4Element definitions3.2.4.1Attributes 3.2.4.1Attributes 3.2.5Content models3.2.5.1The ""nothing"" content model3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements3.2.5.3Transparent content models3.2.5.4Paragraphs 3.2.5.1The ""nothing"" content model 3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements 3.2.5.2.1Metadata content 3.2.5.2.2Flow content 3.2.5.2.3Sectioning content 3.2.5.2.4Heading content 3.2.5.2.5Phrasing content 3.2.5.2.6Embedded content 3.2.5.2.7Interactive content 3.2.5.2.8Palpable content 3.2.5.2.9Script-supporting elements 3.2.5.3Transparent content models 3.2.5.4Paragraphs 3.2.6Global attributes3.2.6.1Thetitleattribute3.2.6.2Thelangandxml:langattributes3.2.6.3Thetranslateattribute3.2.6.4Thedirattribute3.2.6.5Thestyleattribute3.2.6.6Embedding custom non-visible data with thedata-*attributes 3.2.6.1Thetitleattribute 3.2.6.2Thelangandxml:langattributes 3.2.6.3Thetranslateattribute 3.2.6.4Thedirattribute 3.2.6.5Thestyleattribute 3.2.6.6Embedding custom non-visible data with thedata-*attributes 3.2.7TheinnerTextandouterTextproperties 3.2.8Requirements relating to the bidirectional algorithm3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters3.2.8.2User agent conformance criteria 3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters 3.2.8.2User agent conformance criteria 3.2.9Requirements related to ARIA and to platform accessibility APIs 3.1.1TheDocumentobject 3.1.2TheDocumentOrShadowRootinterface 3.1.3Resource metadata management 3.1.4Reporting document loading status 3.1.5Render-blocking mechanism 3.1.6DOM tree accessors 3.2.1Semantics 3.2.2Elements in the DOM 3.2.3HTML element constructors 3.2.4Element definitions3.2.4.1Attributes 3.2.4.1Attributes 3.2.5Content models3.2.5.1The ""nothing"" content model3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements3.2.5.3Transparent content models3.2.5.4Paragraphs 3.2.5.1The ""nothing"" content model 3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements 3.2.5.2.1Metadata content 3.2.5.2.2Flow content 3.2.5.2.3Sectioning content 3.2.5.2.4Heading content 3.2.5.2.5Phrasing content 3.2.5.2.6Embedded content 3.2.5.2.7Interactive content 3.2.5.2.8Palpable content 3.2.5.2.9Script-supporting elements 3.2.5.3Transparent content models 3.2.5.4Paragraphs 3.2.6Global attributes3.2.6.1Thetitleattribute3.2.6.2Thelangandxml:langattributes3.2.6.3Thetranslateattribute3.2.6.4Thedirattribute3.2.6.5Thestyleattribute3.2.6.6Embedding custom non-visible data with thedata-*attributes 3.2.6.1Thetitleattribute 3.2.6.2Thelangandxml:langattributes 3.2.6.3Thetranslateattribute 3.2.6.4Thedirattribute 3.2.6.5Thestyleattribute 3.2.6.6Embedding custom non-visible data with thedata-*attributes 3.2.7TheinnerTextandouterTextproperties 3.2.8Requirements relating to the bidirectional algorithm3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters3.2.8.2User agent conformance criteria 3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters 3.2.8.2User agent conformance criteria 3.2.9Requirements related to ARIA and to platform accessibility APIs 3.2.4.1Attributes 3.2.5.1The ""nothing"" content model 3.2.5.2Kinds of content3.2.5.2.1Metadata content3.2.5.2.2Flow content3.2.5.2.3Sectioning content3.2.5.2.4Heading content3.2.5.2.5Phrasing content3.2.5.2.6Embedded content3.2.5.2.7Interactive content3.2.5.2.8Palpable content3.2.5.2.9Script-supporting elements 3.2.5.2.1Metadata content 3.2.5.2.2Flow content 3.2.5.2.3Sectioning content 3.2.5.2.4Heading content 3.2.5.2.5Phrasing content 3.2.5.2.6Embedded content 3.2.5.2.7Interactive content 3.2.5.2.8Palpable content 3.2.5.2.9Script-supporting elements 3.2.5.3Transparent content models 3.2.5.4Paragraphs 3.2.5.2.1Metadata content 3.2.5.2.2Flow content 3.2.5.2.3Sectioning content 3.2.5.2.4Heading content 3.2.5.2.5Phrasing content 3.2.5.2.6Embedded content 3.2.5.2.7Interactive content 3.2.5.2.8Palpable content 3.2.5.2.9Script-supporting elements 3.2.6.1Thetitleattribute 3.2.6.2Thelangandxml:langattributes 3.2.6.3Thetranslateattribute 3.2.6.4Thedirattribute 3.2.6.5Thestyleattribute 3.2.6.6Embedding custom non-visible data with thedata-*attributes 3.2.8.1Authoring conformance criteria for bidirectional-algorithm formatting characters 3.2.8.2User agent conformance criteria 4.1The document element4.1.1Thehtmlelement 4.1.1Thehtmlelement 4.2Document metadata4.2.1Theheadelement4.2.2Thetitleelement4.2.3Thebaseelement4.2.4Thelinkelement4.2.4.1Processing themediaattribute4.2.4.2Processing thetypeattribute4.2.4.3Fetching and processing a resource
  from alinkelement4.2.4.4Processing `Link` headers4.2.4.5Early hints4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement4.2.5Themetaelement4.2.5.1Standard metadata names4.2.5.2Other metadata names4.2.5.3Pragma directives4.2.5.4Specifying the document's character encoding4.2.6Thestyleelement4.2.7Interactions of styling and scripting 4.2.1Theheadelement 4.2.2Thetitleelement 4.2.3Thebaseelement 4.2.4Thelinkelement4.2.4.1Processing themediaattribute4.2.4.2Processing thetypeattribute4.2.4.3Fetching and processing a resource
  from alinkelement4.2.4.4Processing `Link` headers4.2.4.5Early hints4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement 4.2.4.1Processing themediaattribute 4.2.4.2Processing thetypeattribute 4.2.4.3Fetching and processing a resource
  from alinkelement 4.2.4.4Processing `Link` headers 4.2.4.5Early hints 4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement 4.2.5Themetaelement4.2.5.1Standard metadata names4.2.5.2Other metadata names4.2.5.3Pragma directives4.2.5.4Specifying the document's character encoding 4.2.5.1Standard metadata names 4.2.5.2Other metadata names 4.2.5.3Pragma directives 4.2.5.4Specifying the document's character encoding 4.2.6Thestyleelement 4.2.7Interactions of styling and scripting 4.3Sections4.3.1Thebodyelement4.3.2Thearticleelement4.3.3Thesectionelement4.3.4Thenavelement4.3.5Theasideelement4.3.6Theh1,h2,h3,h4,h5, andh6elements4.3.7Thehgroupelement4.3.8Theheaderelement4.3.9Thefooterelement4.3.10Theaddresselement4.3.11Headings and outlines4.3.11.1Sample outlines4.3.11.2Exposing outlines to users4.3.12Usage summary4.3.12.1Article or section? 4.3.1Thebodyelement 4.3.2Thearticleelement 4.3.3Thesectionelement 4.3.4Thenavelement 4.3.5Theasideelement 4.3.6Theh1,h2,h3,h4,h5, andh6elements 4.3.7Thehgroupelement 4.3.8Theheaderelement 4.3.9Thefooterelement 4.3.10Theaddresselement 4.3.11Headings and outlines4.3.11.1Sample outlines4.3.11.2Exposing outlines to users 4.3.11.1Sample outlines 4.3.11.2Exposing outlines to users 4.3.12Usage summary4.3.12.1Article or section? 4.3.12.1Article or section? 4.4Grouping content4.4.1Thepelement4.4.2Thehrelement4.4.3Thepreelement4.4.4Theblockquoteelement4.4.5Theolelement4.4.6Theulelement4.4.7Themenuelement4.4.8Thelielement4.4.9Thedlelement4.4.10Thedtelement4.4.11Theddelement4.4.12Thefigureelement4.4.13Thefigcaptionelement4.4.14Themainelement4.4.15Thesearchelement4.4.16Thedivelement 4.4.1Thepelement 4.4.2Thehrelement 4.4.3Thepreelement 4.4.4Theblockquoteelement 4.4.5Theolelement 4.4.6Theulelement 4.4.7Themenuelement 4.4.8Thelielement 4.4.9Thedlelement 4.4.10Thedtelement 4.4.11Theddelement 4.4.12Thefigureelement 4.4.13Thefigcaptionelement 4.4.14Themainelement 4.4.15Thesearchelement 4.4.16Thedivelement 4.5Text-level semantics4.5.1Theaelement4.5.2Theemelement4.5.3Thestrongelement4.5.4Thesmallelement4.5.5Theselement4.5.6Theciteelement4.5.7Theqelement4.5.8Thedfnelement4.5.9Theabbrelement4.5.10Therubyelement4.5.11Thertelement4.5.12Therpelement4.5.13Thedataelement4.5.14Thetimeelement4.5.15Thecodeelement4.5.16Thevarelement4.5.17Thesampelement4.5.18Thekbdelement4.5.19Thesubandsupelements4.5.20Theielement4.5.21Thebelement4.5.22Theuelement4.5.23Themarkelement4.5.24Thebdielement4.5.25Thebdoelement4.5.26Thespanelement4.5.27Thebrelement4.5.28Thewbrelement4.5.29Usage summary 4.5.1Theaelement 4.5.2Theemelement 4.5.3Thestrongelement 4.5.4Thesmallelement 4.5.5Theselement 4.5.6Theciteelement 4.5.7Theqelement 4.5.8Thedfnelement 4.5.9Theabbrelement 4.5.10Therubyelement 4.5.11Thertelement 4.5.12Therpelement 4.5.13Thedataelement 4.5.14Thetimeelement 4.5.15Thecodeelement 4.5.16Thevarelement 4.5.17Thesampelement 4.5.18Thekbdelement 4.5.19Thesubandsupelements 4.5.20Theielement 4.5.21Thebelement 4.5.22Theuelement 4.5.23Themarkelement 4.5.24Thebdielement 4.5.25Thebdoelement 4.5.26Thespanelement 4.5.27Thebrelement 4.5.28Thewbrelement 4.5.29Usage summary 4.6Links4.6.1Introduction4.6.2Links created byaandareaelements4.6.3API foraandareaelements4.6.4Following hyperlinks4.6.5Downloading resources4.6.6Hyperlink auditing4.6.6.1The `Ping-From` and `Ping-To` headers4.6.7Link types4.6.7.1Link type ""alternate""4.6.7.2Link type ""author""4.6.7.3Link type ""bookmark""4.6.7.4Link type ""canonical""4.6.7.5Link type ""dns-prefetch""4.6.7.6Link type ""expect""4.6.7.7Link type ""external""4.6.7.8Link type ""help""4.6.7.9Link type ""icon""4.6.7.10Link type ""license""4.6.7.11Link type ""manifest""4.6.7.12Link type ""modulepreload""4.6.7.13Link type ""nofollow""4.6.7.14Link type ""noopener""4.6.7.15Link type ""noreferrer""4.6.7.16Link type ""opener""4.6.7.17Link type ""pingback""4.6.7.18Link type ""preconnect""4.6.7.19Link type ""prefetch""4.6.7.20Link type ""preload""4.6.7.21Link type ""privacy-policy""4.6.7.22Link type ""search""4.6.7.23Link type ""stylesheet""4.6.7.24Link type ""tag""4.6.7.25Link Type ""terms-of-service""4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev""4.6.7.27Other link types 4.6.1Introduction 4.6.2Links created byaandareaelements 4.6.3API foraandareaelements 4.6.4Following hyperlinks 4.6.5Downloading resources 4.6.6Hyperlink auditing4.6.6.1The `Ping-From` and `Ping-To` headers 4.6.6.1The `Ping-From` and `Ping-To` headers 4.6.7Link types4.6.7.1Link type ""alternate""4.6.7.2Link type ""author""4.6.7.3Link type ""bookmark""4.6.7.4Link type ""canonical""4.6.7.5Link type ""dns-prefetch""4.6.7.6Link type ""expect""4.6.7.7Link type ""external""4.6.7.8Link type ""help""4.6.7.9Link type ""icon""4.6.7.10Link type ""license""4.6.7.11Link type ""manifest""4.6.7.12Link type ""modulepreload""4.6.7.13Link type ""nofollow""4.6.7.14Link type ""noopener""4.6.7.15Link type ""noreferrer""4.6.7.16Link type ""opener""4.6.7.17Link type ""pingback""4.6.7.18Link type ""preconnect""4.6.7.19Link type ""prefetch""4.6.7.20Link type ""preload""4.6.7.21Link type ""privacy-policy""4.6.7.22Link type ""search""4.6.7.23Link type ""stylesheet""4.6.7.24Link type ""tag""4.6.7.25Link Type ""terms-of-service""4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev""4.6.7.27Other link types 4.6.7.1Link type ""alternate"" 4.6.7.2Link type ""author"" 4.6.7.3Link type ""bookmark"" 4.6.7.4Link type ""canonical"" 4.6.7.5Link type ""dns-prefetch"" 4.6.7.6Link type ""expect"" 4.6.7.7Link type ""external"" 4.6.7.8Link type ""help"" 4.6.7.9Link type ""icon"" 4.6.7.10Link type ""license"" 4.6.7.11Link type ""manifest"" 4.6.7.12Link type ""modulepreload"" 4.6.7.13Link type ""nofollow"" 4.6.7.14Link type ""noopener"" 4.6.7.15Link type ""noreferrer"" 4.6.7.16Link type ""opener"" 4.6.7.17Link type ""pingback"" 4.6.7.18Link type ""preconnect"" 4.6.7.19Link type ""prefetch"" 4.6.7.20Link type ""preload"" 4.6.7.21Link type ""privacy-policy"" 4.6.7.22Link type ""search"" 4.6.7.23Link type ""stylesheet"" 4.6.7.24Link type ""tag"" 4.6.7.25Link Type ""terms-of-service"" 4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev"" 4.6.7.26.1Link type ""next"" 4.6.7.26.2Link type ""prev"" 4.6.7.27Other link types 4.7Edits4.7.1Theinselement4.7.2Thedelelement4.7.3Attributes common toinsanddelelements4.7.4Edits and paragraphs4.7.5Edits and lists4.7.6Edits and tables 4.7.1Theinselement 4.7.2Thedelelement 4.7.3Attributes common toinsanddelelements 4.7.4Edits and paragraphs 4.7.5Edits and lists 4.7.6Edits and tables 4.8Embedded content4.8.1Thepictureelement4.8.2Thesourceelement4.8.3Theimgelement4.8.4Images4.8.4.1Introduction4.8.4.1.1Adaptive images4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers4.8.5Theiframeelement4.8.6Theembedelement4.8.7Theobjectelement4.8.8Thevideoelement4.8.9Theaudioelement4.8.10Thetrackelement4.8.11Media elements4.8.11.1Error codes4.8.11.2Location of the media resource4.8.11.3MIME types4.8.11.4Network states4.8.11.5Loading the media resource4.8.11.6Offsets into the media resource4.8.11.7Ready states4.8.11.8Playing the media resource4.8.11.9Seeking4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks4.8.11.12Identifying a track kind through a URL4.8.11.13User interface4.8.11.14Time ranges4.8.11.15TheTrackEventinterface4.8.11.16Events summary4.8.11.17Security and privacy considerations4.8.11.18Best practices for authors using media elements4.8.11.19Best practices for implementers of media elements4.8.12Themapelement4.8.13Theareaelement4.8.14Image maps4.8.14.1Authoring4.8.14.2Processing model4.8.15MathML4.8.16SVG4.8.17Dimension attributes 4.8.1Thepictureelement 4.8.2Thesourceelement 4.8.3Theimgelement 4.8.4Images4.8.4.1Introduction4.8.4.1.1Adaptive images4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers 4.8.4.1Introduction4.8.4.1.1Adaptive images 4.8.4.1.1Adaptive images 4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes 4.8.4.2.1Srcset attributes 4.8.4.2.2Sizes attributes 4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes 4.8.4.3.1When to obtain images 4.8.4.3.2Reacting to DOM mutations 4.8.4.3.3The list of available images 4.8.4.3.4Decoding images 4.8.4.3.5Updating the image data 4.8.4.3.6Preparing an image for presentation 4.8.4.3.7Selecting an image source 4.8.4.3.8Creating a source set from attributes 4.8.4.3.9Updating the source set 4.8.4.3.10Parsing a srcset attribute 4.8.4.3.11Parsing a sizes attribute 4.8.4.3.12Normalizing the source densities 4.8.4.3.13Reacting to environment changes 4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers 4.8.4.4.1General guidelines 4.8.4.4.2A link or button containing nothing but the image 4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations 4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos 4.8.4.4.5Text that has been rendered to a graphic for typographical effect 4.8.4.4.6A graphical representation of some of the surrounding text 4.8.4.4.7Ancillary images 4.8.4.4.8A purely decorative image that doesn't add any information 4.8.4.4.9A group of images that form a single larger picture with no links 4.8.4.4.10A group of images that form a single larger picture with links 4.8.4.4.11A key part of the content 4.8.4.4.12An image not intended for the user 4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images 4.8.4.4.14Guidance for markup generators 4.8.4.4.15Guidance for conformance checkers 4.8.5Theiframeelement 4.8.6Theembedelement 4.8.7Theobjectelement 4.8.8Thevideoelement 4.8.9Theaudioelement 4.8.10Thetrackelement 4.8.11Media elements4.8.11.1Error codes4.8.11.2Location of the media resource4.8.11.3MIME types4.8.11.4Network states4.8.11.5Loading the media resource4.8.11.6Offsets into the media resource4.8.11.7Ready states4.8.11.8Playing the media resource4.8.11.9Seeking4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks4.8.11.12Identifying a track kind through a URL4.8.11.13User interface4.8.11.14Time ranges4.8.11.15TheTrackEventinterface4.8.11.16Events summary4.8.11.17Security and privacy considerations4.8.11.18Best practices for authors using media elements4.8.11.19Best practices for implementers of media elements 4.8.11.1Error codes 4.8.11.2Location of the media resource 4.8.11.3MIME types 4.8.11.4Network states 4.8.11.5Loading the media resource 4.8.11.6Offsets into the media resource 4.8.11.7Ready states 4.8.11.8Playing the media resource 4.8.11.9Seeking 4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.10.1AudioTrackListandVideoTrackListobjects 4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks 4.8.11.11.1Text track model 4.8.11.11.2Sourcing in-band text tracks 4.8.11.11.3Sourcing out-of-band text tracks 4.8.11.11.4Guidelines for exposing cues in various formats as text track cues 4.8.11.11.5Text track API 4.8.11.11.6Event handlers for objects of the text track APIs 4.8.11.11.7Best practices for metadata text tracks 4.8.11.12Identifying a track kind through a URL 4.8.11.13User interface 4.8.11.14Time ranges 4.8.11.15TheTrackEventinterface 4.8.11.16Events summary 4.8.11.17Security and privacy considerations 4.8.11.18Best practices for authors using media elements 4.8.11.19Best practices for implementers of media elements 4.8.12Themapelement 4.8.13Theareaelement 4.8.14Image maps4.8.14.1Authoring4.8.14.2Processing model 4.8.14.1Authoring 4.8.14.2Processing model 4.8.15MathML 4.8.16SVG 4.8.17Dimension attributes 4.9Tabular data4.9.1Thetableelement4.9.1.1Techniques for describing tables4.9.1.2Techniques for table design4.9.2Thecaptionelement4.9.3Thecolgroupelement4.9.4Thecolelement4.9.5Thetbodyelement4.9.6Thetheadelement4.9.7Thetfootelement4.9.8Thetrelement4.9.9Thetdelement4.9.10Thethelement4.9.11Attributes common totdandthelements4.9.12Processing model4.9.12.1Forming a table4.9.12.2Forming relationships between data cells and header cells4.9.13Examples 4.9.1Thetableelement4.9.1.1Techniques for describing tables4.9.1.2Techniques for table design 4.9.1.1Techniques for describing tables 4.9.1.2Techniques for table design 4.9.2Thecaptionelement 4.9.3Thecolgroupelement 4.9.4Thecolelement 4.9.5Thetbodyelement 4.9.6Thetheadelement 4.9.7Thetfootelement 4.9.8Thetrelement 4.9.9Thetdelement 4.9.10Thethelement 4.9.11Attributes common totdandthelements 4.9.12Processing model4.9.12.1Forming a table4.9.12.2Forming relationships between data cells and header cells 4.9.12.1Forming a table 4.9.12.2Forming relationships between data cells and header cells 4.9.13Examples 4.10Forms4.10.1Introduction4.10.1.1Writing a form's user interface4.10.1.2Implementing the server-side processing for a form4.10.1.3Configuring a form to communicate with a server4.10.1.4Client-side form validation4.10.1.5Enabling client-side automatic filling of form controls4.10.1.6Improving the user experience on mobile devices4.10.1.7The difference between the field type, the autofill field name, and the input modality4.10.1.8Date, time, and number formats4.10.2Categories4.10.3Theformelement4.10.4Thelabelelement4.10.5Theinputelement4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button)4.10.5.2Implementation notes regarding localization of form controls4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute4.10.5.4Commoninputelement APIs4.10.5.5Common event behaviors4.10.6Thebuttonelement4.10.7Theselectelement4.10.8Thedatalistelement4.10.9Theoptgroupelement4.10.10Theoptionelement4.10.11Thetextareaelement4.10.12Theoutputelement4.10.13Theprogresselement4.10.14Themeterelement4.10.15Thefieldsetelement4.10.16Thelegendelement4.10.17Form control infrastructure4.10.17.1A form control's value4.10.17.2Mutability4.10.17.3Association of controls and forms4.10.18Attributes common to form controls4.10.18.1Naming form controls: thenameattribute4.10.18.2Submitting element directionality: thedirnameattribute4.10.18.3Limiting user input length: themaxlengthattribute4.10.18.4Setting minimum input length requirements: theminlengthattribute4.10.18.5Enabling and disabling form controls: thedisabledattribute4.10.18.6Form submission attributes4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model4.10.19APIs for the text control selections4.10.20Constraints4.10.20.1Definitions4.10.20.2Constraint validation4.10.20.3The constraint validation API4.10.20.4Security4.10.21Form submission4.10.21.1Introduction4.10.21.2Implicit submission4.10.21.3Form submission algorithm4.10.21.4Constructing the entry list4.10.21.5Selecting a form submission encoding4.10.21.6Converting an entry list to a list of name-value pairs4.10.21.7URL-encoded form data4.10.21.8Multipart form data4.10.21.9Plain text form data4.10.21.10TheSubmitEventinterface4.10.21.11TheFormDataEventinterface4.10.22Resetting a form 4.10.1Introduction4.10.1.1Writing a form's user interface4.10.1.2Implementing the server-side processing for a form4.10.1.3Configuring a form to communicate with a server4.10.1.4Client-side form validation4.10.1.5Enabling client-side automatic filling of form controls4.10.1.6Improving the user experience on mobile devices4.10.1.7The difference between the field type, the autofill field name, and the input modality4.10.1.8Date, time, and number formats 4.10.1.1Writing a form's user interface 4.10.1.2Implementing the server-side processing for a form 4.10.1.3Configuring a form to communicate with a server 4.10.1.4Client-side form validation 4.10.1.5Enabling client-side automatic filling of form controls 4.10.1.6Improving the user experience on mobile devices 4.10.1.7The difference between the field type, the autofill field name, and the input modality 4.10.1.8Date, time, and number formats 4.10.2Categories 4.10.3Theformelement 4.10.4Thelabelelement 4.10.5Theinputelement4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button)4.10.5.2Implementation notes regarding localization of form controls4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute4.10.5.4Commoninputelement APIs4.10.5.5Common event behaviors 4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button) 4.10.5.1.1Hidden state (type=hidden) 4.10.5.1.2Text (type=text) state and Search state (type=search) 4.10.5.1.3Telephone state (type=tel) 4.10.5.1.4URL state (type=url) 4.10.5.1.5Email state (type=email) 4.10.5.1.6Password state (type=password) 4.10.5.1.7Date state (type=date) 4.10.5.1.8Month state (type=month) 4.10.5.1.9Week state (type=week) 4.10.5.1.10Time state (type=time) 4.10.5.1.11Local Date and Time state (type=datetime-local) 4.10.5.1.12Number state (type=number) 4.10.5.1.13Range state (type=range) 4.10.5.1.14Color state (type=color) 4.10.5.1.15Checkbox state (type=checkbox) 4.10.5.1.16Radio Button state (type=radio) 4.10.5.1.17File Upload state (type=file) 4.10.5.1.18Submit Button state (type=submit) 4.10.5.1.19Image Button state (type=image) 4.10.5.1.20Reset Button state (type=reset) 4.10.5.1.21Button state (type=button) 4.10.5.2Implementation notes regarding localization of form controls 4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute 4.10.5.3.1Themaxlengthandminlengthattributes 4.10.5.3.2Thesizeattribute 4.10.5.3.3Thereadonlyattribute 4.10.5.3.4Therequiredattribute 4.10.5.3.5Themultipleattribute 4.10.5.3.6Thepatternattribute 4.10.5.3.7Theminandmaxattributes 4.10.5.3.8Thestepattribute 4.10.5.3.9Thelistattribute 4.10.5.3.10Theplaceholderattribute 4.10.5.4Commoninputelement APIs 4.10.5.5Common event behaviors 4.10.6Thebuttonelement 4.10.7Theselectelement 4.10.8Thedatalistelement 4.10.9Theoptgroupelement 4.10.10Theoptionelement 4.10.11Thetextareaelement 4.10.12Theoutputelement 4.10.13Theprogresselement 4.10.14Themeterelement 4.10.15Thefieldsetelement 4.10.16Thelegendelement 4.10.17Form control infrastructure4.10.17.1A form control's value4.10.17.2Mutability4.10.17.3Association of controls and forms 4.10.17.1A form control's value 4.10.17.2Mutability 4.10.17.3Association of controls and forms 4.10.18Attributes common to form controls4.10.18.1Naming form controls: thenameattribute4.10.18.2Submitting element directionality: thedirnameattribute4.10.18.3Limiting user input length: themaxlengthattribute4.10.18.4Setting minimum input length requirements: theminlengthattribute4.10.18.5Enabling and disabling form controls: thedisabledattribute4.10.18.6Form submission attributes4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model 4.10.18.1Naming form controls: thenameattribute 4.10.18.2Submitting element directionality: thedirnameattribute 4.10.18.3Limiting user input length: themaxlengthattribute 4.10.18.4Setting minimum input length requirements: theminlengthattribute 4.10.18.5Enabling and disabling form controls: thedisabledattribute 4.10.18.6Form submission attributes 4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model 4.10.18.7.1Autofilling form controls: theautocompleteattribute 4.10.18.7.2Processing model 4.10.19APIs for the text control selections 4.10.20Constraints4.10.20.1Definitions4.10.20.2Constraint validation4.10.20.3The constraint validation API4.10.20.4Security 4.10.20.1Definitions 4.10.20.2Constraint validation 4.10.20.3The constraint validation API 4.10.20.4Security 4.10.21Form submission4.10.21.1Introduction4.10.21.2Implicit submission4.10.21.3Form submission algorithm4.10.21.4Constructing the entry list4.10.21.5Selecting a form submission encoding4.10.21.6Converting an entry list to a list of name-value pairs4.10.21.7URL-encoded form data4.10.21.8Multipart form data4.10.21.9Plain text form data4.10.21.10TheSubmitEventinterface4.10.21.11TheFormDataEventinterface 4.10.21.1Introduction 4.10.21.2Implicit submission 4.10.21.3Form submission algorithm 4.10.21.4Constructing the entry list 4.10.21.5Selecting a form submission encoding 4.10.21.6Converting an entry list to a list of name-value pairs 4.10.21.7URL-encoded form data 4.10.21.8Multipart form data 4.10.21.9Plain text form data 4.10.21.10TheSubmitEventinterface 4.10.21.11TheFormDataEventinterface 4.10.22Resetting a form 4.11Interactive elements4.11.1Thedetailselement4.11.2Thesummaryelement4.11.3Commands4.11.3.1Facets4.11.3.2Using theaelement to define a command4.11.3.3Using thebuttonelement to define a command4.11.3.4Using theinputelement to define a command4.11.3.5Using theoptionelement to define a command4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command4.11.3.7Using theaccesskeyattribute to define a command on other elements4.11.4Thedialogelement 4.11.1Thedetailselement 4.11.2Thesummaryelement 4.11.3Commands4.11.3.1Facets4.11.3.2Using theaelement to define a command4.11.3.3Using thebuttonelement to define a command4.11.3.4Using theinputelement to define a command4.11.3.5Using theoptionelement to define a command4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command4.11.3.7Using theaccesskeyattribute to define a command on other elements 4.11.3.1Facets 4.11.3.2Using theaelement to define a command 4.11.3.3Using thebuttonelement to define a command 4.11.3.4Using theinputelement to define a command 4.11.3.5Using theoptionelement to define a command 4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command 4.11.3.7Using theaccesskeyattribute to define a command on other elements 4.11.4Thedialogelement 4.12Scripting4.12.1Thescriptelement4.12.1.1Processing model4.12.1.2Scripting languages4.12.1.3Restrictions for contents ofscriptelements4.12.1.4Inline documentation for external scripts4.12.1.5Interaction ofscriptelements and XSLT4.12.2Thenoscriptelement4.12.3Thetemplateelement4.12.3.1Interaction oftemplateelements with XSLT and XPath4.12.4Theslotelement4.12.5Thecanvaselement4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context4.12.5.4Color spaces and color space
  conversion4.12.5.5Serializing bitmaps to a file4.12.5.6Security withcanvaselements4.12.5.7Premultiplied alpha and the 2D rendering context 4.12.1Thescriptelement4.12.1.1Processing model4.12.1.2Scripting languages4.12.1.3Restrictions for contents ofscriptelements4.12.1.4Inline documentation for external scripts4.12.1.5Interaction ofscriptelements and XSLT 4.12.1.1Processing model 4.12.1.2Scripting languages 4.12.1.3Restrictions for contents ofscriptelements 4.12.1.4Inline documentation for external scripts 4.12.1.5Interaction ofscriptelements and XSLT 4.12.2Thenoscriptelement 4.12.3Thetemplateelement4.12.3.1Interaction oftemplateelements with XSLT and XPath 4.12.3.1Interaction oftemplateelements with XSLT and XPath 4.12.4Theslotelement 4.12.5Thecanvaselement4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context4.12.5.4Color spaces and color space
  conversion4.12.5.5Serializing bitmaps to a file4.12.5.6Security withcanvaselements4.12.5.7Premultiplied alpha and the 2D rendering context 4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples 4.12.5.1.1Implementation notes 4.12.5.1.2The canvas state 4.12.5.1.3Line styles 4.12.5.1.4Text styles 4.12.5.1.5Building paths 4.12.5.1.6Path2Dobjects 4.12.5.1.7Transformations 4.12.5.1.8Image sources for 2D rendering contexts 4.12.5.1.9Fill and stroke styles 4.12.5.1.10Drawing rectangles to the bitmap 4.12.5.1.11Drawing text to the bitmap 4.12.5.1.12Drawing paths to the canvas 4.12.5.1.13Drawing focus rings 4.12.5.1.14Drawing images 4.12.5.1.15Pixel manipulation 4.12.5.1.16Compositing 4.12.5.1.17Image smoothing 4.12.5.1.18Shadows 4.12.5.1.19Filters 4.12.5.1.20Working with externally-defined SVG filters 4.12.5.1.21Drawing model 4.12.5.1.22Best practices 4.12.5.1.23Examples 4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.2.1Introduction 4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context 4.12.5.3.1The offscreen 2D rendering context 4.12.5.4Color spaces and color space
  conversion 4.12.5.5Serializing bitmaps to a file 4.12.5.6Security withcanvaselements 4.12.5.7Premultiplied alpha and the 2D rendering context 4.13Custom elements4.13.1Introduction4.13.1.1Creating an autonomous custom element4.13.1.2Creating a form-associated custom element4.13.1.3Creating a custom element with default accessible roles, states, and properties4.13.1.4Creating a customized built-in element4.13.1.5Drawbacks of autonomous custom elements4.13.1.6Upgrading elements after their creation4.13.1.7Exposing custom element states4.13.2Requirements for custom element constructors and
  reactions4.13.3Core concepts4.13.4TheCustomElementRegistryinterface4.13.5Upgrades4.13.6Custom element reactions4.13.7Element internals4.13.7.1TheElementInternalsinterface4.13.7.2Shadow root access4.13.7.3Form-associated custom elements4.13.7.4Accessibility semantics4.13.7.5Custom state pseudo-class 4.13.1Introduction4.13.1.1Creating an autonomous custom element4.13.1.2Creating a form-associated custom element4.13.1.3Creating a custom element with default accessible roles, states, and properties4.13.1.4Creating a customized built-in element4.13.1.5Drawbacks of autonomous custom elements4.13.1.6Upgrading elements after their creation4.13.1.7Exposing custom element states 4.13.1.1Creating an autonomous custom element 4.13.1.2Creating a form-associated custom element 4.13.1.3Creating a custom element with default accessible roles, states, and properties 4.13.1.4Creating a customized built-in element 4.13.1.5Drawbacks of autonomous custom elements 4.13.1.6Upgrading elements after their creation 4.13.1.7Exposing custom element states 4.13.2Requirements for custom element constructors and
  reactions 4.13.3Core concepts 4.13.4TheCustomElementRegistryinterface 4.13.5Upgrades 4.13.6Custom element reactions 4.13.7Element internals4.13.7.1TheElementInternalsinterface4.13.7.2Shadow root access4.13.7.3Form-associated custom elements4.13.7.4Accessibility semantics4.13.7.5Custom state pseudo-class 4.13.7.1TheElementInternalsinterface 4.13.7.2Shadow root access 4.13.7.3Form-associated custom elements 4.13.7.4Accessibility semantics 4.13.7.5Custom state pseudo-class 4.14Common idioms without dedicated elements4.14.1Breadcrumb navigation4.14.2Tag clouds4.14.3Conversations4.14.4Footnotes 4.14.1Breadcrumb navigation 4.14.2Tag clouds 4.14.3Conversations 4.14.4Footnotes 4.15Disabled elements 4.16Matching HTML elements using selectors and CSS4.16.1Case-sensitivity of the CSS 'attr()' function4.16.2Case-sensitivity of selectors4.16.3Pseudo-classes 4.16.1Case-sensitivity of the CSS 'attr()' function 4.16.2Case-sensitivity of selectors 4.16.3Pseudo-classes 4.1.1Thehtmlelement 4.2.1Theheadelement 4.2.2Thetitleelement 4.2.3Thebaseelement 4.2.4Thelinkelement4.2.4.1Processing themediaattribute4.2.4.2Processing thetypeattribute4.2.4.3Fetching and processing a resource
  from alinkelement4.2.4.4Processing `Link` headers4.2.4.5Early hints4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement 4.2.4.1Processing themediaattribute 4.2.4.2Processing thetypeattribute 4.2.4.3Fetching and processing a resource
  from alinkelement 4.2.4.4Processing `Link` headers 4.2.4.5Early hints 4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement 4.2.5Themetaelement4.2.5.1Standard metadata names4.2.5.2Other metadata names4.2.5.3Pragma directives4.2.5.4Specifying the document's character encoding 4.2.5.1Standard metadata names 4.2.5.2Other metadata names 4.2.5.3Pragma directives 4.2.5.4Specifying the document's character encoding 4.2.6Thestyleelement 4.2.7Interactions of styling and scripting 4.2.4.1Processing themediaattribute 4.2.4.2Processing thetypeattribute 4.2.4.3Fetching and processing a resource
  from alinkelement 4.2.4.4Processing `Link` headers 4.2.4.5Early hints 4.2.4.6Providing users with a means to follow hyperlinks created using thelinkelement 4.2.5.1Standard metadata names 4.2.5.2Other metadata names 4.2.5.3Pragma directives 4.2.5.4Specifying the document's character encoding 4.3.1Thebodyelement 4.3.2Thearticleelement 4.3.3Thesectionelement 4.3.4Thenavelement 4.3.5Theasideelement 4.3.6Theh1,h2,h3,h4,h5, andh6elements 4.3.7Thehgroupelement 4.3.8Theheaderelement 4.3.9Thefooterelement 4.3.10Theaddresselement 4.3.11Headings and outlines4.3.11.1Sample outlines4.3.11.2Exposing outlines to users 4.3.11.1Sample outlines 4.3.11.2Exposing outlines to users 4.3.12Usage summary4.3.12.1Article or section? 4.3.12.1Article or section? 4.3.11.1Sample outlines 4.3.11.2Exposing outlines to users 4.3.12.1Article or section? 4.4.1Thepelement 4.4.2Thehrelement 4.4.3Thepreelement 4.4.4Theblockquoteelement 4.4.5Theolelement 4.4.6Theulelement 4.4.7Themenuelement 4.4.8Thelielement 4.4.9Thedlelement 4.4.10Thedtelement 4.4.11Theddelement 4.4.12Thefigureelement 4.4.13Thefigcaptionelement 4.4.14Themainelement 4.4.15Thesearchelement 4.4.16Thedivelement 4.5.1Theaelement 4.5.2Theemelement 4.5.3Thestrongelement 4.5.4Thesmallelement 4.5.5Theselement 4.5.6Theciteelement 4.5.7Theqelement 4.5.8Thedfnelement 4.5.9Theabbrelement 4.5.10Therubyelement 4.5.11Thertelement 4.5.12Therpelement 4.5.13Thedataelement 4.5.14Thetimeelement 4.5.15Thecodeelement 4.5.16Thevarelement 4.5.17Thesampelement 4.5.18Thekbdelement 4.5.19Thesubandsupelements 4.5.20Theielement 4.5.21Thebelement 4.5.22Theuelement 4.5.23Themarkelement 4.5.24Thebdielement 4.5.25Thebdoelement 4.5.26Thespanelement 4.5.27Thebrelement 4.5.28Thewbrelement 4.5.29Usage summary 4.6.1Introduction 4.6.2Links created byaandareaelements 4.6.3API foraandareaelements 4.6.4Following hyperlinks 4.6.5Downloading resources 4.6.6Hyperlink auditing4.6.6.1The `Ping-From` and `Ping-To` headers 4.6.6.1The `Ping-From` and `Ping-To` headers 4.6.7Link types4.6.7.1Link type ""alternate""4.6.7.2Link type ""author""4.6.7.3Link type ""bookmark""4.6.7.4Link type ""canonical""4.6.7.5Link type ""dns-prefetch""4.6.7.6Link type ""expect""4.6.7.7Link type ""external""4.6.7.8Link type ""help""4.6.7.9Link type ""icon""4.6.7.10Link type ""license""4.6.7.11Link type ""manifest""4.6.7.12Link type ""modulepreload""4.6.7.13Link type ""nofollow""4.6.7.14Link type ""noopener""4.6.7.15Link type ""noreferrer""4.6.7.16Link type ""opener""4.6.7.17Link type ""pingback""4.6.7.18Link type ""preconnect""4.6.7.19Link type ""prefetch""4.6.7.20Link type ""preload""4.6.7.21Link type ""privacy-policy""4.6.7.22Link type ""search""4.6.7.23Link type ""stylesheet""4.6.7.24Link type ""tag""4.6.7.25Link Type ""terms-of-service""4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev""4.6.7.27Other link types 4.6.7.1Link type ""alternate"" 4.6.7.2Link type ""author"" 4.6.7.3Link type ""bookmark"" 4.6.7.4Link type ""canonical"" 4.6.7.5Link type ""dns-prefetch"" 4.6.7.6Link type ""expect"" 4.6.7.7Link type ""external"" 4.6.7.8Link type ""help"" 4.6.7.9Link type ""icon"" 4.6.7.10Link type ""license"" 4.6.7.11Link type ""manifest"" 4.6.7.12Link type ""modulepreload"" 4.6.7.13Link type ""nofollow"" 4.6.7.14Link type ""noopener"" 4.6.7.15Link type ""noreferrer"" 4.6.7.16Link type ""opener"" 4.6.7.17Link type ""pingback"" 4.6.7.18Link type ""preconnect"" 4.6.7.19Link type ""prefetch"" 4.6.7.20Link type ""preload"" 4.6.7.21Link type ""privacy-policy"" 4.6.7.22Link type ""search"" 4.6.7.23Link type ""stylesheet"" 4.6.7.24Link type ""tag"" 4.6.7.25Link Type ""terms-of-service"" 4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev"" 4.6.7.26.1Link type ""next"" 4.6.7.26.2Link type ""prev"" 4.6.7.27Other link types 4.6.6.1The `Ping-From` and `Ping-To` headers 4.6.7.1Link type ""alternate"" 4.6.7.2Link type ""author"" 4.6.7.3Link type ""bookmark"" 4.6.7.4Link type ""canonical"" 4.6.7.5Link type ""dns-prefetch"" 4.6.7.6Link type ""expect"" 4.6.7.7Link type ""external"" 4.6.7.8Link type ""help"" 4.6.7.9Link type ""icon"" 4.6.7.10Link type ""license"" 4.6.7.11Link type ""manifest"" 4.6.7.12Link type ""modulepreload"" 4.6.7.13Link type ""nofollow"" 4.6.7.14Link type ""noopener"" 4.6.7.15Link type ""noreferrer"" 4.6.7.16Link type ""opener"" 4.6.7.17Link type ""pingback"" 4.6.7.18Link type ""preconnect"" 4.6.7.19Link type ""prefetch"" 4.6.7.20Link type ""preload"" 4.6.7.21Link type ""privacy-policy"" 4.6.7.22Link type ""search"" 4.6.7.23Link type ""stylesheet"" 4.6.7.24Link type ""tag"" 4.6.7.25Link Type ""terms-of-service"" 4.6.7.26Sequential link types4.6.7.26.1Link type ""next""4.6.7.26.2Link type ""prev"" 4.6.7.26.1Link type ""next"" 4.6.7.26.2Link type ""prev"" 4.6.7.27Other link types 4.6.7.26.1Link type ""next"" 4.6.7.26.2Link type ""prev"" 4.7.1Theinselement 4.7.2Thedelelement 4.7.3Attributes common toinsanddelelements 4.7.4Edits and paragraphs 4.7.5Edits and lists 4.7.6Edits and tables 4.8.1Thepictureelement 4.8.2Thesourceelement 4.8.3Theimgelement 4.8.4Images4.8.4.1Introduction4.8.4.1.1Adaptive images4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers 4.8.4.1Introduction4.8.4.1.1Adaptive images 4.8.4.1.1Adaptive images 4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes 4.8.4.2.1Srcset attributes 4.8.4.2.2Sizes attributes 4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes 4.8.4.3.1When to obtain images 4.8.4.3.2Reacting to DOM mutations 4.8.4.3.3The list of available images 4.8.4.3.4Decoding images 4.8.4.3.5Updating the image data 4.8.4.3.6Preparing an image for presentation 4.8.4.3.7Selecting an image source 4.8.4.3.8Creating a source set from attributes 4.8.4.3.9Updating the source set 4.8.4.3.10Parsing a srcset attribute 4.8.4.3.11Parsing a sizes attribute 4.8.4.3.12Normalizing the source densities 4.8.4.3.13Reacting to environment changes 4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers 4.8.4.4.1General guidelines 4.8.4.4.2A link or button containing nothing but the image 4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations 4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos 4.8.4.4.5Text that has been rendered to a graphic for typographical effect 4.8.4.4.6A graphical representation of some of the surrounding text 4.8.4.4.7Ancillary images 4.8.4.4.8A purely decorative image that doesn't add any information 4.8.4.4.9A group of images that form a single larger picture with no links 4.8.4.4.10A group of images that form a single larger picture with links 4.8.4.4.11A key part of the content 4.8.4.4.12An image not intended for the user 4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images 4.8.4.4.14Guidance for markup generators 4.8.4.4.15Guidance for conformance checkers 4.8.5Theiframeelement 4.8.6Theembedelement 4.8.7Theobjectelement 4.8.8Thevideoelement 4.8.9Theaudioelement 4.8.10Thetrackelement 4.8.11Media elements4.8.11.1Error codes4.8.11.2Location of the media resource4.8.11.3MIME types4.8.11.4Network states4.8.11.5Loading the media resource4.8.11.6Offsets into the media resource4.8.11.7Ready states4.8.11.8Playing the media resource4.8.11.9Seeking4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks4.8.11.12Identifying a track kind through a URL4.8.11.13User interface4.8.11.14Time ranges4.8.11.15TheTrackEventinterface4.8.11.16Events summary4.8.11.17Security and privacy considerations4.8.11.18Best practices for authors using media elements4.8.11.19Best practices for implementers of media elements 4.8.11.1Error codes 4.8.11.2Location of the media resource 4.8.11.3MIME types 4.8.11.4Network states 4.8.11.5Loading the media resource 4.8.11.6Offsets into the media resource 4.8.11.7Ready states 4.8.11.8Playing the media resource 4.8.11.9Seeking 4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.10.1AudioTrackListandVideoTrackListobjects 4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks 4.8.11.11.1Text track model 4.8.11.11.2Sourcing in-band text tracks 4.8.11.11.3Sourcing out-of-band text tracks 4.8.11.11.4Guidelines for exposing cues in various formats as text track cues 4.8.11.11.5Text track API 4.8.11.11.6Event handlers for objects of the text track APIs 4.8.11.11.7Best practices for metadata text tracks 4.8.11.12Identifying a track kind through a URL 4.8.11.13User interface 4.8.11.14Time ranges 4.8.11.15TheTrackEventinterface 4.8.11.16Events summary 4.8.11.17Security and privacy considerations 4.8.11.18Best practices for authors using media elements 4.8.11.19Best practices for implementers of media elements 4.8.12Themapelement 4.8.13Theareaelement 4.8.14Image maps4.8.14.1Authoring4.8.14.2Processing model 4.8.14.1Authoring 4.8.14.2Processing model 4.8.15MathML 4.8.16SVG 4.8.17Dimension attributes 4.8.4.1Introduction4.8.4.1.1Adaptive images 4.8.4.1.1Adaptive images 4.8.4.2Attributes common tosource,img, andlinkelements4.8.4.2.1Srcset attributes4.8.4.2.2Sizes attributes 4.8.4.2.1Srcset attributes 4.8.4.2.2Sizes attributes 4.8.4.3Processing model4.8.4.3.1When to obtain images4.8.4.3.2Reacting to DOM mutations4.8.4.3.3The list of available images4.8.4.3.4Decoding images4.8.4.3.5Updating the image data4.8.4.3.6Preparing an image for presentation4.8.4.3.7Selecting an image source4.8.4.3.8Creating a source set from attributes4.8.4.3.9Updating the source set4.8.4.3.10Parsing a srcset attribute4.8.4.3.11Parsing a sizes attribute4.8.4.3.12Normalizing the source densities4.8.4.3.13Reacting to environment changes 4.8.4.3.1When to obtain images 4.8.4.3.2Reacting to DOM mutations 4.8.4.3.3The list of available images 4.8.4.3.4Decoding images 4.8.4.3.5Updating the image data 4.8.4.3.6Preparing an image for presentation 4.8.4.3.7Selecting an image source 4.8.4.3.8Creating a source set from attributes 4.8.4.3.9Updating the source set 4.8.4.3.10Parsing a srcset attribute 4.8.4.3.11Parsing a sizes attribute 4.8.4.3.12Normalizing the source densities 4.8.4.3.13Reacting to environment changes 4.8.4.4Requirements for providing text to act as an alternative for images4.8.4.4.1General guidelines4.8.4.4.2A link or button containing nothing but the image4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos4.8.4.4.5Text that has been rendered to a graphic for typographical effect4.8.4.4.6A graphical representation of some of the surrounding text4.8.4.4.7Ancillary images4.8.4.4.8A purely decorative image that doesn't add any information4.8.4.4.9A group of images that form a single larger picture with no links4.8.4.4.10A group of images that form a single larger picture with links4.8.4.4.11A key part of the content4.8.4.4.12An image not intended for the user4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images4.8.4.4.14Guidance for markup generators4.8.4.4.15Guidance for conformance checkers 4.8.4.4.1General guidelines 4.8.4.4.2A link or button containing nothing but the image 4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations 4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos 4.8.4.4.5Text that has been rendered to a graphic for typographical effect 4.8.4.4.6A graphical representation of some of the surrounding text 4.8.4.4.7Ancillary images 4.8.4.4.8A purely decorative image that doesn't add any information 4.8.4.4.9A group of images that form a single larger picture with no links 4.8.4.4.10A group of images that form a single larger picture with links 4.8.4.4.11A key part of the content 4.8.4.4.12An image not intended for the user 4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images 4.8.4.4.14Guidance for markup generators 4.8.4.4.15Guidance for conformance checkers 4.8.4.1.1Adaptive images 4.8.4.2.1Srcset attributes 4.8.4.2.2Sizes attributes 4.8.4.3.1When to obtain images 4.8.4.3.2Reacting to DOM mutations 4.8.4.3.3The list of available images 4.8.4.3.4Decoding images 4.8.4.3.5Updating the image data 4.8.4.3.6Preparing an image for presentation 4.8.4.3.7Selecting an image source 4.8.4.3.8Creating a source set from attributes 4.8.4.3.9Updating the source set 4.8.4.3.10Parsing a srcset attribute 4.8.4.3.11Parsing a sizes attribute 4.8.4.3.12Normalizing the source densities 4.8.4.3.13Reacting to environment changes 4.8.4.4.1General guidelines 4.8.4.4.2A link or button containing nothing but the image 4.8.4.4.3A phrase or paragraph with an alternative graphical representation: charts, diagrams, graphs, maps, illustrations 4.8.4.4.4A short phrase or label with an alternative graphical representation: icons, logos 4.8.4.4.5Text that has been rendered to a graphic for typographical effect 4.8.4.4.6A graphical representation of some of the surrounding text 4.8.4.4.7Ancillary images 4.8.4.4.8A purely decorative image that doesn't add any information 4.8.4.4.9A group of images that form a single larger picture with no links 4.8.4.4.10A group of images that form a single larger picture with links 4.8.4.4.11A key part of the content 4.8.4.4.12An image not intended for the user 4.8.4.4.13An image in an email or private document intended for a specific person who is known to be able to view images 4.8.4.4.14Guidance for markup generators 4.8.4.4.15Guidance for conformance checkers 4.8.11.1Error codes 4.8.11.2Location of the media resource 4.8.11.3MIME types 4.8.11.4Network states 4.8.11.5Loading the media resource 4.8.11.6Offsets into the media resource 4.8.11.7Ready states 4.8.11.8Playing the media resource 4.8.11.9Seeking 4.8.11.10Media resources with multiple media tracks4.8.11.10.1AudioTrackListandVideoTrackListobjects4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.10.1AudioTrackListandVideoTrackListobjects 4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.11Timed text tracks4.8.11.11.1Text track model4.8.11.11.2Sourcing in-band text tracks4.8.11.11.3Sourcing out-of-band text tracks4.8.11.11.4Guidelines for exposing cues in various formats as text track cues4.8.11.11.5Text track API4.8.11.11.6Event handlers for objects of the text track APIs4.8.11.11.7Best practices for metadata text tracks 4.8.11.11.1Text track model 4.8.11.11.2Sourcing in-band text tracks 4.8.11.11.3Sourcing out-of-band text tracks 4.8.11.11.4Guidelines for exposing cues in various formats as text track cues 4.8.11.11.5Text track API 4.8.11.11.6Event handlers for objects of the text track APIs 4.8.11.11.7Best practices for metadata text tracks 4.8.11.12Identifying a track kind through a URL 4.8.11.13User interface 4.8.11.14Time ranges 4.8.11.15TheTrackEventinterface 4.8.11.16Events summary 4.8.11.17Security and privacy considerations 4.8.11.18Best practices for authors using media elements 4.8.11.19Best practices for implementers of media elements 4.8.11.10.1AudioTrackListandVideoTrackListobjects 4.8.11.10.2Selecting specific audio and video tracks declaratively 4.8.11.11.1Text track model 4.8.11.11.2Sourcing in-band text tracks 4.8.11.11.3Sourcing out-of-band text tracks 4.8.11.11.4Guidelines for exposing cues in various formats as text track cues 4.8.11.11.5Text track API 4.8.11.11.6Event handlers for objects of the text track APIs 4.8.11.11.7Best practices for metadata text tracks 4.8.14.1Authoring 4.8.14.2Processing model 4.9.1Thetableelement4.9.1.1Techniques for describing tables4.9.1.2Techniques for table design 4.9.1.1Techniques for describing tables 4.9.1.2Techniques for table design 4.9.2Thecaptionelement 4.9.3Thecolgroupelement 4.9.4Thecolelement 4.9.5Thetbodyelement 4.9.6Thetheadelement 4.9.7Thetfootelement 4.9.8Thetrelement 4.9.9Thetdelement 4.9.10Thethelement 4.9.11Attributes common totdandthelements 4.9.12Processing model4.9.12.1Forming a table4.9.12.2Forming relationships between data cells and header cells 4.9.12.1Forming a table 4.9.12.2Forming relationships between data cells and header cells 4.9.13Examples 4.9.1.1Techniques for describing tables 4.9.1.2Techniques for table design 4.9.12.1Forming a table 4.9.12.2Forming relationships between data cells and header cells 4.10.1Introduction4.10.1.1Writing a form's user interface4.10.1.2Implementing the server-side processing for a form4.10.1.3Configuring a form to communicate with a server4.10.1.4Client-side form validation4.10.1.5Enabling client-side automatic filling of form controls4.10.1.6Improving the user experience on mobile devices4.10.1.7The difference between the field type, the autofill field name, and the input modality4.10.1.8Date, time, and number formats 4.10.1.1Writing a form's user interface 4.10.1.2Implementing the server-side processing for a form 4.10.1.3Configuring a form to communicate with a server 4.10.1.4Client-side form validation 4.10.1.5Enabling client-side automatic filling of form controls 4.10.1.6Improving the user experience on mobile devices 4.10.1.7The difference between the field type, the autofill field name, and the input modality 4.10.1.8Date, time, and number formats 4.10.2Categories 4.10.3Theformelement 4.10.4Thelabelelement 4.10.5Theinputelement4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button)4.10.5.2Implementation notes regarding localization of form controls4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute4.10.5.4Commoninputelement APIs4.10.5.5Common event behaviors 4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button) 4.10.5.1.1Hidden state (type=hidden) 4.10.5.1.2Text (type=text) state and Search state (type=search) 4.10.5.1.3Telephone state (type=tel) 4.10.5.1.4URL state (type=url) 4.10.5.1.5Email state (type=email) 4.10.5.1.6Password state (type=password) 4.10.5.1.7Date state (type=date) 4.10.5.1.8Month state (type=month) 4.10.5.1.9Week state (type=week) 4.10.5.1.10Time state (type=time) 4.10.5.1.11Local Date and Time state (type=datetime-local) 4.10.5.1.12Number state (type=number) 4.10.5.1.13Range state (type=range) 4.10.5.1.14Color state (type=color) 4.10.5.1.15Checkbox state (type=checkbox) 4.10.5.1.16Radio Button state (type=radio) 4.10.5.1.17File Upload state (type=file) 4.10.5.1.18Submit Button state (type=submit) 4.10.5.1.19Image Button state (type=image) 4.10.5.1.20Reset Button state (type=reset) 4.10.5.1.21Button state (type=button) 4.10.5.2Implementation notes regarding localization of form controls 4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute 4.10.5.3.1Themaxlengthandminlengthattributes 4.10.5.3.2Thesizeattribute 4.10.5.3.3Thereadonlyattribute 4.10.5.3.4Therequiredattribute 4.10.5.3.5Themultipleattribute 4.10.5.3.6Thepatternattribute 4.10.5.3.7Theminandmaxattributes 4.10.5.3.8Thestepattribute 4.10.5.3.9Thelistattribute 4.10.5.3.10Theplaceholderattribute 4.10.5.4Commoninputelement APIs 4.10.5.5Common event behaviors 4.10.6Thebuttonelement 4.10.7Theselectelement 4.10.8Thedatalistelement 4.10.9Theoptgroupelement 4.10.10Theoptionelement 4.10.11Thetextareaelement 4.10.12Theoutputelement 4.10.13Theprogresselement 4.10.14Themeterelement 4.10.15Thefieldsetelement 4.10.16Thelegendelement 4.10.17Form control infrastructure4.10.17.1A form control's value4.10.17.2Mutability4.10.17.3Association of controls and forms 4.10.17.1A form control's value 4.10.17.2Mutability 4.10.17.3Association of controls and forms 4.10.18Attributes common to form controls4.10.18.1Naming form controls: thenameattribute4.10.18.2Submitting element directionality: thedirnameattribute4.10.18.3Limiting user input length: themaxlengthattribute4.10.18.4Setting minimum input length requirements: theminlengthattribute4.10.18.5Enabling and disabling form controls: thedisabledattribute4.10.18.6Form submission attributes4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model 4.10.18.1Naming form controls: thenameattribute 4.10.18.2Submitting element directionality: thedirnameattribute 4.10.18.3Limiting user input length: themaxlengthattribute 4.10.18.4Setting minimum input length requirements: theminlengthattribute 4.10.18.5Enabling and disabling form controls: thedisabledattribute 4.10.18.6Form submission attributes 4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model 4.10.18.7.1Autofilling form controls: theautocompleteattribute 4.10.18.7.2Processing model 4.10.19APIs for the text control selections 4.10.20Constraints4.10.20.1Definitions4.10.20.2Constraint validation4.10.20.3The constraint validation API4.10.20.4Security 4.10.20.1Definitions 4.10.20.2Constraint validation 4.10.20.3The constraint validation API 4.10.20.4Security 4.10.21Form submission4.10.21.1Introduction4.10.21.2Implicit submission4.10.21.3Form submission algorithm4.10.21.4Constructing the entry list4.10.21.5Selecting a form submission encoding4.10.21.6Converting an entry list to a list of name-value pairs4.10.21.7URL-encoded form data4.10.21.8Multipart form data4.10.21.9Plain text form data4.10.21.10TheSubmitEventinterface4.10.21.11TheFormDataEventinterface 4.10.21.1Introduction 4.10.21.2Implicit submission 4.10.21.3Form submission algorithm 4.10.21.4Constructing the entry list 4.10.21.5Selecting a form submission encoding 4.10.21.6Converting an entry list to a list of name-value pairs 4.10.21.7URL-encoded form data 4.10.21.8Multipart form data 4.10.21.9Plain text form data 4.10.21.10TheSubmitEventinterface 4.10.21.11TheFormDataEventinterface 4.10.22Resetting a form 4.10.1.1Writing a form's user interface 4.10.1.2Implementing the server-side processing for a form 4.10.1.3Configuring a form to communicate with a server 4.10.1.4Client-side form validation 4.10.1.5Enabling client-side automatic filling of form controls 4.10.1.6Improving the user experience on mobile devices 4.10.1.7The difference between the field type, the autofill field name, and the input modality 4.10.1.8Date, time, and number formats 4.10.5.1States of thetypeattribute4.10.5.1.1Hidden state (type=hidden)4.10.5.1.2Text (type=text) state and Search state (type=search)4.10.5.1.3Telephone state (type=tel)4.10.5.1.4URL state (type=url)4.10.5.1.5Email state (type=email)4.10.5.1.6Password state (type=password)4.10.5.1.7Date state (type=date)4.10.5.1.8Month state (type=month)4.10.5.1.9Week state (type=week)4.10.5.1.10Time state (type=time)4.10.5.1.11Local Date and Time state (type=datetime-local)4.10.5.1.12Number state (type=number)4.10.5.1.13Range state (type=range)4.10.5.1.14Color state (type=color)4.10.5.1.15Checkbox state (type=checkbox)4.10.5.1.16Radio Button state (type=radio)4.10.5.1.17File Upload state (type=file)4.10.5.1.18Submit Button state (type=submit)4.10.5.1.19Image Button state (type=image)4.10.5.1.20Reset Button state (type=reset)4.10.5.1.21Button state (type=button) 4.10.5.1.1Hidden state (type=hidden) 4.10.5.1.2Text (type=text) state and Search state (type=search) 4.10.5.1.3Telephone state (type=tel) 4.10.5.1.4URL state (type=url) 4.10.5.1.5Email state (type=email) 4.10.5.1.6Password state (type=password) 4.10.5.1.7Date state (type=date) 4.10.5.1.8Month state (type=month) 4.10.5.1.9Week state (type=week) 4.10.5.1.10Time state (type=time) 4.10.5.1.11Local Date and Time state (type=datetime-local) 4.10.5.1.12Number state (type=number) 4.10.5.1.13Range state (type=range) 4.10.5.1.14Color state (type=color) 4.10.5.1.15Checkbox state (type=checkbox) 4.10.5.1.16Radio Button state (type=radio) 4.10.5.1.17File Upload state (type=file) 4.10.5.1.18Submit Button state (type=submit) 4.10.5.1.19Image Button state (type=image) 4.10.5.1.20Reset Button state (type=reset) 4.10.5.1.21Button state (type=button) 4.10.5.2Implementation notes regarding localization of form controls 4.10.5.3Commoninputelement attributes4.10.5.3.1Themaxlengthandminlengthattributes4.10.5.3.2Thesizeattribute4.10.5.3.3Thereadonlyattribute4.10.5.3.4Therequiredattribute4.10.5.3.5Themultipleattribute4.10.5.3.6Thepatternattribute4.10.5.3.7Theminandmaxattributes4.10.5.3.8Thestepattribute4.10.5.3.9Thelistattribute4.10.5.3.10Theplaceholderattribute 4.10.5.3.1Themaxlengthandminlengthattributes 4.10.5.3.2Thesizeattribute 4.10.5.3.3Thereadonlyattribute 4.10.5.3.4Therequiredattribute 4.10.5.3.5Themultipleattribute 4.10.5.3.6Thepatternattribute 4.10.5.3.7Theminandmaxattributes 4.10.5.3.8Thestepattribute 4.10.5.3.9Thelistattribute 4.10.5.3.10Theplaceholderattribute 4.10.5.4Commoninputelement APIs 4.10.5.5Common event behaviors 4.10.5.1.1Hidden state (type=hidden) 4.10.5.1.2Text (type=text) state and Search state (type=search) 4.10.5.1.3Telephone state (type=tel) 4.10.5.1.4URL state (type=url) 4.10.5.1.5Email state (type=email) 4.10.5.1.6Password state (type=password) 4.10.5.1.7Date state (type=date) 4.10.5.1.8Month state (type=month) 4.10.5.1.9Week state (type=week) 4.10.5.1.10Time state (type=time) 4.10.5.1.11Local Date and Time state (type=datetime-local) 4.10.5.1.12Number state (type=number) 4.10.5.1.13Range state (type=range) 4.10.5.1.14Color state (type=color) 4.10.5.1.15Checkbox state (type=checkbox) 4.10.5.1.16Radio Button state (type=radio) 4.10.5.1.17File Upload state (type=file) 4.10.5.1.18Submit Button state (type=submit) 4.10.5.1.19Image Button state (type=image) 4.10.5.1.20Reset Button state (type=reset) 4.10.5.1.21Button state (type=button) 4.10.5.3.1Themaxlengthandminlengthattributes 4.10.5.3.2Thesizeattribute 4.10.5.3.3Thereadonlyattribute 4.10.5.3.4Therequiredattribute 4.10.5.3.5Themultipleattribute 4.10.5.3.6Thepatternattribute 4.10.5.3.7Theminandmaxattributes 4.10.5.3.8Thestepattribute 4.10.5.3.9Thelistattribute 4.10.5.3.10Theplaceholderattribute 4.10.17.1A form control's value 4.10.17.2Mutability 4.10.17.3Association of controls and forms 4.10.18.1Naming form controls: thenameattribute 4.10.18.2Submitting element directionality: thedirnameattribute 4.10.18.3Limiting user input length: themaxlengthattribute 4.10.18.4Setting minimum input length requirements: theminlengthattribute 4.10.18.5Enabling and disabling form controls: thedisabledattribute 4.10.18.6Form submission attributes 4.10.18.7Autofill4.10.18.7.1Autofilling form controls: theautocompleteattribute4.10.18.7.2Processing model 4.10.18.7.1Autofilling form controls: theautocompleteattribute 4.10.18.7.2Processing model 4.10.18.7.1Autofilling form controls: theautocompleteattribute 4.10.18.7.2Processing model 4.10.20.1Definitions 4.10.20.2Constraint validation 4.10.20.3The constraint validation API 4.10.20.4Security 4.10.21.1Introduction 4.10.21.2Implicit submission 4.10.21.3Form submission algorithm 4.10.21.4Constructing the entry list 4.10.21.5Selecting a form submission encoding 4.10.21.6Converting an entry list to a list of name-value pairs 4.10.21.7URL-encoded form data 4.10.21.8Multipart form data 4.10.21.9Plain text form data 4.10.21.10TheSubmitEventinterface 4.10.21.11TheFormDataEventinterface 4.11.1Thedetailselement 4.11.2Thesummaryelement 4.11.3Commands4.11.3.1Facets4.11.3.2Using theaelement to define a command4.11.3.3Using thebuttonelement to define a command4.11.3.4Using theinputelement to define a command4.11.3.5Using theoptionelement to define a command4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command4.11.3.7Using theaccesskeyattribute to define a command on other elements 4.11.3.1Facets 4.11.3.2Using theaelement to define a command 4.11.3.3Using thebuttonelement to define a command 4.11.3.4Using theinputelement to define a command 4.11.3.5Using theoptionelement to define a command 4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command 4.11.3.7Using theaccesskeyattribute to define a command on other elements 4.11.4Thedialogelement 4.11.3.1Facets 4.11.3.2Using theaelement to define a command 4.11.3.3Using thebuttonelement to define a command 4.11.3.4Using theinputelement to define a command 4.11.3.5Using theoptionelement to define a command 4.11.3.6Using theaccesskeyattribute
  on alegendelement to define a command 4.11.3.7Using theaccesskeyattribute to define a command on other elements 4.12.1Thescriptelement4.12.1.1Processing model4.12.1.2Scripting languages4.12.1.3Restrictions for contents ofscriptelements4.12.1.4Inline documentation for external scripts4.12.1.5Interaction ofscriptelements and XSLT 4.12.1.1Processing model 4.12.1.2Scripting languages 4.12.1.3Restrictions for contents ofscriptelements 4.12.1.4Inline documentation for external scripts 4.12.1.5Interaction ofscriptelements and XSLT 4.12.2Thenoscriptelement 4.12.3Thetemplateelement4.12.3.1Interaction oftemplateelements with XSLT and XPath 4.12.3.1Interaction oftemplateelements with XSLT and XPath 4.12.4Theslotelement 4.12.5Thecanvaselement4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context4.12.5.4Color spaces and color space
  conversion4.12.5.5Serializing bitmaps to a file4.12.5.6Security withcanvaselements4.12.5.7Premultiplied alpha and the 2D rendering context 4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples 4.12.5.1.1Implementation notes 4.12.5.1.2The canvas state 4.12.5.1.3Line styles 4.12.5.1.4Text styles 4.12.5.1.5Building paths 4.12.5.1.6Path2Dobjects 4.12.5.1.7Transformations 4.12.5.1.8Image sources for 2D rendering contexts 4.12.5.1.9Fill and stroke styles 4.12.5.1.10Drawing rectangles to the bitmap 4.12.5.1.11Drawing text to the bitmap 4.12.5.1.12Drawing paths to the canvas 4.12.5.1.13Drawing focus rings 4.12.5.1.14Drawing images 4.12.5.1.15Pixel manipulation 4.12.5.1.16Compositing 4.12.5.1.17Image smoothing 4.12.5.1.18Shadows 4.12.5.1.19Filters 4.12.5.1.20Working with externally-defined SVG filters 4.12.5.1.21Drawing model 4.12.5.1.22Best practices 4.12.5.1.23Examples 4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.2.1Introduction 4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context 4.12.5.3.1The offscreen 2D rendering context 4.12.5.4Color spaces and color space
  conversion 4.12.5.5Serializing bitmaps to a file 4.12.5.6Security withcanvaselements 4.12.5.7Premultiplied alpha and the 2D rendering context 4.12.1.1Processing model 4.12.1.2Scripting languages 4.12.1.3Restrictions for contents ofscriptelements 4.12.1.4Inline documentation for external scripts 4.12.1.5Interaction ofscriptelements and XSLT 4.12.3.1Interaction oftemplateelements with XSLT and XPath 4.12.5.1The 2D rendering context4.12.5.1.1Implementation notes4.12.5.1.2The canvas state4.12.5.1.3Line styles4.12.5.1.4Text styles4.12.5.1.5Building paths4.12.5.1.6Path2Dobjects4.12.5.1.7Transformations4.12.5.1.8Image sources for 2D rendering contexts4.12.5.1.9Fill and stroke styles4.12.5.1.10Drawing rectangles to the bitmap4.12.5.1.11Drawing text to the bitmap4.12.5.1.12Drawing paths to the canvas4.12.5.1.13Drawing focus rings4.12.5.1.14Drawing images4.12.5.1.15Pixel manipulation4.12.5.1.16Compositing4.12.5.1.17Image smoothing4.12.5.1.18Shadows4.12.5.1.19Filters4.12.5.1.20Working with externally-defined SVG filters4.12.5.1.21Drawing model4.12.5.1.22Best practices4.12.5.1.23Examples 4.12.5.1.1Implementation notes 4.12.5.1.2The canvas state 4.12.5.1.3Line styles 4.12.5.1.4Text styles 4.12.5.1.5Building paths 4.12.5.1.6Path2Dobjects 4.12.5.1.7Transformations 4.12.5.1.8Image sources for 2D rendering contexts 4.12.5.1.9Fill and stroke styles 4.12.5.1.10Drawing rectangles to the bitmap 4.12.5.1.11Drawing text to the bitmap 4.12.5.1.12Drawing paths to the canvas 4.12.5.1.13Drawing focus rings 4.12.5.1.14Drawing images 4.12.5.1.15Pixel manipulation 4.12.5.1.16Compositing 4.12.5.1.17Image smoothing 4.12.5.1.18Shadows 4.12.5.1.19Filters 4.12.5.1.20Working with externally-defined SVG filters 4.12.5.1.21Drawing model 4.12.5.1.22Best practices 4.12.5.1.23Examples 4.12.5.2TheImageBitmaprendering context4.12.5.2.1Introduction4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.2.1Introduction 4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.3TheOffscreenCanvasinterface4.12.5.3.1The offscreen 2D rendering context 4.12.5.3.1The offscreen 2D rendering context 4.12.5.4Color spaces and color space
  conversion 4.12.5.5Serializing bitmaps to a file 4.12.5.6Security withcanvaselements 4.12.5.7Premultiplied alpha and the 2D rendering context 4.12.5.1.1Implementation notes 4.12.5.1.2The canvas state 4.12.5.1.3Line styles 4.12.5.1.4Text styles 4.12.5.1.5Building paths 4.12.5.1.6Path2Dobjects 4.12.5.1.7Transformations 4.12.5.1.8Image sources for 2D rendering contexts 4.12.5.1.9Fill and stroke styles 4.12.5.1.10Drawing rectangles to the bitmap 4.12.5.1.11Drawing text to the bitmap 4.12.5.1.12Drawing paths to the canvas 4.12.5.1.13Drawing focus rings 4.12.5.1.14Drawing images 4.12.5.1.15Pixel manipulation 4.12.5.1.16Compositing 4.12.5.1.17Image smoothing 4.12.5.1.18Shadows 4.12.5.1.19Filters 4.12.5.1.20Working with externally-defined SVG filters 4.12.5.1.21Drawing model 4.12.5.1.22Best practices 4.12.5.1.23Examples 4.12.5.2.1Introduction 4.12.5.2.2TheImageBitmapRenderingContextinterface 4.12.5.3.1The offscreen 2D rendering context 4.13.1Introduction4.13.1.1Creating an autonomous custom element4.13.1.2Creating a form-associated custom element4.13.1.3Creating a custom element with default accessible roles, states, and properties4.13.1.4Creating a customized built-in element4.13.1.5Drawbacks of autonomous custom elements4.13.1.6Upgrading elements after their creation4.13.1.7Exposing custom element states 4.13.1.1Creating an autonomous custom element 4.13.1.2Creating a form-associated custom element 4.13.1.3Creating a custom element with default accessible roles, states, and properties 4.13.1.4Creating a customized built-in element 4.13.1.5Drawbacks of autonomous custom elements 4.13.1.6Upgrading elements after their creation 4.13.1.7Exposing custom element states 4.13.2Requirements for custom element constructors and
  reactions 4.13.3Core concepts 4.13.4TheCustomElementRegistryinterface 4.13.5Upgrades 4.13.6Custom element reactions 4.13.7Element internals4.13.7.1TheElementInternalsinterface4.13.7.2Shadow root access4.13.7.3Form-associated custom elements4.13.7.4Accessibility semantics4.13.7.5Custom state pseudo-class 4.13.7.1TheElementInternalsinterface 4.13.7.2Shadow root access 4.13.7.3Form-associated custom elements 4.13.7.4Accessibility semantics 4.13.7.5Custom state pseudo-class 4.13.1.1Creating an autonomous custom element 4.13.1.2Creating a form-associated custom element 4.13.1.3Creating a custom element with default accessible roles, states, and properties 4.13.1.4Creating a customized built-in element 4.13.1.5Drawbacks of autonomous custom elements 4.13.1.6Upgrading elements after their creation 4.13.1.7Exposing custom element states 4.13.7.1TheElementInternalsinterface 4.13.7.2Shadow root access 4.13.7.3Form-associated custom elements 4.13.7.4Accessibility semantics 4.13.7.5Custom state pseudo-class 4.14.1Breadcrumb navigation 4.14.2Tag clouds 4.14.3Conversations 4.14.4Footnotes 4.16.1Case-sensitivity of the CSS 'attr()' function 4.16.2Case-sensitivity of selectors 4.16.3Pseudo-classes 5.1Introduction5.1.1Overview5.1.2The basic syntax5.1.3Typed items5.1.4Global identifiers for items5.1.5Selecting names when defining vocabularies 5.1.1Overview 5.1.2The basic syntax 5.1.3Typed items 5.1.4Global identifiers for items 5.1.5Selecting names when defining vocabularies 5.2Encoding microdata5.2.1The microdata model5.2.2Items5.2.3Names: theitempropattribute5.2.4Values5.2.5Associating names with items5.2.6Microdata and other namespaces 5.2.1The microdata model 5.2.2Items 5.2.3Names: theitempropattribute 5.2.4Values 5.2.5Associating names with items 5.2.6Microdata and other namespaces 5.3Sample microdata vocabularies5.3.1vCard5.3.1.1Conversion to vCard5.3.1.2Examples5.3.2vEvent5.3.2.1Conversion to iCalendar5.3.2.2Examples5.3.3Licensing works5.3.3.1Examples 5.3.1vCard5.3.1.1Conversion to vCard5.3.1.2Examples 5.3.1.1Conversion to vCard 5.3.1.2Examples 5.3.2vEvent5.3.2.1Conversion to iCalendar5.3.2.2Examples 5.3.2.1Conversion to iCalendar 5.3.2.2Examples 5.3.3Licensing works5.3.3.1Examples 5.3.3.1Examples 5.4Converting HTML to other formats5.4.1JSON 5.4.1JSON 5.1.1Overview 5.1.2The basic syntax 5.1.3Typed items 5.1.4Global identifiers for items 5.1.5Selecting names when defining vocabularies 5.2.1The microdata model 5.2.2Items 5.2.3Names: theitempropattribute 5.2.4Values 5.2.5Associating names with items 5.2.6Microdata and other namespaces 5.3.1vCard5.3.1.1Conversion to vCard5.3.1.2Examples 5.3.1.1Conversion to vCard 5.3.1.2Examples 5.3.2vEvent5.3.2.1Conversion to iCalendar5.3.2.2Examples 5.3.2.1Conversion to iCalendar 5.3.2.2Examples 5.3.3Licensing works5.3.3.1Examples 5.3.3.1Examples 5.3.1.1Conversion to vCard 5.3.1.2Examples 5.3.2.1Conversion to iCalendar 5.3.2.2Examples 5.3.3.1Examples 5.4.1JSON 6.1Thehiddenattribute 6.2Page visibility6.2.1TheVisibilityStateEntryinterface 6.2.1TheVisibilityStateEntryinterface 6.3Inert subtrees6.3.1Modal dialogs and inert subtrees6.3.2Theinertattribute 6.3.1Modal dialogs and inert subtrees 6.3.2Theinertattribute 6.4Tracking user activation6.4.1Data model6.4.2Processing model6.4.3APIs gated by user activation6.4.4TheUserActivationinterface6.4.5User agent automation 6.4.1Data model 6.4.2Processing model 6.4.3APIs gated by user activation 6.4.4TheUserActivationinterface 6.4.5User agent automation 6.5Activation behavior of elements6.5.1TheToggleEventinterface 6.5.1TheToggleEventinterface 6.6Focus6.6.1Introduction6.6.2Data model6.6.3Thetabindexattribute6.6.4Processing model6.6.5Sequential focus navigation6.6.6Focus management APIs6.6.7Theautofocusattribute 6.6.1Introduction 6.6.2Data model 6.6.3Thetabindexattribute 6.6.4Processing model 6.6.5Sequential focus navigation 6.6.6Focus management APIs 6.6.7Theautofocusattribute 6.7Assigning keyboard shortcuts6.7.1Introduction6.7.2Theaccesskeyattribute6.7.3Processing
  model 6.7.1Introduction 6.7.2Theaccesskeyattribute 6.7.3Processing
  model 6.8Editing6.8.1Making document regions editable: Thecontenteditablecontent attribute6.8.2Making entire documents
  editable: thedesignModegetter and setter6.8.3Best practices for in-page editors6.8.4Editing APIs6.8.5Spelling and grammar checking6.8.6Writing suggestions6.8.7Autocapitalization6.8.8Autocorrection6.8.9Input modalities: theinputmodeattribute6.8.10Input modalities: theenterkeyhintattribute 6.8.1Making document regions editable: Thecontenteditablecontent attribute 6.8.2Making entire documents
  editable: thedesignModegetter and setter 6.8.3Best practices for in-page editors 6.8.4Editing APIs 6.8.5Spelling and grammar checking 6.8.6Writing suggestions 6.8.7Autocapitalization 6.8.8Autocorrection 6.8.9Input modalities: theinputmodeattribute 6.8.10Input modalities: theenterkeyhintattribute 6.9Find-in-page6.9.1Introduction6.9.2Interaction withdetailsandhidden=until-found6.9.3Interaction with selection 6.9.1Introduction 6.9.2Interaction withdetailsandhidden=until-found 6.9.3Interaction with selection 6.10Close requests and close watchers6.10.1Close requests6.10.2Close watcher infrastructure6.10.3TheCloseWatcherinterface 6.10.1Close requests 6.10.2Close watcher infrastructure 6.10.3TheCloseWatcherinterface 6.11Drag and drop6.11.1Introduction6.11.2The drag data store6.11.3TheDataTransferinterface6.11.3.1TheDataTransferItemListinterface6.11.3.2TheDataTransferIteminterface6.11.4TheDragEventinterface6.11.5Processing model6.11.6Events summary6.11.7Thedraggableattribute6.11.8Security risks in the drag-and-drop model 6.11.1Introduction 6.11.2The drag data store 6.11.3TheDataTransferinterface6.11.3.1TheDataTransferItemListinterface6.11.3.2TheDataTransferIteminterface 6.11.3.1TheDataTransferItemListinterface 6.11.3.2TheDataTransferIteminterface 6.11.4TheDragEventinterface 6.11.5Processing model 6.11.6Events summary 6.11.7Thedraggableattribute 6.11.8Security risks in the drag-and-drop model 6.12Thepopoverattribute6.12.1The popover target attributes6.12.2Popover light dismiss 6.12.1The popover target attributes 6.12.2Popover light dismiss 6.2.1TheVisibilityStateEntryinterface 6.3.1Modal dialogs and inert subtrees 6.3.2Theinertattribute 6.4.1Data model 6.4.2Processing model 6.4.3APIs gated by user activation 6.4.4TheUserActivationinterface 6.4.5User agent automation 6.5.1TheToggleEventinterface 6.6.1Introduction 6.6.2Data model 6.6.3Thetabindexattribute 6.6.4Processing model 6.6.5Sequential focus navigation 6.6.6Focus management APIs 6.6.7Theautofocusattribute 6.7.1Introduction 6.7.2Theaccesskeyattribute 6.7.3Processing
  model 6.8.1Making document regions editable: Thecontenteditablecontent attribute 6.8.2Making entire documents
  editable: thedesignModegetter and setter 6.8.3Best practices for in-page editors 6.8.4Editing APIs 6.8.5Spelling and grammar checking 6.8.6Writing suggestions 6.8.7Autocapitalization 6.8.8Autocorrection 6.8.9Input modalities: theinputmodeattribute 6.8.10Input modalities: theenterkeyhintattribute 6.9.1Introduction 6.9.2Interaction withdetailsandhidden=until-found 6.9.3Interaction with selection 6.10.1Close requests 6.10.2Close watcher infrastructure 6.10.3TheCloseWatcherinterface 6.11.1Introduction 6.11.2The drag data store 6.11.3TheDataTransferinterface6.11.3.1TheDataTransferItemListinterface6.11.3.2TheDataTransferIteminterface 6.11.3.1TheDataTransferItemListinterface 6.11.3.2TheDataTransferIteminterface 6.11.4TheDragEventinterface 6.11.5Processing model 6.11.6Events summary 6.11.7Thedraggableattribute 6.11.8Security risks in the drag-and-drop model 6.11.3.1TheDataTransferItemListinterface 6.11.3.2TheDataTransferIteminterface 6.12.1The popover target attributes 6.12.2Popover light dismiss 7.1Supporting concepts7.1.1Origins7.1.1.1Sites7.1.1.2Relaxing the same-origin restriction7.1.2Origin-keyed agent clusters7.1.3Cross-origin opener policies7.1.3.1The headers7.1.3.2Browsing context group
  switches due to opener policy7.1.3.3Reporting7.1.4Cross-origin embedder policies7.1.4.1The headers7.1.4.2Embedder policy checks7.1.5Sandboxing7.1.6Policy containers 7.1.1Origins7.1.1.1Sites7.1.1.2Relaxing the same-origin restriction 7.1.1.1Sites 7.1.1.2Relaxing the same-origin restriction 7.1.2Origin-keyed agent clusters 7.1.3Cross-origin opener policies7.1.3.1The headers7.1.3.2Browsing context group
  switches due to opener policy7.1.3.3Reporting 7.1.3.1The headers 7.1.3.2Browsing context group
  switches due to opener policy 7.1.3.3Reporting 7.1.4Cross-origin embedder policies7.1.4.1The headers7.1.4.2Embedder policy checks 7.1.4.1The headers 7.1.4.2Embedder policy checks 7.1.5Sandboxing 7.1.6Policy containers 7.2APIs related to navigation and
  session history7.2.1Security infrastructure forWindow,WindowProxy, andLocationobjects7.2.1.1Integration with IDL7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]]7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O)7.2.2TheWindowobject7.2.2.1Opening and closing windows7.2.2.2Indexed access on theWindowobject7.2.2.3Named access on theWindowobject7.2.2.4Accessing related windows7.2.2.5Historical browser interface element APIs7.2.2.6Script settings forWindowobjects7.2.3TheWindowProxyexotic object7.2.3.1[[GetPrototypeOf]] ( )7.2.3.2[[SetPrototypeOf]] (V)7.2.3.3[[IsExtensible]] ( )7.2.3.4[[PreventExtensions]] ( )7.2.3.5[[GetOwnProperty]] (P)7.2.3.6[[DefineOwnProperty]] (P,Desc)7.2.3.7[[Get]] (P,Receiver)7.2.3.8[[Set]] (P,V,Receiver)7.2.3.9[[Delete]] (P)7.2.3.10[[OwnPropertyKeys]] ( )7.2.4TheLocationinterface7.2.4.1[[GetPrototypeOf]] ( )7.2.4.2[[SetPrototypeOf]] (V)7.2.4.3[[IsExtensible]] ( )7.2.4.4[[PreventExtensions]] ( )7.2.4.5[[GetOwnProperty]] (P)7.2.4.6[[DefineOwnProperty]] (P,Desc)7.2.4.7[[Get]] (P,Receiver)7.2.4.8[[Set]] (P,V,Receiver)7.2.4.9[[Delete]] (P)7.2.4.10[[OwnPropertyKeys]] ( )7.2.5TheHistoryinterface7.2.6The navigation API7.2.6.1Introduction7.2.6.2TheNavigationinterface7.2.6.3Core infrastructure7.2.6.4Initializing and updating the entry list7.2.6.5TheNavigationHistoryEntryinterface7.2.6.6The history entry list7.2.6.7Initiating navigations7.2.6.8Ongoing navigation tracking7.2.6.9TheNavigationActivationinterface7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior7.2.7Event interfaces7.2.7.1TheNavigationCurrentEntryChangeEventinterface7.2.7.2ThePopStateEventinterface7.2.7.3TheHashChangeEventinterface7.2.7.4ThePageSwapEventinterface7.2.7.5ThePageRevealEventinterface7.2.7.6ThePageTransitionEventinterface7.2.7.7TheBeforeUnloadEventinterface7.2.8TheNotRestoredReasonsinterface 7.2.1Security infrastructure forWindow,WindowProxy, andLocationobjects7.2.1.1Integration with IDL7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]]7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.1.1Integration with IDL 7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]] 7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.1.3.1CrossOriginProperties (O) 7.2.1.3.2CrossOriginPropertyFallback (P) 7.2.1.3.3IsPlatformObjectSameOrigin (O) 7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P) 7.2.1.3.5CrossOriginGet (O,P,Receiver) 7.2.1.3.6CrossOriginSet (O,P,V,Receiver) 7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.2TheWindowobject7.2.2.1Opening and closing windows7.2.2.2Indexed access on theWindowobject7.2.2.3Named access on theWindowobject7.2.2.4Accessing related windows7.2.2.5Historical browser interface element APIs7.2.2.6Script settings forWindowobjects 7.2.2.1Opening and closing windows 7.2.2.2Indexed access on theWindowobject 7.2.2.3Named access on theWindowobject 7.2.2.4Accessing related windows 7.2.2.5Historical browser interface element APIs 7.2.2.6Script settings forWindowobjects 7.2.3TheWindowProxyexotic object7.2.3.1[[GetPrototypeOf]] ( )7.2.3.2[[SetPrototypeOf]] (V)7.2.3.3[[IsExtensible]] ( )7.2.3.4[[PreventExtensions]] ( )7.2.3.5[[GetOwnProperty]] (P)7.2.3.6[[DefineOwnProperty]] (P,Desc)7.2.3.7[[Get]] (P,Receiver)7.2.3.8[[Set]] (P,V,Receiver)7.2.3.9[[Delete]] (P)7.2.3.10[[OwnPropertyKeys]] ( ) 7.2.3.1[[GetPrototypeOf]] ( ) 7.2.3.2[[SetPrototypeOf]] (V) 7.2.3.3[[IsExtensible]] ( ) 7.2.3.4[[PreventExtensions]] ( ) 7.2.3.5[[GetOwnProperty]] (P) 7.2.3.6[[DefineOwnProperty]] (P,Desc) 7.2.3.7[[Get]] (P,Receiver) 7.2.3.8[[Set]] (P,V,Receiver) 7.2.3.9[[Delete]] (P) 7.2.3.10[[OwnPropertyKeys]] ( ) 7.2.4TheLocationinterface7.2.4.1[[GetPrototypeOf]] ( )7.2.4.2[[SetPrototypeOf]] (V)7.2.4.3[[IsExtensible]] ( )7.2.4.4[[PreventExtensions]] ( )7.2.4.5[[GetOwnProperty]] (P)7.2.4.6[[DefineOwnProperty]] (P,Desc)7.2.4.7[[Get]] (P,Receiver)7.2.4.8[[Set]] (P,V,Receiver)7.2.4.9[[Delete]] (P)7.2.4.10[[OwnPropertyKeys]] ( ) 7.2.4.1[[GetPrototypeOf]] ( ) 7.2.4.2[[SetPrototypeOf]] (V) 7.2.4.3[[IsExtensible]] ( ) 7.2.4.4[[PreventExtensions]] ( ) 7.2.4.5[[GetOwnProperty]] (P) 7.2.4.6[[DefineOwnProperty]] (P,Desc) 7.2.4.7[[Get]] (P,Receiver) 7.2.4.8[[Set]] (P,V,Receiver) 7.2.4.9[[Delete]] (P) 7.2.4.10[[OwnPropertyKeys]] ( ) 7.2.5TheHistoryinterface 7.2.6The navigation API7.2.6.1Introduction7.2.6.2TheNavigationinterface7.2.6.3Core infrastructure7.2.6.4Initializing and updating the entry list7.2.6.5TheNavigationHistoryEntryinterface7.2.6.6The history entry list7.2.6.7Initiating navigations7.2.6.8Ongoing navigation tracking7.2.6.9TheNavigationActivationinterface7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior 7.2.6.1Introduction 7.2.6.2TheNavigationinterface 7.2.6.3Core infrastructure 7.2.6.4Initializing and updating the entry list 7.2.6.5TheNavigationHistoryEntryinterface 7.2.6.6The history entry list 7.2.6.7Initiating navigations 7.2.6.8Ongoing navigation tracking 7.2.6.9TheNavigationActivationinterface 7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior 7.2.6.10.1TheNavigateEventinterface 7.2.6.10.2TheNavigationDestinationinterface 7.2.6.10.3Firing the event 7.2.6.10.4Scroll and focus behavior 7.2.7Event interfaces7.2.7.1TheNavigationCurrentEntryChangeEventinterface7.2.7.2ThePopStateEventinterface7.2.7.3TheHashChangeEventinterface7.2.7.4ThePageSwapEventinterface7.2.7.5ThePageRevealEventinterface7.2.7.6ThePageTransitionEventinterface7.2.7.7TheBeforeUnloadEventinterface 7.2.7.1TheNavigationCurrentEntryChangeEventinterface 7.2.7.2ThePopStateEventinterface 7.2.7.3TheHashChangeEventinterface 7.2.7.4ThePageSwapEventinterface 7.2.7.5ThePageRevealEventinterface 7.2.7.6ThePageTransitionEventinterface 7.2.7.7TheBeforeUnloadEventinterface 7.2.8TheNotRestoredReasonsinterface 7.3Infrastructure for sequences of documents7.3.1Navigables7.3.1.1Traversable navigables7.3.1.2Top-level traversables7.3.1.3Child navigables7.3.1.4Jake diagrams7.3.1.5Related navigable collections7.3.1.6Navigable destruction7.3.1.7Navigable target names7.3.2Browsing contexts7.3.2.1Creating browsing contexts7.3.2.2Related browsing contexts7.3.2.3Groupings of browsing contexts7.3.3Fully active documents 7.3.1Navigables7.3.1.1Traversable navigables7.3.1.2Top-level traversables7.3.1.3Child navigables7.3.1.4Jake diagrams7.3.1.5Related navigable collections7.3.1.6Navigable destruction7.3.1.7Navigable target names 7.3.1.1Traversable navigables 7.3.1.2Top-level traversables 7.3.1.3Child navigables 7.3.1.4Jake diagrams 7.3.1.5Related navigable collections 7.3.1.6Navigable destruction 7.3.1.7Navigable target names 7.3.2Browsing contexts7.3.2.1Creating browsing contexts7.3.2.2Related browsing contexts7.3.2.3Groupings of browsing contexts 7.3.2.1Creating browsing contexts 7.3.2.2Related browsing contexts 7.3.2.3Groupings of browsing contexts 7.3.3Fully active documents 7.4Navigation and session
  history7.4.1Session history7.4.1.1Session history entries7.4.1.2Document state7.4.1.3Centralized modifications of session history7.4.1.4Low-level operations on session history7.4.2Navigation7.4.2.1Supporting concepts7.4.2.2Beginning navigation7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software7.4.2.4Preventing navigation7.4.2.5Aborting navigation7.4.3Reloading and traversing7.4.4Non-fragment synchronous ""navigations""7.4.5Populating a session history entry7.4.6Applying the history step7.4.6.1Updating the traversable7.4.6.2Updating the document7.4.6.3Revealing the document7.4.6.4Scrolling to a fragment7.4.6.5Persisted history entry state 7.4.1Session history7.4.1.1Session history entries7.4.1.2Document state7.4.1.3Centralized modifications of session history7.4.1.4Low-level operations on session history 7.4.1.1Session history entries 7.4.1.2Document state 7.4.1.3Centralized modifications of session history 7.4.1.4Low-level operations on session history 7.4.2Navigation7.4.2.1Supporting concepts7.4.2.2Beginning navigation7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software7.4.2.4Preventing navigation7.4.2.5Aborting navigation 7.4.2.1Supporting concepts 7.4.2.2Beginning navigation 7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software 7.4.2.3.1The usual cross-document navigation case 7.4.2.3.2Thejavascript:URL special case 7.4.2.3.3Fragment navigations 7.4.2.3.4Non-fetch schemes and external software 7.4.2.4Preventing navigation 7.4.2.5Aborting navigation 7.4.3Reloading and traversing 7.4.4Non-fragment synchronous ""navigations"" 7.4.5Populating a session history entry 7.4.6Applying the history step7.4.6.1Updating the traversable7.4.6.2Updating the document7.4.6.3Revealing the document7.4.6.4Scrolling to a fragment7.4.6.5Persisted history entry state 7.4.6.1Updating the traversable 7.4.6.2Updating the document 7.4.6.3Revealing the document 7.4.6.4Scrolling to a fragment 7.4.6.5Persisted history entry state 7.5Document lifecycle7.5.1Shared document creation infrastructure7.5.2Loading HTML documents7.5.3Loading XML documents7.5.4Loading text documents7.5.5Loadingmultipart/x-mixed-replacedocuments7.5.6Loading media documents7.5.7Loading a document for inline content that doesn't have a
  DOM7.5.8Finishing the loading process7.5.9Unloading documents7.5.10Destroying documents7.5.11Aborting a document load 7.5.1Shared document creation infrastructure 7.5.2Loading HTML documents 7.5.3Loading XML documents 7.5.4Loading text documents 7.5.5Loadingmultipart/x-mixed-replacedocuments 7.5.6Loading media documents 7.5.7Loading a document for inline content that doesn't have a
  DOM 7.5.8Finishing the loading process 7.5.9Unloading documents 7.5.10Destroying documents 7.5.11Aborting a document load 7.6The `X-Frame-Options` header 7.7The `Refresh` header 7.8Browser user interface
  considerations 7.1.1Origins7.1.1.1Sites7.1.1.2Relaxing the same-origin restriction 7.1.1.1Sites 7.1.1.2Relaxing the same-origin restriction 7.1.2Origin-keyed agent clusters 7.1.3Cross-origin opener policies7.1.3.1The headers7.1.3.2Browsing context group
  switches due to opener policy7.1.3.3Reporting 7.1.3.1The headers 7.1.3.2Browsing context group
  switches due to opener policy 7.1.3.3Reporting 7.1.4Cross-origin embedder policies7.1.4.1The headers7.1.4.2Embedder policy checks 7.1.4.1The headers 7.1.4.2Embedder policy checks 7.1.5Sandboxing 7.1.6Policy containers 7.1.1.1Sites 7.1.1.2Relaxing the same-origin restriction 7.1.3.1The headers 7.1.3.2Browsing context group
  switches due to opener policy 7.1.3.3Reporting 7.1.4.1The headers 7.1.4.2Embedder policy checks 7.2.1Security infrastructure forWindow,WindowProxy, andLocationobjects7.2.1.1Integration with IDL7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]]7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.1.1Integration with IDL 7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]] 7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.1.3.1CrossOriginProperties (O) 7.2.1.3.2CrossOriginPropertyFallback (P) 7.2.1.3.3IsPlatformObjectSameOrigin (O) 7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P) 7.2.1.3.5CrossOriginGet (O,P,Receiver) 7.2.1.3.6CrossOriginSet (O,P,V,Receiver) 7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.2TheWindowobject7.2.2.1Opening and closing windows7.2.2.2Indexed access on theWindowobject7.2.2.3Named access on theWindowobject7.2.2.4Accessing related windows7.2.2.5Historical browser interface element APIs7.2.2.6Script settings forWindowobjects 7.2.2.1Opening and closing windows 7.2.2.2Indexed access on theWindowobject 7.2.2.3Named access on theWindowobject 7.2.2.4Accessing related windows 7.2.2.5Historical browser interface element APIs 7.2.2.6Script settings forWindowobjects 7.2.3TheWindowProxyexotic object7.2.3.1[[GetPrototypeOf]] ( )7.2.3.2[[SetPrototypeOf]] (V)7.2.3.3[[IsExtensible]] ( )7.2.3.4[[PreventExtensions]] ( )7.2.3.5[[GetOwnProperty]] (P)7.2.3.6[[DefineOwnProperty]] (P,Desc)7.2.3.7[[Get]] (P,Receiver)7.2.3.8[[Set]] (P,V,Receiver)7.2.3.9[[Delete]] (P)7.2.3.10[[OwnPropertyKeys]] ( ) 7.2.3.1[[GetPrototypeOf]] ( ) 7.2.3.2[[SetPrototypeOf]] (V) 7.2.3.3[[IsExtensible]] ( ) 7.2.3.4[[PreventExtensions]] ( ) 7.2.3.5[[GetOwnProperty]] (P) 7.2.3.6[[DefineOwnProperty]] (P,Desc) 7.2.3.7[[Get]] (P,Receiver) 7.2.3.8[[Set]] (P,V,Receiver) 7.2.3.9[[Delete]] (P) 7.2.3.10[[OwnPropertyKeys]] ( ) 7.2.4TheLocationinterface7.2.4.1[[GetPrototypeOf]] ( )7.2.4.2[[SetPrototypeOf]] (V)7.2.4.3[[IsExtensible]] ( )7.2.4.4[[PreventExtensions]] ( )7.2.4.5[[GetOwnProperty]] (P)7.2.4.6[[DefineOwnProperty]] (P,Desc)7.2.4.7[[Get]] (P,Receiver)7.2.4.8[[Set]] (P,V,Receiver)7.2.4.9[[Delete]] (P)7.2.4.10[[OwnPropertyKeys]] ( ) 7.2.4.1[[GetPrototypeOf]] ( ) 7.2.4.2[[SetPrototypeOf]] (V) 7.2.4.3[[IsExtensible]] ( ) 7.2.4.4[[PreventExtensions]] ( ) 7.2.4.5[[GetOwnProperty]] (P) 7.2.4.6[[DefineOwnProperty]] (P,Desc) 7.2.4.7[[Get]] (P,Receiver) 7.2.4.8[[Set]] (P,V,Receiver) 7.2.4.9[[Delete]] (P) 7.2.4.10[[OwnPropertyKeys]] ( ) 7.2.5TheHistoryinterface 7.2.6The navigation API7.2.6.1Introduction7.2.6.2TheNavigationinterface7.2.6.3Core infrastructure7.2.6.4Initializing and updating the entry list7.2.6.5TheNavigationHistoryEntryinterface7.2.6.6The history entry list7.2.6.7Initiating navigations7.2.6.8Ongoing navigation tracking7.2.6.9TheNavigationActivationinterface7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior 7.2.6.1Introduction 7.2.6.2TheNavigationinterface 7.2.6.3Core infrastructure 7.2.6.4Initializing and updating the entry list 7.2.6.5TheNavigationHistoryEntryinterface 7.2.6.6The history entry list 7.2.6.7Initiating navigations 7.2.6.8Ongoing navigation tracking 7.2.6.9TheNavigationActivationinterface 7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior 7.2.6.10.1TheNavigateEventinterface 7.2.6.10.2TheNavigationDestinationinterface 7.2.6.10.3Firing the event 7.2.6.10.4Scroll and focus behavior 7.2.7Event interfaces7.2.7.1TheNavigationCurrentEntryChangeEventinterface7.2.7.2ThePopStateEventinterface7.2.7.3TheHashChangeEventinterface7.2.7.4ThePageSwapEventinterface7.2.7.5ThePageRevealEventinterface7.2.7.6ThePageTransitionEventinterface7.2.7.7TheBeforeUnloadEventinterface 7.2.7.1TheNavigationCurrentEntryChangeEventinterface 7.2.7.2ThePopStateEventinterface 7.2.7.3TheHashChangeEventinterface 7.2.7.4ThePageSwapEventinterface 7.2.7.5ThePageRevealEventinterface 7.2.7.6ThePageTransitionEventinterface 7.2.7.7TheBeforeUnloadEventinterface 7.2.8TheNotRestoredReasonsinterface 7.2.1.1Integration with IDL 7.2.1.2Shared internal slot: [[CrossOriginPropertyDescriptorMap]] 7.2.1.3Shared abstract operations7.2.1.3.1CrossOriginProperties (O)7.2.1.3.2CrossOriginPropertyFallback (P)7.2.1.3.3IsPlatformObjectSameOrigin (O)7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P)7.2.1.3.5CrossOriginGet (O,P,Receiver)7.2.1.3.6CrossOriginSet (O,P,V,Receiver)7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.1.3.1CrossOriginProperties (O) 7.2.1.3.2CrossOriginPropertyFallback (P) 7.2.1.3.3IsPlatformObjectSameOrigin (O) 7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P) 7.2.1.3.5CrossOriginGet (O,P,Receiver) 7.2.1.3.6CrossOriginSet (O,P,V,Receiver) 7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.1.3.1CrossOriginProperties (O) 7.2.1.3.2CrossOriginPropertyFallback (P) 7.2.1.3.3IsPlatformObjectSameOrigin (O) 7.2.1.3.4CrossOriginGetOwnPropertyHelper (O,P) 7.2.1.3.5CrossOriginGet (O,P,Receiver) 7.2.1.3.6CrossOriginSet (O,P,V,Receiver) 7.2.1.3.7CrossOriginOwnPropertyKeys (O) 7.2.2.1Opening and closing windows 7.2.2.2Indexed access on theWindowobject 7.2.2.3Named access on theWindowobject 7.2.2.4Accessing related windows 7.2.2.5Historical browser interface element APIs 7.2.2.6Script settings forWindowobjects 7.2.3.1[[GetPrototypeOf]] ( ) 7.2.3.2[[SetPrototypeOf]] (V) 7.2.3.3[[IsExtensible]] ( ) 7.2.3.4[[PreventExtensions]] ( ) 7.2.3.5[[GetOwnProperty]] (P) 7.2.3.6[[DefineOwnProperty]] (P,Desc) 7.2.3.7[[Get]] (P,Receiver) 7.2.3.8[[Set]] (P,V,Receiver) 7.2.3.9[[Delete]] (P) 7.2.3.10[[OwnPropertyKeys]] ( ) 7.2.4.1[[GetPrototypeOf]] ( ) 7.2.4.2[[SetPrototypeOf]] (V) 7.2.4.3[[IsExtensible]] ( ) 7.2.4.4[[PreventExtensions]] ( ) 7.2.4.5[[GetOwnProperty]] (P) 7.2.4.6[[DefineOwnProperty]] (P,Desc) 7.2.4.7[[Get]] (P,Receiver) 7.2.4.8[[Set]] (P,V,Receiver) 7.2.4.9[[Delete]] (P) 7.2.4.10[[OwnPropertyKeys]] ( ) 7.2.6.1Introduction 7.2.6.2TheNavigationinterface 7.2.6.3Core infrastructure 7.2.6.4Initializing and updating the entry list 7.2.6.5TheNavigationHistoryEntryinterface 7.2.6.6The history entry list 7.2.6.7Initiating navigations 7.2.6.8Ongoing navigation tracking 7.2.6.9TheNavigationActivationinterface 7.2.6.10Thenavigateevent7.2.6.10.1TheNavigateEventinterface7.2.6.10.2TheNavigationDestinationinterface7.2.6.10.3Firing the event7.2.6.10.4Scroll and focus behavior 7.2.6.10.1TheNavigateEventinterface 7.2.6.10.2TheNavigationDestinationinterface 7.2.6.10.3Firing the event 7.2.6.10.4Scroll and focus behavior 7.2.6.10.1TheNavigateEventinterface 7.2.6.10.2TheNavigationDestinationinterface 7.2.6.10.3Firing the event 7.2.6.10.4Scroll and focus behavior 7.2.7.1TheNavigationCurrentEntryChangeEventinterface 7.2.7.2ThePopStateEventinterface 7.2.7.3TheHashChangeEventinterface 7.2.7.4ThePageSwapEventinterface 7.2.7.5ThePageRevealEventinterface 7.2.7.6ThePageTransitionEventinterface 7.2.7.7TheBeforeUnloadEventinterface 7.3.1Navigables7.3.1.1Traversable navigables7.3.1.2Top-level traversables7.3.1.3Child navigables7.3.1.4Jake diagrams7.3.1.5Related navigable collections7.3.1.6Navigable destruction7.3.1.7Navigable target names 7.3.1.1Traversable navigables 7.3.1.2Top-level traversables 7.3.1.3Child navigables 7.3.1.4Jake diagrams 7.3.1.5Related navigable collections 7.3.1.6Navigable destruction 7.3.1.7Navigable target names 7.3.2Browsing contexts7.3.2.1Creating browsing contexts7.3.2.2Related browsing contexts7.3.2.3Groupings of browsing contexts 7.3.2.1Creating browsing contexts 7.3.2.2Related browsing contexts 7.3.2.3Groupings of browsing contexts 7.3.3Fully active documents 7.3.1.1Traversable navigables 7.3.1.2Top-level traversables 7.3.1.3Child navigables 7.3.1.4Jake diagrams 7.3.1.5Related navigable collections 7.3.1.6Navigable destruction 7.3.1.7Navigable target names 7.3.2.1Creating browsing contexts 7.3.2.2Related browsing contexts 7.3.2.3Groupings of browsing contexts 7.4.1Session history7.4.1.1Session history entries7.4.1.2Document state7.4.1.3Centralized modifications of session history7.4.1.4Low-level operations on session history 7.4.1.1Session history entries 7.4.1.2Document state 7.4.1.3Centralized modifications of session history 7.4.1.4Low-level operations on session history 7.4.2Navigation7.4.2.1Supporting concepts7.4.2.2Beginning navigation7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software7.4.2.4Preventing navigation7.4.2.5Aborting navigation 7.4.2.1Supporting concepts 7.4.2.2Beginning navigation 7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software 7.4.2.3.1The usual cross-document navigation case 7.4.2.3.2Thejavascript:URL special case 7.4.2.3.3Fragment navigations 7.4.2.3.4Non-fetch schemes and external software 7.4.2.4Preventing navigation 7.4.2.5Aborting navigation 7.4.3Reloading and traversing 7.4.4Non-fragment synchronous ""navigations"" 7.4.5Populating a session history entry 7.4.6Applying the history step7.4.6.1Updating the traversable7.4.6.2Updating the document7.4.6.3Revealing the document7.4.6.4Scrolling to a fragment7.4.6.5Persisted history entry state 7.4.6.1Updating the traversable 7.4.6.2Updating the document 7.4.6.3Revealing the document 7.4.6.4Scrolling to a fragment 7.4.6.5Persisted history entry state 7.4.1.1Session history entries 7.4.1.2Document state 7.4.1.3Centralized modifications of session history 7.4.1.4Low-level operations on session history 7.4.2.1Supporting concepts 7.4.2.2Beginning navigation 7.4.2.3Ending navigation7.4.2.3.1The usual cross-document navigation case7.4.2.3.2Thejavascript:URL special case7.4.2.3.3Fragment navigations7.4.2.3.4Non-fetch schemes and external software 7.4.2.3.1The usual cross-document navigation case 7.4.2.3.2Thejavascript:URL special case 7.4.2.3.3Fragment navigations 7.4.2.3.4Non-fetch schemes and external software 7.4.2.4Preventing navigation 7.4.2.5Aborting navigation 7.4.2.3.1The usual cross-document navigation case 7.4.2.3.2Thejavascript:URL special case 7.4.2.3.3Fragment navigations 7.4.2.3.4Non-fetch schemes and external software 7.4.6.1Updating the traversable 7.4.6.2Updating the document 7.4.6.3Revealing the document 7.4.6.4Scrolling to a fragment 7.4.6.5Persisted history entry state 7.5.1Shared document creation infrastructure 7.5.2Loading HTML documents 7.5.3Loading XML documents 7.5.4Loading text documents 7.5.5Loadingmultipart/x-mixed-replacedocuments 7.5.6Loading media documents 7.5.7Loading a document for inline content that doesn't have a
  DOM 7.5.8Finishing the loading process 7.5.9Unloading documents 7.5.10Destroying documents 7.5.11Aborting a document load 8.1Scripting8.1.1Introduction8.1.2Agents and agent clusters8.1.2.1Integration with the JavaScript agent formalism8.1.2.2Integration with the JavaScript agent cluster formalism8.1.3Realms and their counterparts8.1.3.1Environments8.1.3.2Environment settings objects8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant8.1.3.4Enabling and disabling scripting8.1.3.5Secure contexts8.1.4Script processing
  model8.1.4.1Scripts8.1.4.2Fetching scripts8.1.4.3Creating scripts8.1.4.4Calling scripts8.1.4.5Killing scripts8.1.4.6Runtime script errors8.1.4.7Unhandled promise rejections8.1.4.8Import map parse results8.1.5Module specifier resolution8.1.5.1The resolution algorithm8.1.5.2Import maps8.1.5.3Import map processing model8.1.6JavaScript specification host hooks8.1.6.1HostEnsureCanAddPrivateElement(O)8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg)8.1.6.3HostGetCodeForEval(argument)8.1.6.4HostPromiseRejectionTracker(promise,operation)8.1.6.5HostSystemUTCEpochNanoseconds(global)8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable)8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload)8.1.7Event loops8.1.7.1Definitions8.1.7.2Queuing tasks8.1.7.3Processing model8.1.7.4Generic task sources8.1.7.5Dealing with the event loop from other specifications8.1.8Events8.1.8.1Event handlers8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions8.1.8.3Event firing 8.1.1Introduction 8.1.2Agents and agent clusters8.1.2.1Integration with the JavaScript agent formalism8.1.2.2Integration with the JavaScript agent cluster formalism 8.1.2.1Integration with the JavaScript agent formalism 8.1.2.2Integration with the JavaScript agent cluster formalism 8.1.3Realms and their counterparts8.1.3.1Environments8.1.3.2Environment settings objects8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant8.1.3.4Enabling and disabling scripting8.1.3.5Secure contexts 8.1.3.1Environments 8.1.3.2Environment settings objects 8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant 8.1.3.3.1Entry 8.1.3.3.2Incumbent 8.1.3.3.3Current 8.1.3.3.4Relevant 8.1.3.4Enabling and disabling scripting 8.1.3.5Secure contexts 8.1.4Script processing
  model8.1.4.1Scripts8.1.4.2Fetching scripts8.1.4.3Creating scripts8.1.4.4Calling scripts8.1.4.5Killing scripts8.1.4.6Runtime script errors8.1.4.7Unhandled promise rejections8.1.4.8Import map parse results 8.1.4.1Scripts 8.1.4.2Fetching scripts 8.1.4.3Creating scripts 8.1.4.4Calling scripts 8.1.4.5Killing scripts 8.1.4.6Runtime script errors 8.1.4.7Unhandled promise rejections 8.1.4.8Import map parse results 8.1.5Module specifier resolution8.1.5.1The resolution algorithm8.1.5.2Import maps8.1.5.3Import map processing model 8.1.5.1The resolution algorithm 8.1.5.2Import maps 8.1.5.3Import map processing model 8.1.6JavaScript specification host hooks8.1.6.1HostEnsureCanAddPrivateElement(O)8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg)8.1.6.3HostGetCodeForEval(argument)8.1.6.4HostPromiseRejectionTracker(promise,operation)8.1.6.5HostSystemUTCEpochNanoseconds(global)8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable)8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.6.1HostEnsureCanAddPrivateElement(O) 8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg) 8.1.6.3HostGetCodeForEval(argument) 8.1.6.4HostPromiseRejectionTracker(promise,operation) 8.1.6.5HostSystemUTCEpochNanoseconds(global) 8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.6.1HostCallJobCallback(callback,V,argumentsList) 8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry) 8.1.6.6.3HostEnqueueGenericJob(job,realm) 8.1.6.6.4HostEnqueuePromiseJob(job,realm) 8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds) 8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.6.7.1HostGetImportMetaProperties(moduleRecord) 8.1.6.7.2HostGetSupportedImportAttributes() 8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.7Event loops8.1.7.1Definitions8.1.7.2Queuing tasks8.1.7.3Processing model8.1.7.4Generic task sources8.1.7.5Dealing with the event loop from other specifications 8.1.7.1Definitions 8.1.7.2Queuing tasks 8.1.7.3Processing model 8.1.7.4Generic task sources 8.1.7.5Dealing with the event loop from other specifications 8.1.8Events8.1.8.1Event handlers8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions8.1.8.3Event firing 8.1.8.1Event handlers 8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions 8.1.8.2.1IDL definitions 8.1.8.3Event firing 8.2TheWindowOrWorkerGlobalScopemixin 8.3Base64 utility methods 8.4Dynamic markup insertion8.4.1Opening the input stream8.4.2Closing the input stream8.4.3document.write()8.4.4document.writeln() 8.4.1Opening the input stream 8.4.2Closing the input stream 8.4.3document.write() 8.4.4document.writeln() 8.5DOM parsing and serialization APIs8.5.1TheDOMParserinterface8.5.2Unsafe HTML parsing methods8.5.3HTML serialization methods8.5.4TheinnerHTMLproperty8.5.5TheouterHTMLproperty8.5.6TheinsertAdjacentHTML()method8.5.7ThecreateContextualFragment()method 8.5.1TheDOMParserinterface 8.5.2Unsafe HTML parsing methods 8.5.3HTML serialization methods 8.5.4TheinnerHTMLproperty 8.5.5TheouterHTMLproperty 8.5.6TheinsertAdjacentHTML()method 8.5.7ThecreateContextualFragment()method 8.6Timers 8.7Microtask queuing 8.8User prompts8.8.1Simple dialogs8.8.2Printing 8.8.1Simple dialogs 8.8.2Printing 8.9System state and capabilities8.9.1TheNavigatorobject8.9.1.1Client identification8.9.1.2Language preferences8.9.1.3Browser state8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation8.9.1.5Cookies8.9.1.6PDF viewing support 8.9.1TheNavigatorobject8.9.1.1Client identification8.9.1.2Language preferences8.9.1.3Browser state8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation8.9.1.5Cookies8.9.1.6PDF viewing support 8.9.1.1Client identification 8.9.1.2Language preferences 8.9.1.3Browser state 8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation 8.9.1.4.1Security and privacy 8.9.1.4.2User agent automation 8.9.1.5Cookies 8.9.1.6PDF viewing support 8.10Images 8.11Animation frames 8.1.1Introduction 8.1.2Agents and agent clusters8.1.2.1Integration with the JavaScript agent formalism8.1.2.2Integration with the JavaScript agent cluster formalism 8.1.2.1Integration with the JavaScript agent formalism 8.1.2.2Integration with the JavaScript agent cluster formalism 8.1.3Realms and their counterparts8.1.3.1Environments8.1.3.2Environment settings objects8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant8.1.3.4Enabling and disabling scripting8.1.3.5Secure contexts 8.1.3.1Environments 8.1.3.2Environment settings objects 8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant 8.1.3.3.1Entry 8.1.3.3.2Incumbent 8.1.3.3.3Current 8.1.3.3.4Relevant 8.1.3.4Enabling and disabling scripting 8.1.3.5Secure contexts 8.1.4Script processing
  model8.1.4.1Scripts8.1.4.2Fetching scripts8.1.4.3Creating scripts8.1.4.4Calling scripts8.1.4.5Killing scripts8.1.4.6Runtime script errors8.1.4.7Unhandled promise rejections8.1.4.8Import map parse results 8.1.4.1Scripts 8.1.4.2Fetching scripts 8.1.4.3Creating scripts 8.1.4.4Calling scripts 8.1.4.5Killing scripts 8.1.4.6Runtime script errors 8.1.4.7Unhandled promise rejections 8.1.4.8Import map parse results 8.1.5Module specifier resolution8.1.5.1The resolution algorithm8.1.5.2Import maps8.1.5.3Import map processing model 8.1.5.1The resolution algorithm 8.1.5.2Import maps 8.1.5.3Import map processing model 8.1.6JavaScript specification host hooks8.1.6.1HostEnsureCanAddPrivateElement(O)8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg)8.1.6.3HostGetCodeForEval(argument)8.1.6.4HostPromiseRejectionTracker(promise,operation)8.1.6.5HostSystemUTCEpochNanoseconds(global)8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable)8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.6.1HostEnsureCanAddPrivateElement(O) 8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg) 8.1.6.3HostGetCodeForEval(argument) 8.1.6.4HostPromiseRejectionTracker(promise,operation) 8.1.6.5HostSystemUTCEpochNanoseconds(global) 8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.6.1HostCallJobCallback(callback,V,argumentsList) 8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry) 8.1.6.6.3HostEnqueueGenericJob(job,realm) 8.1.6.6.4HostEnqueuePromiseJob(job,realm) 8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds) 8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.6.7.1HostGetImportMetaProperties(moduleRecord) 8.1.6.7.2HostGetSupportedImportAttributes() 8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.7Event loops8.1.7.1Definitions8.1.7.2Queuing tasks8.1.7.3Processing model8.1.7.4Generic task sources8.1.7.5Dealing with the event loop from other specifications 8.1.7.1Definitions 8.1.7.2Queuing tasks 8.1.7.3Processing model 8.1.7.4Generic task sources 8.1.7.5Dealing with the event loop from other specifications 8.1.8Events8.1.8.1Event handlers8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions8.1.8.3Event firing 8.1.8.1Event handlers 8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions 8.1.8.2.1IDL definitions 8.1.8.3Event firing 8.1.2.1Integration with the JavaScript agent formalism 8.1.2.2Integration with the JavaScript agent cluster formalism 8.1.3.1Environments 8.1.3.2Environment settings objects 8.1.3.3Realms, settings objects, and global objects8.1.3.3.1Entry8.1.3.3.2Incumbent8.1.3.3.3Current8.1.3.3.4Relevant 8.1.3.3.1Entry 8.1.3.3.2Incumbent 8.1.3.3.3Current 8.1.3.3.4Relevant 8.1.3.4Enabling and disabling scripting 8.1.3.5Secure contexts 8.1.3.3.1Entry 8.1.3.3.2Incumbent 8.1.3.3.3Current 8.1.3.3.4Relevant 8.1.4.1Scripts 8.1.4.2Fetching scripts 8.1.4.3Creating scripts 8.1.4.4Calling scripts 8.1.4.5Killing scripts 8.1.4.6Runtime script errors 8.1.4.7Unhandled promise rejections 8.1.4.8Import map parse results 8.1.5.1The resolution algorithm 8.1.5.2Import maps 8.1.5.3Import map processing model 8.1.6.1HostEnsureCanAddPrivateElement(O) 8.1.6.2HostEnsureCanCompileStrings(realm,parameterStrings,bodyString,codeString,compilationType,parameterArgs,bodyArg) 8.1.6.3HostGetCodeForEval(argument) 8.1.6.4HostPromiseRejectionTracker(promise,operation) 8.1.6.5HostSystemUTCEpochNanoseconds(global) 8.1.6.6Job-related host hooks8.1.6.6.1HostCallJobCallback(callback,V,argumentsList)8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry)8.1.6.6.3HostEnqueueGenericJob(job,realm)8.1.6.6.4HostEnqueuePromiseJob(job,realm)8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds)8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.6.1HostCallJobCallback(callback,V,argumentsList) 8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry) 8.1.6.6.3HostEnqueueGenericJob(job,realm) 8.1.6.6.4HostEnqueuePromiseJob(job,realm) 8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds) 8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.7Module-related host hooks8.1.6.7.1HostGetImportMetaProperties(moduleRecord)8.1.6.7.2HostGetSupportedImportAttributes()8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.6.7.1HostGetImportMetaProperties(moduleRecord) 8.1.6.7.2HostGetSupportedImportAttributes() 8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.6.6.1HostCallJobCallback(callback,V,argumentsList) 8.1.6.6.2HostEnqueueFinalizationRegistryCleanupJob(finalizationRegistry) 8.1.6.6.3HostEnqueueGenericJob(job,realm) 8.1.6.6.4HostEnqueuePromiseJob(job,realm) 8.1.6.6.5HostEnqueueTimeoutJob(job,realm,milliseconds) 8.1.6.6.6HostMakeJobCallback(callable) 8.1.6.7.1HostGetImportMetaProperties(moduleRecord) 8.1.6.7.2HostGetSupportedImportAttributes() 8.1.6.7.3HostLoadImportedModule(referrer,moduleRequest,loadState,payload) 8.1.7.1Definitions 8.1.7.2Queuing tasks 8.1.7.3Processing model 8.1.7.4Generic task sources 8.1.7.5Dealing with the event loop from other specifications 8.1.8.1Event handlers 8.1.8.2Event handlers on elements,Documentobjects, andWindowobjects8.1.8.2.1IDL definitions 8.1.8.2.1IDL definitions 8.1.8.3Event firing 8.1.8.2.1IDL definitions 8.4.1Opening the input stream 8.4.2Closing the input stream 8.4.3document.write() 8.4.4document.writeln() 8.5.1TheDOMParserinterface 8.5.2Unsafe HTML parsing methods 8.5.3HTML serialization methods 8.5.4TheinnerHTMLproperty 8.5.5TheouterHTMLproperty 8.5.6TheinsertAdjacentHTML()method 8.5.7ThecreateContextualFragment()method 8.8.1Simple dialogs 8.8.2Printing 8.9.1TheNavigatorobject8.9.1.1Client identification8.9.1.2Language preferences8.9.1.3Browser state8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation8.9.1.5Cookies8.9.1.6PDF viewing support 8.9.1.1Client identification 8.9.1.2Language preferences 8.9.1.3Browser state 8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation 8.9.1.4.1Security and privacy 8.9.1.4.2User agent automation 8.9.1.5Cookies 8.9.1.6PDF viewing support 8.9.1.1Client identification 8.9.1.2Language preferences 8.9.1.3Browser state 8.9.1.4Custom scheme handlers: theregisterProtocolHandler()method8.9.1.4.1Security and privacy8.9.1.4.2User agent automation 8.9.1.4.1Security and privacy 8.9.1.4.2User agent automation 8.9.1.5Cookies 8.9.1.6PDF viewing support 8.9.1.4.1Security and privacy 8.9.1.4.2User agent automation 9.1TheMessageEventinterface 9.2Server-sent events9.2.1Introduction9.2.2TheEventSourceinterface9.2.3Processing model9.2.4The `Last-Event-ID` header9.2.5Parsing an event stream9.2.6Interpreting an event stream9.2.7Authoring notes9.2.8Connectionless push and other features9.2.9Garbage collection9.2.10Implementation advice 9.2.1Introduction 9.2.2TheEventSourceinterface 9.2.3Processing model 9.2.4The `Last-Event-ID` header 9.2.5Parsing an event stream 9.2.6Interpreting an event stream 9.2.7Authoring notes 9.2.8Connectionless push and other features 9.2.9Garbage collection 9.2.10Implementation advice 9.3Cross-document messaging9.3.1Introduction9.3.2Security9.3.2.1Authors9.3.2.2User agents9.3.3Posting messages 9.3.1Introduction 9.3.2Security9.3.2.1Authors9.3.2.2User agents 9.3.2.1Authors 9.3.2.2User agents 9.3.3Posting messages 9.4Channel messaging9.4.1Introduction9.4.1.1Examples9.4.1.2Ports as the basis of an object-capability model on the web9.4.1.3Ports as the basis of abstracting out service implementations9.4.2Message channels9.4.3Message ports9.4.4Ports and garbage collection 9.4.1Introduction9.4.1.1Examples9.4.1.2Ports as the basis of an object-capability model on the web9.4.1.3Ports as the basis of abstracting out service implementations 9.4.1.1Examples 9.4.1.2Ports as the basis of an object-capability model on the web 9.4.1.3Ports as the basis of abstracting out service implementations 9.4.2Message channels 9.4.3Message ports 9.4.4Ports and garbage collection 9.5Broadcasting to other browsing contexts 9.2.1Introduction 9.2.2TheEventSourceinterface 9.2.3Processing model 9.2.4The `Last-Event-ID` header 9.2.5Parsing an event stream 9.2.6Interpreting an event stream 9.2.7Authoring notes 9.2.8Connectionless push and other features 9.2.9Garbage collection 9.2.10Implementation advice 9.3.1Introduction 9.3.2Security9.3.2.1Authors9.3.2.2User agents 9.3.2.1Authors 9.3.2.2User agents 9.3.3Posting messages 9.3.2.1Authors 9.3.2.2User agents 9.4.1Introduction9.4.1.1Examples9.4.1.2Ports as the basis of an object-capability model on the web9.4.1.3Ports as the basis of abstracting out service implementations 9.4.1.1Examples 9.4.1.2Ports as the basis of an object-capability model on the web 9.4.1.3Ports as the basis of abstracting out service implementations 9.4.2Message channels 9.4.3Message ports 9.4.4Ports and garbage collection 9.4.1.1Examples 9.4.1.2Ports as the basis of an object-capability model on the web 9.4.1.3Ports as the basis of abstracting out service implementations 10.1Introduction10.1.1Scope10.1.2Examples10.1.2.1A background number-crunching worker10.1.2.2Using a JavaScript module as a worker10.1.2.3Shared workers introduction10.1.2.4Shared state using a shared worker10.1.2.5Delegation10.1.2.6Providing libraries10.1.3Tutorials10.1.3.1Creating a dedicated worker10.1.3.2Communicating with a dedicated worker10.1.3.3Shared workers 10.1.1Scope 10.1.2Examples10.1.2.1A background number-crunching worker10.1.2.2Using a JavaScript module as a worker10.1.2.3Shared workers introduction10.1.2.4Shared state using a shared worker10.1.2.5Delegation10.1.2.6Providing libraries 10.1.2.1A background number-crunching worker 10.1.2.2Using a JavaScript module as a worker 10.1.2.3Shared workers introduction 10.1.2.4Shared state using a shared worker 10.1.2.5Delegation 10.1.2.6Providing libraries 10.1.3Tutorials10.1.3.1Creating a dedicated worker10.1.3.2Communicating with a dedicated worker10.1.3.3Shared workers 10.1.3.1Creating a dedicated worker 10.1.3.2Communicating with a dedicated worker 10.1.3.3Shared workers 10.2Infrastructure10.2.1The global scope10.2.1.1TheWorkerGlobalScopecommon interface10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface10.2.2The event loop10.2.3The worker's lifetime10.2.4Processing model10.2.5Runtime script errors10.2.6Creating workers10.2.6.1TheAbstractWorkermixin10.2.6.2Script settings for workers10.2.6.3Dedicated workers and theWorkerinterface10.2.6.4Shared workers and theSharedWorkerinterface10.2.7Concurrent hardware capabilities 10.2.1The global scope10.2.1.1TheWorkerGlobalScopecommon interface10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface 10.2.1.1TheWorkerGlobalScopecommon interface 10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface 10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface 10.2.2The event loop 10.2.3The worker's lifetime 10.2.4Processing model 10.2.5Runtime script errors 10.2.6Creating workers10.2.6.1TheAbstractWorkermixin10.2.6.2Script settings for workers10.2.6.3Dedicated workers and theWorkerinterface10.2.6.4Shared workers and theSharedWorkerinterface 10.2.6.1TheAbstractWorkermixin 10.2.6.2Script settings for workers 10.2.6.3Dedicated workers and theWorkerinterface 10.2.6.4Shared workers and theSharedWorkerinterface 10.2.7Concurrent hardware capabilities 10.3APIs available to workers10.3.1Importing scripts and libraries10.3.2TheWorkerNavigatorinterface10.3.3TheWorkerLocationinterface 10.3.1Importing scripts and libraries 10.3.2TheWorkerNavigatorinterface 10.3.3TheWorkerLocationinterface 10.1.1Scope 10.1.2Examples10.1.2.1A background number-crunching worker10.1.2.2Using a JavaScript module as a worker10.1.2.3Shared workers introduction10.1.2.4Shared state using a shared worker10.1.2.5Delegation10.1.2.6Providing libraries 10.1.2.1A background number-crunching worker 10.1.2.2Using a JavaScript module as a worker 10.1.2.3Shared workers introduction 10.1.2.4Shared state using a shared worker 10.1.2.5Delegation 10.1.2.6Providing libraries 10.1.3Tutorials10.1.3.1Creating a dedicated worker10.1.3.2Communicating with a dedicated worker10.1.3.3Shared workers 10.1.3.1Creating a dedicated worker 10.1.3.2Communicating with a dedicated worker 10.1.3.3Shared workers 10.1.2.1A background number-crunching worker 10.1.2.2Using a JavaScript module as a worker 10.1.2.3Shared workers introduction 10.1.2.4Shared state using a shared worker 10.1.2.5Delegation 10.1.2.6Providing libraries 10.1.3.1Creating a dedicated worker 10.1.3.2Communicating with a dedicated worker 10.1.3.3Shared workers 10.2.1The global scope10.2.1.1TheWorkerGlobalScopecommon interface10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface 10.2.1.1TheWorkerGlobalScopecommon interface 10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface 10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface 10.2.2The event loop 10.2.3The worker's lifetime 10.2.4Processing model 10.2.5Runtime script errors 10.2.6Creating workers10.2.6.1TheAbstractWorkermixin10.2.6.2Script settings for workers10.2.6.3Dedicated workers and theWorkerinterface10.2.6.4Shared workers and theSharedWorkerinterface 10.2.6.1TheAbstractWorkermixin 10.2.6.2Script settings for workers 10.2.6.3Dedicated workers and theWorkerinterface 10.2.6.4Shared workers and theSharedWorkerinterface 10.2.7Concurrent hardware capabilities 10.2.1.1TheWorkerGlobalScopecommon interface 10.2.1.2Dedicated workers and theDedicatedWorkerGlobalScopeinterface 10.2.1.3Shared workers and theSharedWorkerGlobalScopeinterface 10.2.6.1TheAbstractWorkermixin 10.2.6.2Script settings for workers 10.2.6.3Dedicated workers and theWorkerinterface 10.2.6.4Shared workers and theSharedWorkerinterface 10.3.1Importing scripts and libraries 10.3.2TheWorkerNavigatorinterface 10.3.3TheWorkerLocationinterface 11.1Introduction11.1.1Motivations11.1.2Code idempotence11.1.3Speculative evaluation 11.1.1Motivations 11.1.2Code idempotence 11.1.3Speculative evaluation 11.2Examples11.2.1Loading scripts11.2.2Registering a class and invoking its methods 11.2.1Loading scripts 11.2.2Registering a class and invoking its methods 11.3Infrastructure11.3.1The global scope11.3.1.1Agents and event loops11.3.1.2Creation and termination11.3.1.3Script settings for worklets11.3.2TheWorkletclass11.3.3The worklet's lifetime 11.3.1The global scope11.3.1.1Agents and event loops11.3.1.2Creation and termination11.3.1.3Script settings for worklets 11.3.1.1Agents and event loops 11.3.1.2Creation and termination 11.3.1.3Script settings for worklets 11.3.2TheWorkletclass 11.3.3The worklet's lifetime 11.1.1Motivations 11.1.2Code idempotence 11.1.3Speculative evaluation 11.2.1Loading scripts 11.2.2Registering a class and invoking its methods 11.3.1The global scope11.3.1.1Agents and event loops11.3.1.2Creation and termination11.3.1.3Script settings for worklets 11.3.1.1Agents and event loops 11.3.1.2Creation and termination 11.3.1.3Script settings for worklets 11.3.2TheWorkletclass 11.3.3The worklet's lifetime 11.3.1.1Agents and event loops 11.3.1.2Creation and termination 11.3.1.3Script settings for worklets 12.1Introduction 12.2The API12.2.1TheStorageinterface12.2.2ThesessionStoragegetter12.2.3ThelocalStoragegetter12.2.4TheStorageEventinterface 12.2.1TheStorageinterface 12.2.2ThesessionStoragegetter 12.2.3ThelocalStoragegetter 12.2.4TheStorageEventinterface 12.3Privacy12.3.1User tracking12.3.2Sensitivity of data 12.3.1User tracking 12.3.2Sensitivity of data 12.4Security12.4.1DNS spoofing attacks12.4.2Cross-directory attacks12.4.3Implementation risks 12.4.1DNS spoofing attacks 12.4.2Cross-directory attacks 12.4.3Implementation risks 12.2.1TheStorageinterface 12.2.2ThesessionStoragegetter 12.2.3ThelocalStoragegetter 12.2.4TheStorageEventinterface 12.3.1User tracking 12.3.2Sensitivity of data 12.4.1DNS spoofing attacks 12.4.2Cross-directory attacks 12.4.3Implementation risks 13.1Writing HTML documents13.1.1The DOCTYPE13.1.2Elements13.1.2.1Start tags13.1.2.2End tags13.1.2.3Attributes13.1.2.4Optional tags13.1.2.5Restrictions on content models13.1.2.6Restrictions on the contents of raw text and escapable raw text elements13.1.3Text13.1.3.1Newlines13.1.4Character references13.1.5CDATA sections13.1.6Comments 13.1.1The DOCTYPE 13.1.2Elements13.1.2.1Start tags13.1.2.2End tags13.1.2.3Attributes13.1.2.4Optional tags13.1.2.5Restrictions on content models13.1.2.6Restrictions on the contents of raw text and escapable raw text elements 13.1.2.1Start tags 13.1.2.2End tags 13.1.2.3Attributes 13.1.2.4Optional tags 13.1.2.5Restrictions on content models 13.1.2.6Restrictions on the contents of raw text and escapable raw text elements 13.1.3Text13.1.3.1Newlines 13.1.3.1Newlines 13.1.4Character references 13.1.5CDATA sections 13.1.6Comments 13.2Parsing HTML documents13.2.1Overview of the parsing model13.2.2Parse errors13.2.3The input byte stream13.2.3.1Parsing with a known character encoding13.2.3.2Determining the character encoding13.2.3.3Character encodings13.2.3.4Changing the encoding while parsing13.2.3.5Preprocessing the input stream13.2.4Parse state13.2.4.1The insertion mode13.2.4.2The stack of open elements13.2.4.3The list of active formatting elements13.2.4.4The element pointers13.2.4.5Other parsing state flags13.2.5Tokenization13.2.5.1Data state13.2.5.2RCDATA state13.2.5.3RAWTEXT state13.2.5.4Script data state13.2.5.5PLAINTEXT state13.2.5.6Tag open state13.2.5.7End tag open state13.2.5.8Tag name state13.2.5.9RCDATA less-than sign state13.2.5.10RCDATA end tag open state13.2.5.11RCDATA end tag name state13.2.5.12RAWTEXT less-than sign state13.2.5.13RAWTEXT end tag open state13.2.5.14RAWTEXT end tag name state13.2.5.15Script data less-than sign state13.2.5.16Script data end tag open state13.2.5.17Script data end tag name state13.2.5.18Script data escape start state13.2.5.19Script data escape start dash state13.2.5.20Script data escaped state13.2.5.21Script data escaped dash state13.2.5.22Script data escaped dash dash state13.2.5.23Script data escaped less-than sign state13.2.5.24Script data escaped end tag open state13.2.5.25Script data escaped end tag name state13.2.5.26Script data double escape start state13.2.5.27Script data double escaped state13.2.5.28Script data double escaped dash state13.2.5.29Script data double escaped dash dash state13.2.5.30Script data double escaped less-than sign state13.2.5.31Script data double escape end state13.2.5.32Before attribute name state13.2.5.33Attribute name state13.2.5.34After attribute name state13.2.5.35Before attribute value state13.2.5.36Attribute value (double-quoted) state13.2.5.37Attribute value (single-quoted) state13.2.5.38Attribute value (unquoted) state13.2.5.39After attribute value (quoted) state13.2.5.40Self-closing start tag state13.2.5.41Bogus comment state13.2.5.42Markup declaration open state13.2.5.43Comment start state13.2.5.44Comment start dash state13.2.5.45Comment state13.2.5.46Comment less-than sign state13.2.5.47Comment less-than sign bang state13.2.5.48Comment less-than sign bang dash state13.2.5.49Comment less-than sign bang dash dash state13.2.5.50Comment end dash state13.2.5.51Comment end state13.2.5.52Comment end bang state13.2.5.53DOCTYPE state13.2.5.54Before DOCTYPE name state13.2.5.55DOCTYPE name state13.2.5.56After DOCTYPE name state13.2.5.57After DOCTYPE public keyword state13.2.5.58Before DOCTYPE public identifier state13.2.5.59DOCTYPE public identifier (double-quoted) state13.2.5.60DOCTYPE public identifier (single-quoted) state13.2.5.61After DOCTYPE public identifier state13.2.5.62Between DOCTYPE public and system identifiers state13.2.5.63After DOCTYPE system keyword state13.2.5.64Before DOCTYPE system identifier state13.2.5.65DOCTYPE system identifier (double-quoted) state13.2.5.66DOCTYPE system identifier (single-quoted) state13.2.5.67After DOCTYPE system identifier state13.2.5.68Bogus DOCTYPE state13.2.5.69CDATA section state13.2.5.70CDATA section bracket state13.2.5.71CDATA section end state13.2.5.72Character reference state13.2.5.73Named character reference state13.2.5.74Ambiguous ampersand state13.2.5.75Numeric character reference state13.2.5.76Hexadecimal character reference start state13.2.5.77Decimal character reference start state13.2.5.78Hexadecimal character reference state13.2.5.79Decimal character reference state13.2.5.80Numeric character reference end state13.2.6Tree construction13.2.6.1Creating and inserting nodes13.2.6.2Parsing elements that contain only text13.2.6.3Closing elements that have implied end tags13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode13.2.6.5The rules for parsing tokens in foreign content13.2.7The end13.2.8Speculative HTML parsing13.2.9Coercing an HTML DOM into an infoset13.2.10An introduction to error handling and strange cases in the parser13.2.10.1Misnested tags: <b><i></b></i>13.2.10.2Misnested tags: <b><p></b></p>13.2.10.3Unexpected markup in tables13.2.10.4Scripts that modify the page as it is being parsed13.2.10.5The execution of scripts that are moving across multiple documents13.2.10.6Unclosed formatting elements 13.2.1Overview of the parsing model 13.2.2Parse errors 13.2.3The input byte stream13.2.3.1Parsing with a known character encoding13.2.3.2Determining the character encoding13.2.3.3Character encodings13.2.3.4Changing the encoding while parsing13.2.3.5Preprocessing the input stream 13.2.3.1Parsing with a known character encoding 13.2.3.2Determining the character encoding 13.2.3.3Character encodings 13.2.3.4Changing the encoding while parsing 13.2.3.5Preprocessing the input stream 13.2.4Parse state13.2.4.1The insertion mode13.2.4.2The stack of open elements13.2.4.3The list of active formatting elements13.2.4.4The element pointers13.2.4.5Other parsing state flags 13.2.4.1The insertion mode 13.2.4.2The stack of open elements 13.2.4.3The list of active formatting elements 13.2.4.4The element pointers 13.2.4.5Other parsing state flags 13.2.5Tokenization13.2.5.1Data state13.2.5.2RCDATA state13.2.5.3RAWTEXT state13.2.5.4Script data state13.2.5.5PLAINTEXT state13.2.5.6Tag open state13.2.5.7End tag open state13.2.5.8Tag name state13.2.5.9RCDATA less-than sign state13.2.5.10RCDATA end tag open state13.2.5.11RCDATA end tag name state13.2.5.12RAWTEXT less-than sign state13.2.5.13RAWTEXT end tag open state13.2.5.14RAWTEXT end tag name state13.2.5.15Script data less-than sign state13.2.5.16Script data end tag open state13.2.5.17Script data end tag name state13.2.5.18Script data escape start state13.2.5.19Script data escape start dash state13.2.5.20Script data escaped state13.2.5.21Script data escaped dash state13.2.5.22Script data escaped dash dash state13.2.5.23Script data escaped less-than sign state13.2.5.24Script data escaped end tag open state13.2.5.25Script data escaped end tag name state13.2.5.26Script data double escape start state13.2.5.27Script data double escaped state13.2.5.28Script data double escaped dash state13.2.5.29Script data double escaped dash dash state13.2.5.30Script data double escaped less-than sign state13.2.5.31Script data double escape end state13.2.5.32Before attribute name state13.2.5.33Attribute name state13.2.5.34After attribute name state13.2.5.35Before attribute value state13.2.5.36Attribute value (double-quoted) state13.2.5.37Attribute value (single-quoted) state13.2.5.38Attribute value (unquoted) state13.2.5.39After attribute value (quoted) state13.2.5.40Self-closing start tag state13.2.5.41Bogus comment state13.2.5.42Markup declaration open state13.2.5.43Comment start state13.2.5.44Comment start dash state13.2.5.45Comment state13.2.5.46Comment less-than sign state13.2.5.47Comment less-than sign bang state13.2.5.48Comment less-than sign bang dash state13.2.5.49Comment less-than sign bang dash dash state13.2.5.50Comment end dash state13.2.5.51Comment end state13.2.5.52Comment end bang state13.2.5.53DOCTYPE state13.2.5.54Before DOCTYPE name state13.2.5.55DOCTYPE name state13.2.5.56After DOCTYPE name state13.2.5.57After DOCTYPE public keyword state13.2.5.58Before DOCTYPE public identifier state13.2.5.59DOCTYPE public identifier (double-quoted) state13.2.5.60DOCTYPE public identifier (single-quoted) state13.2.5.61After DOCTYPE public identifier state13.2.5.62Between DOCTYPE public and system identifiers state13.2.5.63After DOCTYPE system keyword state13.2.5.64Before DOCTYPE system identifier state13.2.5.65DOCTYPE system identifier (double-quoted) state13.2.5.66DOCTYPE system identifier (single-quoted) state13.2.5.67After DOCTYPE system identifier state13.2.5.68Bogus DOCTYPE state13.2.5.69CDATA section state13.2.5.70CDATA section bracket state13.2.5.71CDATA section end state13.2.5.72Character reference state13.2.5.73Named character reference state13.2.5.74Ambiguous ampersand state13.2.5.75Numeric character reference state13.2.5.76Hexadecimal character reference start state13.2.5.77Decimal character reference start state13.2.5.78Hexadecimal character reference state13.2.5.79Decimal character reference state13.2.5.80Numeric character reference end state 13.2.5.1Data state 13.2.5.2RCDATA state 13.2.5.3RAWTEXT state 13.2.5.4Script data state 13.2.5.5PLAINTEXT state 13.2.5.6Tag open state 13.2.5.7End tag open state 13.2.5.8Tag name state 13.2.5.9RCDATA less-than sign state 13.2.5.10RCDATA end tag open state 13.2.5.11RCDATA end tag name state 13.2.5.12RAWTEXT less-than sign state 13.2.5.13RAWTEXT end tag open state 13.2.5.14RAWTEXT end tag name state 13.2.5.15Script data less-than sign state 13.2.5.16Script data end tag open state 13.2.5.17Script data end tag name state 13.2.5.18Script data escape start state 13.2.5.19Script data escape start dash state 13.2.5.20Script data escaped state 13.2.5.21Script data escaped dash state 13.2.5.22Script data escaped dash dash state 13.2.5.23Script data escaped less-than sign state 13.2.5.24Script data escaped end tag open state 13.2.5.25Script data escaped end tag name state 13.2.5.26Script data double escape start state 13.2.5.27Script data double escaped state 13.2.5.28Script data double escaped dash state 13.2.5.29Script data double escaped dash dash state 13.2.5.30Script data double escaped less-than sign state 13.2.5.31Script data double escape end state 13.2.5.32Before attribute name state 13.2.5.33Attribute name state 13.2.5.34After attribute name state 13.2.5.35Before attribute value state 13.2.5.36Attribute value (double-quoted) state 13.2.5.37Attribute value (single-quoted) state 13.2.5.38Attribute value (unquoted) state 13.2.5.39After attribute value (quoted) state 13.2.5.40Self-closing start tag state 13.2.5.41Bogus comment state 13.2.5.42Markup declaration open state 13.2.5.43Comment start state 13.2.5.44Comment start dash state 13.2.5.45Comment state 13.2.5.46Comment less-than sign state 13.2.5.47Comment less-than sign bang state 13.2.5.48Comment less-than sign bang dash state 13.2.5.49Comment less-than sign bang dash dash state 13.2.5.50Comment end dash state 13.2.5.51Comment end state 13.2.5.52Comment end bang state 13.2.5.53DOCTYPE state 13.2.5.54Before DOCTYPE name state 13.2.5.55DOCTYPE name state 13.2.5.56After DOCTYPE name state 13.2.5.57After DOCTYPE public keyword state 13.2.5.58Before DOCTYPE public identifier state 13.2.5.59DOCTYPE public identifier (double-quoted) state 13.2.5.60DOCTYPE public identifier (single-quoted) state 13.2.5.61After DOCTYPE public identifier state 13.2.5.62Between DOCTYPE public and system identifiers state 13.2.5.63After DOCTYPE system keyword state 13.2.5.64Before DOCTYPE system identifier state 13.2.5.65DOCTYPE system identifier (double-quoted) state 13.2.5.66DOCTYPE system identifier (single-quoted) state 13.2.5.67After DOCTYPE system identifier state 13.2.5.68Bogus DOCTYPE state 13.2.5.69CDATA section state 13.2.5.70CDATA section bracket state 13.2.5.71CDATA section end state 13.2.5.72Character reference state 13.2.5.73Named character reference state 13.2.5.74Ambiguous ampersand state 13.2.5.75Numeric character reference state 13.2.5.76Hexadecimal character reference start state 13.2.5.77Decimal character reference start state 13.2.5.78Hexadecimal character reference state 13.2.5.79Decimal character reference state 13.2.5.80Numeric character reference end state 13.2.6Tree construction13.2.6.1Creating and inserting nodes13.2.6.2Parsing elements that contain only text13.2.6.3Closing elements that have implied end tags13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode13.2.6.5The rules for parsing tokens in foreign content 13.2.6.1Creating and inserting nodes 13.2.6.2Parsing elements that contain only text 13.2.6.3Closing elements that have implied end tags 13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode 13.2.6.4.1The ""initial"" insertion mode 13.2.6.4.2The ""before html"" insertion mode 13.2.6.4.3The ""before head"" insertion mode 13.2.6.4.4The ""in head"" insertion mode 13.2.6.4.5The ""in head noscript"" insertion mode 13.2.6.4.6The ""after head"" insertion mode 13.2.6.4.7The ""in body"" insertion mode 13.2.6.4.8The ""text"" insertion mode 13.2.6.4.9The ""in table"" insertion mode 13.2.6.4.10The ""in table text"" insertion mode 13.2.6.4.11The ""in caption"" insertion mode 13.2.6.4.12The ""in column group"" insertion mode 13.2.6.4.13The ""in table body"" insertion mode 13.2.6.4.14The ""in row"" insertion mode 13.2.6.4.15The ""in cell"" insertion mode 13.2.6.4.16The ""in select"" insertion mode 13.2.6.4.17The ""in select in table"" insertion mode 13.2.6.4.18The ""in template"" insertion mode 13.2.6.4.19The ""after body"" insertion mode 13.2.6.4.20The ""in frameset"" insertion mode 13.2.6.4.21The ""after frameset"" insertion mode 13.2.6.4.22The ""after after body"" insertion mode 13.2.6.4.23The ""after after frameset"" insertion mode 13.2.6.5The rules for parsing tokens in foreign content 13.2.7The end 13.2.8Speculative HTML parsing 13.2.9Coercing an HTML DOM into an infoset 13.2.10An introduction to error handling and strange cases in the parser13.2.10.1Misnested tags: <b><i></b></i>13.2.10.2Misnested tags: <b><p></b></p>13.2.10.3Unexpected markup in tables13.2.10.4Scripts that modify the page as it is being parsed13.2.10.5The execution of scripts that are moving across multiple documents13.2.10.6Unclosed formatting elements 13.2.10.1Misnested tags: <b><i></b></i> 13.2.10.2Misnested tags: <b><p></b></p> 13.2.10.3Unexpected markup in tables 13.2.10.4Scripts that modify the page as it is being parsed 13.2.10.5The execution of scripts that are moving across multiple documents 13.2.10.6Unclosed formatting elements 13.3Serializing HTML fragments 13.4Parsing HTML fragments 13.5Named character references 13.1.1The DOCTYPE 13.1.2Elements13.1.2.1Start tags13.1.2.2End tags13.1.2.3Attributes13.1.2.4Optional tags13.1.2.5Restrictions on content models13.1.2.6Restrictions on the contents of raw text and escapable raw text elements 13.1.2.1Start tags 13.1.2.2End tags 13.1.2.3Attributes 13.1.2.4Optional tags 13.1.2.5Restrictions on content models 13.1.2.6Restrictions on the contents of raw text and escapable raw text elements 13.1.3Text13.1.3.1Newlines 13.1.3.1Newlines 13.1.4Character references 13.1.5CDATA sections 13.1.6Comments 13.1.2.1Start tags 13.1.2.2End tags 13.1.2.3Attributes 13.1.2.4Optional tags 13.1.2.5Restrictions on content models 13.1.2.6Restrictions on the contents of raw text and escapable raw text elements 13.1.3.1Newlines 13.2.1Overview of the parsing model 13.2.2Parse errors 13.2.3The input byte stream13.2.3.1Parsing with a known character encoding13.2.3.2Determining the character encoding13.2.3.3Character encodings13.2.3.4Changing the encoding while parsing13.2.3.5Preprocessing the input stream 13.2.3.1Parsing with a known character encoding 13.2.3.2Determining the character encoding 13.2.3.3Character encodings 13.2.3.4Changing the encoding while parsing 13.2.3.5Preprocessing the input stream 13.2.4Parse state13.2.4.1The insertion mode13.2.4.2The stack of open elements13.2.4.3The list of active formatting elements13.2.4.4The element pointers13.2.4.5Other parsing state flags 13.2.4.1The insertion mode 13.2.4.2The stack of open elements 13.2.4.3The list of active formatting elements 13.2.4.4The element pointers 13.2.4.5Other parsing state flags 13.2.5Tokenization13.2.5.1Data state13.2.5.2RCDATA state13.2.5.3RAWTEXT state13.2.5.4Script data state13.2.5.5PLAINTEXT state13.2.5.6Tag open state13.2.5.7End tag open state13.2.5.8Tag name state13.2.5.9RCDATA less-than sign state13.2.5.10RCDATA end tag open state13.2.5.11RCDATA end tag name state13.2.5.12RAWTEXT less-than sign state13.2.5.13RAWTEXT end tag open state13.2.5.14RAWTEXT end tag name state13.2.5.15Script data less-than sign state13.2.5.16Script data end tag open state13.2.5.17Script data end tag name state13.2.5.18Script data escape start state13.2.5.19Script data escape start dash state13.2.5.20Script data escaped state13.2.5.21Script data escaped dash state13.2.5.22Script data escaped dash dash state13.2.5.23Script data escaped less-than sign state13.2.5.24Script data escaped end tag open state13.2.5.25Script data escaped end tag name state13.2.5.26Script data double escape start state13.2.5.27Script data double escaped state13.2.5.28Script data double escaped dash state13.2.5.29Script data double escaped dash dash state13.2.5.30Script data double escaped less-than sign state13.2.5.31Script data double escape end state13.2.5.32Before attribute name state13.2.5.33Attribute name state13.2.5.34After attribute name state13.2.5.35Before attribute value state13.2.5.36Attribute value (double-quoted) state13.2.5.37Attribute value (single-quoted) state13.2.5.38Attribute value (unquoted) state13.2.5.39After attribute value (quoted) state13.2.5.40Self-closing start tag state13.2.5.41Bogus comment state13.2.5.42Markup declaration open state13.2.5.43Comment start state13.2.5.44Comment start dash state13.2.5.45Comment state13.2.5.46Comment less-than sign state13.2.5.47Comment less-than sign bang state13.2.5.48Comment less-than sign bang dash state13.2.5.49Comment less-than sign bang dash dash state13.2.5.50Comment end dash state13.2.5.51Comment end state13.2.5.52Comment end bang state13.2.5.53DOCTYPE state13.2.5.54Before DOCTYPE name state13.2.5.55DOCTYPE name state13.2.5.56After DOCTYPE name state13.2.5.57After DOCTYPE public keyword state13.2.5.58Before DOCTYPE public identifier state13.2.5.59DOCTYPE public identifier (double-quoted) state13.2.5.60DOCTYPE public identifier (single-quoted) state13.2.5.61After DOCTYPE public identifier state13.2.5.62Between DOCTYPE public and system identifiers state13.2.5.63After DOCTYPE system keyword state13.2.5.64Before DOCTYPE system identifier state13.2.5.65DOCTYPE system identifier (double-quoted) state13.2.5.66DOCTYPE system identifier (single-quoted) state13.2.5.67After DOCTYPE system identifier state13.2.5.68Bogus DOCTYPE state13.2.5.69CDATA section state13.2.5.70CDATA section bracket state13.2.5.71CDATA section end state13.2.5.72Character reference state13.2.5.73Named character reference state13.2.5.74Ambiguous ampersand state13.2.5.75Numeric character reference state13.2.5.76Hexadecimal character reference start state13.2.5.77Decimal character reference start state13.2.5.78Hexadecimal character reference state13.2.5.79Decimal character reference state13.2.5.80Numeric character reference end state 13.2.5.1Data state 13.2.5.2RCDATA state 13.2.5.3RAWTEXT state 13.2.5.4Script data state 13.2.5.5PLAINTEXT state 13.2.5.6Tag open state 13.2.5.7End tag open state 13.2.5.8Tag name state 13.2.5.9RCDATA less-than sign state 13.2.5.10RCDATA end tag open state 13.2.5.11RCDATA end tag name state 13.2.5.12RAWTEXT less-than sign state 13.2.5.13RAWTEXT end tag open state 13.2.5.14RAWTEXT end tag name state 13.2.5.15Script data less-than sign state 13.2.5.16Script data end tag open state 13.2.5.17Script data end tag name state 13.2.5.18Script data escape start state 13.2.5.19Script data escape start dash state 13.2.5.20Script data escaped state 13.2.5.21Script data escaped dash state 13.2.5.22Script data escaped dash dash state 13.2.5.23Script data escaped less-than sign state 13.2.5.24Script data escaped end tag open state 13.2.5.25Script data escaped end tag name state 13.2.5.26Script data double escape start state 13.2.5.27Script data double escaped state 13.2.5.28Script data double escaped dash state 13.2.5.29Script data double escaped dash dash state 13.2.5.30Script data double escaped less-than sign state 13.2.5.31Script data double escape end state 13.2.5.32Before attribute name state 13.2.5.33Attribute name state 13.2.5.34After attribute name state 13.2.5.35Before attribute value state 13.2.5.36Attribute value (double-quoted) state 13.2.5.37Attribute value (single-quoted) state 13.2.5.38Attribute value (unquoted) state 13.2.5.39After attribute value (quoted) state 13.2.5.40Self-closing start tag state 13.2.5.41Bogus comment state 13.2.5.42Markup declaration open state 13.2.5.43Comment start state 13.2.5.44Comment start dash state 13.2.5.45Comment state 13.2.5.46Comment less-than sign state 13.2.5.47Comment less-than sign bang state 13.2.5.48Comment less-than sign bang dash state 13.2.5.49Comment less-than sign bang dash dash state 13.2.5.50Comment end dash state 13.2.5.51Comment end state 13.2.5.52Comment end bang state 13.2.5.53DOCTYPE state 13.2.5.54Before DOCTYPE name state 13.2.5.55DOCTYPE name state 13.2.5.56After DOCTYPE name state 13.2.5.57After DOCTYPE public keyword state 13.2.5.58Before DOCTYPE public identifier state 13.2.5.59DOCTYPE public identifier (double-quoted) state 13.2.5.60DOCTYPE public identifier (single-quoted) state 13.2.5.61After DOCTYPE public identifier state 13.2.5.62Between DOCTYPE public and system identifiers state 13.2.5.63After DOCTYPE system keyword state 13.2.5.64Before DOCTYPE system identifier state 13.2.5.65DOCTYPE system identifier (double-quoted) state 13.2.5.66DOCTYPE system identifier (single-quoted) state 13.2.5.67After DOCTYPE system identifier state 13.2.5.68Bogus DOCTYPE state 13.2.5.69CDATA section state 13.2.5.70CDATA section bracket state 13.2.5.71CDATA section end state 13.2.5.72Character reference state 13.2.5.73Named character reference state 13.2.5.74Ambiguous ampersand state 13.2.5.75Numeric character reference state 13.2.5.76Hexadecimal character reference start state 13.2.5.77Decimal character reference start state 13.2.5.78Hexadecimal character reference state 13.2.5.79Decimal character reference state 13.2.5.80Numeric character reference end state 13.2.6Tree construction13.2.6.1Creating and inserting nodes13.2.6.2Parsing elements that contain only text13.2.6.3Closing elements that have implied end tags13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode13.2.6.5The rules for parsing tokens in foreign content 13.2.6.1Creating and inserting nodes 13.2.6.2Parsing elements that contain only text 13.2.6.3Closing elements that have implied end tags 13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode 13.2.6.4.1The ""initial"" insertion mode 13.2.6.4.2The ""before html"" insertion mode 13.2.6.4.3The ""before head"" insertion mode 13.2.6.4.4The ""in head"" insertion mode 13.2.6.4.5The ""in head noscript"" insertion mode 13.2.6.4.6The ""after head"" insertion mode 13.2.6.4.7The ""in body"" insertion mode 13.2.6.4.8The ""text"" insertion mode 13.2.6.4.9The ""in table"" insertion mode 13.2.6.4.10The ""in table text"" insertion mode 13.2.6.4.11The ""in caption"" insertion mode 13.2.6.4.12The ""in column group"" insertion mode 13.2.6.4.13The ""in table body"" insertion mode 13.2.6.4.14The ""in row"" insertion mode 13.2.6.4.15The ""in cell"" insertion mode 13.2.6.4.16The ""in select"" insertion mode 13.2.6.4.17The ""in select in table"" insertion mode 13.2.6.4.18The ""in template"" insertion mode 13.2.6.4.19The ""after body"" insertion mode 13.2.6.4.20The ""in frameset"" insertion mode 13.2.6.4.21The ""after frameset"" insertion mode 13.2.6.4.22The ""after after body"" insertion mode 13.2.6.4.23The ""after after frameset"" insertion mode 13.2.6.5The rules for parsing tokens in foreign content 13.2.7The end 13.2.8Speculative HTML parsing 13.2.9Coercing an HTML DOM into an infoset 13.2.10An introduction to error handling and strange cases in the parser13.2.10.1Misnested tags: <b><i></b></i>13.2.10.2Misnested tags: <b><p></b></p>13.2.10.3Unexpected markup in tables13.2.10.4Scripts that modify the page as it is being parsed13.2.10.5The execution of scripts that are moving across multiple documents13.2.10.6Unclosed formatting elements 13.2.10.1Misnested tags: <b><i></b></i> 13.2.10.2Misnested tags: <b><p></b></p> 13.2.10.3Unexpected markup in tables 13.2.10.4Scripts that modify the page as it is being parsed 13.2.10.5The execution of scripts that are moving across multiple documents 13.2.10.6Unclosed formatting elements 13.2.3.1Parsing with a known character encoding 13.2.3.2Determining the character encoding 13.2.3.3Character encodings 13.2.3.4Changing the encoding while parsing 13.2.3.5Preprocessing the input stream 13.2.4.1The insertion mode 13.2.4.2The stack of open elements 13.2.4.3The list of active formatting elements 13.2.4.4The element pointers 13.2.4.5Other parsing state flags 13.2.5.1Data state 13.2.5.2RCDATA state 13.2.5.3RAWTEXT state 13.2.5.4Script data state 13.2.5.5PLAINTEXT state 13.2.5.6Tag open state 13.2.5.7End tag open state 13.2.5.8Tag name state 13.2.5.9RCDATA less-than sign state 13.2.5.10RCDATA end tag open state 13.2.5.11RCDATA end tag name state 13.2.5.12RAWTEXT less-than sign state 13.2.5.13RAWTEXT end tag open state 13.2.5.14RAWTEXT end tag name state 13.2.5.15Script data less-than sign state 13.2.5.16Script data end tag open state 13.2.5.17Script data end tag name state 13.2.5.18Script data escape start state 13.2.5.19Script data escape start dash state 13.2.5.20Script data escaped state 13.2.5.21Script data escaped dash state 13.2.5.22Script data escaped dash dash state 13.2.5.23Script data escaped less-than sign state 13.2.5.24Script data escaped end tag open state 13.2.5.25Script data escaped end tag name state 13.2.5.26Script data double escape start state 13.2.5.27Script data double escaped state 13.2.5.28Script data double escaped dash state 13.2.5.29Script data double escaped dash dash state 13.2.5.30Script data double escaped less-than sign state 13.2.5.31Script data double escape end state 13.2.5.32Before attribute name state 13.2.5.33Attribute name state 13.2.5.34After attribute name state 13.2.5.35Before attribute value state 13.2.5.36Attribute value (double-quoted) state 13.2.5.37Attribute value (single-quoted) state 13.2.5.38Attribute value (unquoted) state 13.2.5.39After attribute value (quoted) state 13.2.5.40Self-closing start tag state 13.2.5.41Bogus comment state 13.2.5.42Markup declaration open state 13.2.5.43Comment start state 13.2.5.44Comment start dash state 13.2.5.45Comment state 13.2.5.46Comment less-than sign state 13.2.5.47Comment less-than sign bang state 13.2.5.48Comment less-than sign bang dash state 13.2.5.49Comment less-than sign bang dash dash state 13.2.5.50Comment end dash state 13.2.5.51Comment end state 13.2.5.52Comment end bang state 13.2.5.53DOCTYPE state 13.2.5.54Before DOCTYPE name state 13.2.5.55DOCTYPE name state 13.2.5.56After DOCTYPE name state 13.2.5.57After DOCTYPE public keyword state 13.2.5.58Before DOCTYPE public identifier state 13.2.5.59DOCTYPE public identifier (double-quoted) state 13.2.5.60DOCTYPE public identifier (single-quoted) state 13.2.5.61After DOCTYPE public identifier state 13.2.5.62Between DOCTYPE public and system identifiers state 13.2.5.63After DOCTYPE system keyword state 13.2.5.64Before DOCTYPE system identifier state 13.2.5.65DOCTYPE system identifier (double-quoted) state 13.2.5.66DOCTYPE system identifier (single-quoted) state 13.2.5.67After DOCTYPE system identifier state 13.2.5.68Bogus DOCTYPE state 13.2.5.69CDATA section state 13.2.5.70CDATA section bracket state 13.2.5.71CDATA section end state 13.2.5.72Character reference state 13.2.5.73Named character reference state 13.2.5.74Ambiguous ampersand state 13.2.5.75Numeric character reference state 13.2.5.76Hexadecimal character reference start state 13.2.5.77Decimal character reference start state 13.2.5.78Hexadecimal character reference state 13.2.5.79Decimal character reference state 13.2.5.80Numeric character reference end state 13.2.6.1Creating and inserting nodes 13.2.6.2Parsing elements that contain only text 13.2.6.3Closing elements that have implied end tags 13.2.6.4The rules for parsing tokens in HTML content13.2.6.4.1The ""initial"" insertion mode13.2.6.4.2The ""before html"" insertion mode13.2.6.4.3The ""before head"" insertion mode13.2.6.4.4The ""in head"" insertion mode13.2.6.4.5The ""in head noscript"" insertion mode13.2.6.4.6The ""after head"" insertion mode13.2.6.4.7The ""in body"" insertion mode13.2.6.4.8The ""text"" insertion mode13.2.6.4.9The ""in table"" insertion mode13.2.6.4.10The ""in table text"" insertion mode13.2.6.4.11The ""in caption"" insertion mode13.2.6.4.12The ""in column group"" insertion mode13.2.6.4.13The ""in table body"" insertion mode13.2.6.4.14The ""in row"" insertion mode13.2.6.4.15The ""in cell"" insertion mode13.2.6.4.16The ""in select"" insertion mode13.2.6.4.17The ""in select in table"" insertion mode13.2.6.4.18The ""in template"" insertion mode13.2.6.4.19The ""after body"" insertion mode13.2.6.4.20The ""in frameset"" insertion mode13.2.6.4.21The ""after frameset"" insertion mode13.2.6.4.22The ""after after body"" insertion mode13.2.6.4.23The ""after after frameset"" insertion mode 13.2.6.4.1The ""initial"" insertion mode 13.2.6.4.2The ""before html"" insertion mode 13.2.6.4.3The ""before head"" insertion mode 13.2.6.4.4The ""in head"" insertion mode 13.2.6.4.5The ""in head noscript"" insertion mode 13.2.6.4.6The ""after head"" insertion mode 13.2.6.4.7The ""in body"" insertion mode 13.2.6.4.8The ""text"" insertion mode 13.2.6.4.9The ""in table"" insertion mode 13.2.6.4.10The ""in table text"" insertion mode 13.2.6.4.11The ""in caption"" insertion mode 13.2.6.4.12The ""in column group"" insertion mode 13.2.6.4.13The ""in table body"" insertion mode 13.2.6.4.14The ""in row"" insertion mode 13.2.6.4.15The ""in cell"" insertion mode 13.2.6.4.16The ""in select"" insertion mode 13.2.6.4.17The ""in select in table"" insertion mode 13.2.6.4.18The ""in template"" insertion mode 13.2.6.4.19The ""after body"" insertion mode 13.2.6.4.20The ""in frameset"" insertion mode 13.2.6.4.21The ""after frameset"" insertion mode 13.2.6.4.22The ""after after body"" insertion mode 13.2.6.4.23The ""after after frameset"" insertion mode 13.2.6.5The rules for parsing tokens in foreign content 13.2.6.4.1The ""initial"" insertion mode 13.2.6.4.2The ""before html"" insertion mode 13.2.6.4.3The ""before head"" insertion mode 13.2.6.4.4The ""in head"" insertion mode 13.2.6.4.5The ""in head noscript"" insertion mode 13.2.6.4.6The ""after head"" insertion mode 13.2.6.4.7The ""in body"" insertion mode 13.2.6.4.8The ""text"" insertion mode 13.2.6.4.9The ""in table"" insertion mode 13.2.6.4.10The ""in table text"" insertion mode 13.2.6.4.11The ""in caption"" insertion mode 13.2.6.4.12The ""in column group"" insertion mode 13.2.6.4.13The ""in table body"" insertion mode 13.2.6.4.14The ""in row"" insertion mode 13.2.6.4.15The ""in cell"" insertion mode 13.2.6.4.16The ""in select"" insertion mode 13.2.6.4.17The ""in select in table"" insertion mode 13.2.6.4.18The ""in template"" insertion mode 13.2.6.4.19The ""after body"" insertion mode 13.2.6.4.20The ""in frameset"" insertion mode 13.2.6.4.21The ""after frameset"" insertion mode 13.2.6.4.22The ""after after body"" insertion mode 13.2.6.4.23The ""after after frameset"" insertion mode 13.2.10.1Misnested tags: <b><i></b></i> 13.2.10.2Misnested tags: <b><p></b></p> 13.2.10.3Unexpected markup in tables 13.2.10.4Scripts that modify the page as it is being parsed 13.2.10.5The execution of scripts that are moving across multiple documents 13.2.10.6Unclosed formatting elements 14.1Writing documents in the XML syntax 14.2Parsing XML documents 14.3Serializing XML fragments 14.4Parsing XML fragments 15.1Introduction 15.2The CSS user agent style sheet and presentational hints 15.3Non-replaced elements15.3.1Hidden elements15.3.2The page15.3.3Flow content15.3.4Phrasing content15.3.5Bidirectional text15.3.6Sections and headings15.3.7Lists15.3.8Tables15.3.9Margin collapsing quirks15.3.10Form controls15.3.11Thehrelement15.3.12Thefieldsetandlegendelements 15.3.1Hidden elements 15.3.2The page 15.3.3Flow content 15.3.4Phrasing content 15.3.5Bidirectional text 15.3.6Sections and headings 15.3.7Lists 15.3.8Tables 15.3.9Margin collapsing quirks 15.3.10Form controls 15.3.11Thehrelement 15.3.12Thefieldsetandlegendelements 15.4Replaced elements15.4.1Embedded content15.4.2Images15.4.3Attributes for embedded content and images15.4.4Image maps 15.4.1Embedded content 15.4.2Images 15.4.3Attributes for embedded content and images 15.4.4Image maps 15.5Widgets15.5.1Native appearance15.5.2Writing mode15.5.3Button layout15.5.4Thebuttonelement15.5.5Thedetailsandsummaryelements15.5.6Theinputelement as a text entry widget15.5.7Theinputelement as domain-specific widgets15.5.8Theinputelement as a range control15.5.9Theinputelement as a color
  well15.5.10Theinputelement as a checkbox and radio button widgets15.5.11Theinputelement as a file upload control15.5.12Theinputelement as a button15.5.13Themarqueeelement15.5.14Themeterelement15.5.15Theprogresselement15.5.16Theselectelement15.5.17Thetextareaelement 15.5.1Native appearance 15.5.2Writing mode 15.5.3Button layout 15.5.4Thebuttonelement 15.5.5Thedetailsandsummaryelements 15.5.6Theinputelement as a text entry widget 15.5.7Theinputelement as domain-specific widgets 15.5.8Theinputelement as a range control 15.5.9Theinputelement as a color
  well 15.5.10Theinputelement as a checkbox and radio button widgets 15.5.11Theinputelement as a file upload control 15.5.12Theinputelement as a button 15.5.13Themarqueeelement 15.5.14Themeterelement 15.5.15Theprogresselement 15.5.16Theselectelement 15.5.17Thetextareaelement 15.6Frames and framesets 15.7Interactive media15.7.1Links, forms, and navigation15.7.2Thetitleattribute15.7.3Editing hosts15.7.4Text rendered in native user interfaces 15.7.1Links, forms, and navigation 15.7.2Thetitleattribute 15.7.3Editing hosts 15.7.4Text rendered in native user interfaces 15.8Print media 15.9Unstyled XML documents 15.3.1Hidden elements 15.3.2The page 15.3.3Flow content 15.3.4Phrasing content 15.3.5Bidirectional text 15.3.6Sections and headings 15.3.7Lists 15.3.8Tables 15.3.9Margin collapsing quirks 15.3.10Form controls 15.3.11Thehrelement 15.3.12Thefieldsetandlegendelements 15.4.1Embedded content 15.4.2Images 15.4.3Attributes for embedded content and images 15.4.4Image maps 15.5.1Native appearance 15.5.2Writing mode 15.5.3Button layout 15.5.4Thebuttonelement 15.5.5Thedetailsandsummaryelements 15.5.6Theinputelement as a text entry widget 15.5.7Theinputelement as domain-specific widgets 15.5.8Theinputelement as a range control 15.5.9Theinputelement as a color
  well 15.5.10Theinputelement as a checkbox and radio button widgets 15.5.11Theinputelement as a file upload control 15.5.12Theinputelement as a button 15.5.13Themarqueeelement 15.5.14Themeterelement 15.5.15Theprogresselement 15.5.16Theselectelement 15.5.17Thetextareaelement 15.7.1Links, forms, and navigation 15.7.2Thetitleattribute 15.7.3Editing hosts 15.7.4Text rendered in native user interfaces 16.1Obsolete but conforming features16.1.1Warnings for obsolete but conforming features 16.1.1Warnings for obsolete but conforming features 16.2Non-conforming features 16.3Requirements for implementations16.3.1Themarqueeelement16.3.2Frames16.3.3Other elements, attributes and APIs 16.3.1Themarqueeelement 16.3.2Frames 16.3.3Other elements, attributes and APIs 16.1.1Warnings for obsolete but conforming features 16.3.1Themarqueeelement 16.3.2Frames 16.3.3Other elements, attributes and APIs 17.1text/html 17.2multipart/x-mixed-replace 17.3application/xhtml+xml 17.4text/ping 17.5application/microdata+json 17.6text/event-stream 17.7web+scheme prefix Elements Element content categories Attributes Element interfaces All interfaces Events HTTP headers MIME types"
